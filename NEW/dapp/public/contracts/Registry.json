{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "competitionName",
          "type": "string"
        }
      ],
      "name": "CompetitionActiveToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "competitionName",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newLocation",
          "type": "bytes32"
        }
      ],
      "name": "CompetitionRulesLocationChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "competitionName",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newVaultAddress",
          "type": "address"
        }
      ],
      "name": "CompetitionVaultAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "extensionName",
          "type": "string"
        }
      ],
      "name": "ExtensionActiveToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "extensionName",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newLocation",
          "type": "bytes32"
        }
      ],
      "name": "ExtensionInfoLocationChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "competitionName",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "competitionAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vaultAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "rulesLocation",
          "type": "bytes32"
        }
      ],
      "name": "NewCompetitionRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "extensionName",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "extensionAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "informationLocation",
          "type": "bytes32"
        }
      ],
      "name": "NewExtensionRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "TokenAddressChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "competitionName",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "newLocation",
          "type": "bytes32"
        }
      ],
      "name": "changeCompetitionRulesLocation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "competitionName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "newVaultAddress",
          "type": "address"
        }
      ],
      "name": "changeCompetitionVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "extensionName",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "newLocation",
          "type": "bytes32"
        }
      ],
      "name": "changeExtensionInfoLocation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "changeTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "competitionName",
          "type": "string"
        }
      ],
      "name": "getCompetitionActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "competitionName",
          "type": "string"
        }
      ],
      "name": "getCompetitionAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "competitionAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCompetitionList",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "competitionNames",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "competitionName",
          "type": "string"
        }
      ],
      "name": "getCompetitionRulesLocation",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "rulesLocation",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "competitionName",
          "type": "string"
        }
      ],
      "name": "getCompetitionVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "vaultAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "extensionName",
          "type": "string"
        }
      ],
      "name": "getExtensionActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "extensionName",
          "type": "string"
        }
      ],
      "name": "getExtensionAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "extensionAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExtensionList",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "extensionNames",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "extensionName",
          "type": "string"
        }
      ],
      "name": "getExtensionRulesLocation",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "informationLocation",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "competitionName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "competitionAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vaultAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "rulesLocation",
          "type": "bytes32"
        }
      ],
      "name": "registerNewCompetition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "extensionName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "extensionAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "informationLocation",
          "type": "bytes32"
        }
      ],
      "name": "registerNewExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "competitionName",
          "type": "string"
        }
      ],
      "name": "toggleCompetitionActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "extensionName",
          "type": "string"
        }
      ],
      "name": "toggleExtensionActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "4": "contracts/Registry.sol"
  },
  "ast": {
    "absolutePath": "contracts/Registry.sol",
    "exportedSymbols": {
      "AccessControl": [
        5617
      ],
      "Context": [
        15086
      ],
      "ERC165": [
        16144
      ],
      "IAccessControl": [
        5337
      ],
      "IERC165": [
        16470
      ],
      "IRegistry": [
        19467
      ],
      "Registry": [
        4809
      ]
    },
    "id": 4810,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 4224,
        "literals": [
          "solidity",
          "0.8",
          ".4"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:22:4"
      },
      {
        "absolutePath": "contracts/standard/access/AccessControl.sol",
        "file": "./standard/access/AccessControl.sol",
        "id": 4225,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4810,
        "sourceUnit": 5618,
        "src": "57:45:4",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "interfaces/IRegistry.sol",
        "file": "./../interfaces/IRegistry.sol",
        "id": 4226,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4810,
        "sourceUnit": 19468,
        "src": "103:39:4",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 4227,
              "name": "AccessControl",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 5617,
              "src": "166:13:4"
            },
            "id": 4228,
            "nodeType": "InheritanceSpecifier",
            "src": "166:13:4"
          },
          {
            "baseName": {
              "id": 4229,
              "name": "IRegistry",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 19467,
              "src": "181:9:4"
            },
            "id": 4230,
            "nodeType": "InheritanceSpecifier",
            "src": "181:9:4"
          }
        ],
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 4809,
        "linearizedBaseContracts": [
          4809,
          19467,
          5617,
          16144,
          16470,
          5337,
          15086
        ],
        "name": "Registry",
        "nameLocation": "154:8:4",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "canonicalName": "Registry.Comp",
            "id": 4239,
            "members": [
              {
                "constant": false,
                "id": 4232,
                "mutability": "mutable",
                "name": "active",
                "nameLocation": "222:6:4",
                "nodeType": "VariableDeclaration",
                "scope": 4239,
                "src": "217:11:4",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 4231,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "217:4:4",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4234,
                "mutability": "mutable",
                "name": "competitionAddress",
                "nameLocation": "246:18:4",
                "nodeType": "VariableDeclaration",
                "scope": 4239,
                "src": "238:26:4",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 4233,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "238:7:4",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4236,
                "mutability": "mutable",
                "name": "vaultAddress",
                "nameLocation": "282:12:4",
                "nodeType": "VariableDeclaration",
                "scope": 4239,
                "src": "274:20:4",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 4235,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "274:7:4",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4238,
                "mutability": "mutable",
                "name": "rulesLocation",
                "nameLocation": "312:13:4",
                "nodeType": "VariableDeclaration",
                "scope": 4239,
                "src": "304:21:4",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                },
                "typeName": {
                  "id": 4237,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "304:7:4",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Comp",
            "nameLocation": "203:4:4",
            "nodeType": "StructDefinition",
            "scope": 4809,
            "src": "196:136:4",
            "visibility": "public"
          },
          {
            "canonicalName": "Registry.Ext",
            "id": 4246,
            "members": [
              {
                "constant": false,
                "id": 4241,
                "mutability": "mutable",
                "name": "active",
                "nameLocation": "363:6:4",
                "nodeType": "VariableDeclaration",
                "scope": 4246,
                "src": "358:11:4",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 4240,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "358:4:4",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4243,
                "mutability": "mutable",
                "name": "extensionAddress",
                "nameLocation": "387:16:4",
                "nodeType": "VariableDeclaration",
                "scope": 4246,
                "src": "379:24:4",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 4242,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "379:7:4",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4245,
                "mutability": "mutable",
                "name": "informationLocation",
                "nameLocation": "421:19:4",
                "nodeType": "VariableDeclaration",
                "scope": 4246,
                "src": "413:27:4",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                },
                "typeName": {
                  "id": 4244,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "413:7:4",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Ext",
            "nameLocation": "345:3:4",
            "nodeType": "StructDefinition",
            "scope": 4809,
            "src": "338:109:4",
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 4248,
            "mutability": "mutable",
            "name": "_token",
            "nameLocation": "468:6:4",
            "nodeType": "VariableDeclaration",
            "scope": 4809,
            "src": "452:22:4",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 4247,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "452:7:4",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 4253,
            "mutability": "mutable",
            "name": "_competition",
            "nameLocation": "512:12:4",
            "nodeType": "VariableDeclaration",
            "scope": 4809,
            "src": "480:44:4",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Comp_$4239_storage_$",
              "typeString": "mapping(string => struct Registry.Comp)"
            },
            "typeName": {
              "id": 4252,
              "keyType": {
                "id": 4249,
                "name": "string",
                "nodeType": "ElementaryTypeName",
                "src": "488:6:4",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                }
              },
              "nodeType": "Mapping",
              "src": "480:23:4",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Comp_$4239_storage_$",
                "typeString": "mapping(string => struct Registry.Comp)"
              },
              "valueType": {
                "id": 4251,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 4250,
                  "name": "Comp",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 4239,
                  "src": "498:4:4"
                },
                "referencedDeclaration": 4239,
                "src": "498:4:4",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Comp_$4239_storage_ptr",
                  "typeString": "struct Registry.Comp"
                }
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 4258,
            "mutability": "mutable",
            "name": "_extension",
            "nameLocation": "561:10:4",
            "nodeType": "VariableDeclaration",
            "scope": 4809,
            "src": "530:41:4",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Ext_$4246_storage_$",
              "typeString": "mapping(string => struct Registry.Ext)"
            },
            "typeName": {
              "id": 4257,
              "keyType": {
                "id": 4254,
                "name": "string",
                "nodeType": "ElementaryTypeName",
                "src": "538:6:4",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                }
              },
              "nodeType": "Mapping",
              "src": "530:22:4",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Ext_$4246_storage_$",
                "typeString": "mapping(string => struct Registry.Ext)"
              },
              "valueType": {
                "id": 4256,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 4255,
                  "name": "Ext",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 4246,
                  "src": "548:3:4"
                },
                "referencedDeclaration": 4246,
                "src": "548:3:4",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Ext_$4246_storage_ptr",
                  "typeString": "struct Registry.Ext"
                }
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 4261,
            "mutability": "mutable",
            "name": "_competitionNames",
            "nameLocation": "594:17:4",
            "nodeType": "VariableDeclaration",
            "scope": 4809,
            "src": "577:34:4",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_string_storage_$dyn_storage",
              "typeString": "string[]"
            },
            "typeName": {
              "baseType": {
                "id": 4259,
                "name": "string",
                "nodeType": "ElementaryTypeName",
                "src": "577:6:4",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                }
              },
              "id": 4260,
              "nodeType": "ArrayTypeName",
              "src": "577:8:4",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                "typeString": "string[]"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 4264,
            "mutability": "mutable",
            "name": "_extensionNames",
            "nameLocation": "634:15:4",
            "nodeType": "VariableDeclaration",
            "scope": 4809,
            "src": "617:32:4",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_string_storage_$dyn_storage",
              "typeString": "string[]"
            },
            "typeName": {
              "baseType": {
                "id": 4262,
                "name": "string",
                "nodeType": "ElementaryTypeName",
                "src": "617:6:4",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                }
              },
              "id": 4263,
              "nodeType": "ArrayTypeName",
              "src": "617:8:4",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                "typeString": "string[]"
              }
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 4273,
              "nodeType": "Block",
              "src": "675:59:4",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4268,
                        "name": "DEFAULT_ADMIN_ROLE",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5359,
                        "src": "696:18:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "expression": {
                          "id": 4269,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "716:3:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 4270,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "716:10:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 4267,
                      "name": "_setupRole",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5531,
                      "src": "685:10:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
                        "typeString": "function (bytes32,address)"
                      }
                    },
                    "id": 4271,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "685:42:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4272,
                  "nodeType": "ExpressionStatement",
                  "src": "685:42:4"
                }
              ]
            },
            "id": 4274,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4265,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "668:2:4"
            },
            "returnParameters": {
              "id": 4266,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "675:0:4"
            },
            "scope": 4809,
            "src": "657:77:4",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              19302
            ],
            "body": {
              "id": 4285,
              "nodeType": "Block",
              "src": "848:53:4",
              "statements": [
                {
                  "expression": {
                    "id": 4283,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4281,
                      "name": "competitionNames",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4279,
                      "src": "858:16:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                        "typeString": "string memory[] memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 4282,
                      "name": "_competitionNames",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4261,
                      "src": "877:17:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_string_storage_$dyn_storage",
                        "typeString": "string storage ref[] storage ref"
                      }
                    },
                    "src": "858:36:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                      "typeString": "string memory[] memory"
                    }
                  },
                  "id": 4284,
                  "nodeType": "ExpressionStatement",
                  "src": "858:36:4"
                }
              ]
            },
            "functionSelector": "8b9c0e36",
            "id": 4286,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getCompetitionList",
            "nameLocation": "749:18:4",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 4276,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "788:8:4"
            },
            "parameters": {
              "id": 4275,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "767:2:4"
            },
            "returnParameters": {
              "id": 4280,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4279,
                  "mutability": "mutable",
                  "name": "competitionNames",
                  "nameLocation": "826:16:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 4286,
                  "src": "810:32:4",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                    "typeString": "string[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 4277,
                      "name": "string",
                      "nodeType": "ElementaryTypeName",
                      "src": "810:6:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      }
                    },
                    "id": 4278,
                    "nodeType": "ArrayTypeName",
                    "src": "810:8:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                      "typeString": "string[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "809:34:4"
            },
            "scope": 4809,
            "src": "740:161:4",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              19308
            ],
            "body": {
              "id": 4297,
              "nodeType": "Block",
              "src": "1011:49:4",
              "statements": [
                {
                  "expression": {
                    "id": 4295,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4293,
                      "name": "extensionNames",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4291,
                      "src": "1021:14:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                        "typeString": "string memory[] memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 4294,
                      "name": "_extensionNames",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4264,
                      "src": "1038:15:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_string_storage_$dyn_storage",
                        "typeString": "string storage ref[] storage ref"
                      }
                    },
                    "src": "1021:32:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                      "typeString": "string memory[] memory"
                    }
                  },
                  "id": 4296,
                  "nodeType": "ExpressionStatement",
                  "src": "1021:32:4"
                }
              ]
            },
            "functionSelector": "2ac7b757",
            "id": 4298,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getExtensionList",
            "nameLocation": "916:16:4",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 4288,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "953:8:4"
            },
            "parameters": {
              "id": 4287,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "932:2:4"
            },
            "returnParameters": {
              "id": 4292,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4291,
                  "mutability": "mutable",
                  "name": "extensionNames",
                  "nameLocation": "991:14:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 4298,
                  "src": "975:30:4",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                    "typeString": "string[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 4289,
                      "name": "string",
                      "nodeType": "ElementaryTypeName",
                      "src": "975:6:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      }
                    },
                    "id": 4290,
                    "nodeType": "ArrayTypeName",
                    "src": "975:8:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                      "typeString": "string[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "974:32:4"
            },
            "scope": 4809,
            "src": "907:153:4",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              19315
            ],
            "body": {
              "id": 4313,
              "nodeType": "Block",
              "src": "1186:62:4",
              "statements": [
                {
                  "expression": {
                    "id": 4311,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4306,
                      "name": "active",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4304,
                      "src": "1196:6:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 4307,
                          "name": "_competition",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4253,
                          "src": "1205:12:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Comp_$4239_storage_$",
                            "typeString": "mapping(string memory => struct Registry.Comp storage ref)"
                          }
                        },
                        "id": 4309,
                        "indexExpression": {
                          "id": 4308,
                          "name": "competitionName",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4300,
                          "src": "1218:15:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_calldata_ptr",
                            "typeString": "string calldata"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1205:29:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Comp_$4239_storage",
                          "typeString": "struct Registry.Comp storage ref"
                        }
                      },
                      "id": 4310,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "active",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4232,
                      "src": "1205:36:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "1196:45:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4312,
                  "nodeType": "ExpressionStatement",
                  "src": "1196:45:4"
                }
              ]
            },
            "functionSelector": "82144989",
            "id": 4314,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getCompetitionActive",
            "nameLocation": "1075:20:4",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 4302,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1147:8:4"
            },
            "parameters": {
              "id": 4301,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4300,
                  "mutability": "mutable",
                  "name": "competitionName",
                  "nameLocation": "1112:15:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 4314,
                  "src": "1096:31:4",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4299,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1096:6:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1095:33:4"
            },
            "returnParameters": {
              "id": 4305,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4304,
                  "mutability": "mutable",
                  "name": "active",
                  "nameLocation": "1174:6:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 4314,
                  "src": "1169:11:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4303,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1169:4:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1168:13:4"
            },
            "scope": 4809,
            "src": "1066:182:4",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              19322
            ],
            "body": {
              "id": 4329,
              "nodeType": "Block",
              "src": "1390:86:4",
              "statements": [
                {
                  "expression": {
                    "id": 4327,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4322,
                      "name": "competitionAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4320,
                      "src": "1400:18:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 4323,
                          "name": "_competition",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4253,
                          "src": "1421:12:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Comp_$4239_storage_$",
                            "typeString": "mapping(string memory => struct Registry.Comp storage ref)"
                          }
                        },
                        "id": 4325,
                        "indexExpression": {
                          "id": 4324,
                          "name": "competitionName",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4316,
                          "src": "1434:15:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_calldata_ptr",
                            "typeString": "string calldata"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1421:29:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Comp_$4239_storage",
                          "typeString": "struct Registry.Comp storage ref"
                        }
                      },
                      "id": 4326,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "competitionAddress",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4234,
                      "src": "1421:48:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1400:69:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 4328,
                  "nodeType": "ExpressionStatement",
                  "src": "1400:69:4"
                }
              ]
            },
            "functionSelector": "5d58ebc1",
            "id": 4330,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getCompetitionAddress",
            "nameLocation": "1263:21:4",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 4318,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1336:8:4"
            },
            "parameters": {
              "id": 4317,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4316,
                  "mutability": "mutable",
                  "name": "competitionName",
                  "nameLocation": "1301:15:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 4330,
                  "src": "1285:31:4",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4315,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1285:6:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1284:33:4"
            },
            "returnParameters": {
              "id": 4321,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4320,
                  "mutability": "mutable",
                  "name": "competitionAddress",
                  "nameLocation": "1366:18:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 4330,
                  "src": "1358:26:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4319,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1358:7:4",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1357:28:4"
            },
            "scope": 4809,
            "src": "1254:222:4",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              19329
            ],
            "body": {
              "id": 4345,
              "nodeType": "Block",
              "src": "1610:74:4",
              "statements": [
                {
                  "expression": {
                    "id": 4343,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4338,
                      "name": "vaultAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4336,
                      "src": "1620:12:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 4339,
                          "name": "_competition",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4253,
                          "src": "1635:12:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Comp_$4239_storage_$",
                            "typeString": "mapping(string memory => struct Registry.Comp storage ref)"
                          }
                        },
                        "id": 4341,
                        "indexExpression": {
                          "id": 4340,
                          "name": "competitionName",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4332,
                          "src": "1648:15:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_calldata_ptr",
                            "typeString": "string calldata"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1635:29:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Comp_$4239_storage",
                          "typeString": "struct Registry.Comp storage ref"
                        }
                      },
                      "id": 4342,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "vaultAddress",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4236,
                      "src": "1635:42:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1620:57:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 4344,
                  "nodeType": "ExpressionStatement",
                  "src": "1620:57:4"
                }
              ]
            },
            "functionSelector": "ddad6d50",
            "id": 4346,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getCompetitionVault",
            "nameLocation": "1491:19:4",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 4334,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1562:8:4"
            },
            "parameters": {
              "id": 4333,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4332,
                  "mutability": "mutable",
                  "name": "competitionName",
                  "nameLocation": "1527:15:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 4346,
                  "src": "1511:31:4",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4331,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1511:6:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1510:33:4"
            },
            "returnParameters": {
              "id": 4337,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4336,
                  "mutability": "mutable",
                  "name": "vaultAddress",
                  "nameLocation": "1592:12:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 4346,
                  "src": "1584:20:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4335,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1584:7:4",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1583:22:4"
            },
            "scope": 4809,
            "src": "1482:202:4",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              19336
            ],
            "body": {
              "id": 4361,
              "nodeType": "Block",
              "src": "1827:76:4",
              "statements": [
                {
                  "expression": {
                    "id": 4359,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4354,
                      "name": "rulesLocation",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4352,
                      "src": "1837:13:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 4355,
                          "name": "_competition",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4253,
                          "src": "1853:12:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Comp_$4239_storage_$",
                            "typeString": "mapping(string memory => struct Registry.Comp storage ref)"
                          }
                        },
                        "id": 4357,
                        "indexExpression": {
                          "id": 4356,
                          "name": "competitionName",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4348,
                          "src": "1866:15:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_calldata_ptr",
                            "typeString": "string calldata"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1853:29:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Comp_$4239_storage",
                          "typeString": "struct Registry.Comp storage ref"
                        }
                      },
                      "id": 4358,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "rulesLocation",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4238,
                      "src": "1853:43:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "1837:59:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 4360,
                  "nodeType": "ExpressionStatement",
                  "src": "1837:59:4"
                }
              ]
            },
            "functionSelector": "3d783740",
            "id": 4362,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getCompetitionRulesLocation",
            "nameLocation": "1699:27:4",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 4350,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1778:8:4"
            },
            "parameters": {
              "id": 4349,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4348,
                  "mutability": "mutable",
                  "name": "competitionName",
                  "nameLocation": "1743:15:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 4362,
                  "src": "1727:31:4",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4347,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1727:6:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1726:33:4"
            },
            "returnParameters": {
              "id": 4353,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4352,
                  "mutability": "mutable",
                  "name": "rulesLocation",
                  "nameLocation": "1808:13:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 4362,
                  "src": "1800:21:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 4351,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1800:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1799:23:4"
            },
            "scope": 4809,
            "src": "1690:213:4",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              19341
            ],
            "body": {
              "id": 4372,
              "nodeType": "Block",
              "src": "1995:31:4",
              "statements": [
                {
                  "expression": {
                    "id": 4370,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4368,
                      "name": "token",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4366,
                      "src": "2005:5:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 4369,
                      "name": "_token",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4248,
                      "src": "2013:6:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2005:14:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 4371,
                  "nodeType": "ExpressionStatement",
                  "src": "2005:14:4"
                }
              ]
            },
            "functionSelector": "10fe9ae8",
            "id": 4373,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getTokenAddress",
            "nameLocation": "1918:15:4",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 4364,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1954:8:4"
            },
            "parameters": {
              "id": 4363,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1933:2:4"
            },
            "returnParameters": {
              "id": 4367,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4366,
                  "mutability": "mutable",
                  "name": "token",
                  "nameLocation": "1984:5:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 4373,
                  "src": "1976:13:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4365,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1976:7:4",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1975:15:4"
            },
            "scope": 4809,
            "src": "1909:117:4",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              19348
            ],
            "body": {
              "id": 4388,
              "nodeType": "Block",
              "src": "2166:78:4",
              "statements": [
                {
                  "expression": {
                    "id": 4386,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4381,
                      "name": "extensionAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4379,
                      "src": "2176:16:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 4382,
                          "name": "_extension",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4258,
                          "src": "2195:10:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Ext_$4246_storage_$",
                            "typeString": "mapping(string memory => struct Registry.Ext storage ref)"
                          }
                        },
                        "id": 4384,
                        "indexExpression": {
                          "id": 4383,
                          "name": "extensionName",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4375,
                          "src": "2206:13:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_calldata_ptr",
                            "typeString": "string calldata"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "2195:25:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Ext_$4246_storage",
                          "typeString": "struct Registry.Ext storage ref"
                        }
                      },
                      "id": 4385,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "extensionAddress",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4243,
                      "src": "2195:42:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2176:61:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 4387,
                  "nodeType": "ExpressionStatement",
                  "src": "2176:61:4"
                }
              ]
            },
            "functionSelector": "202a1c65",
            "id": 4389,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getExtensionAddress",
            "nameLocation": "2045:19:4",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 4377,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2114:8:4"
            },
            "parameters": {
              "id": 4376,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4375,
                  "mutability": "mutable",
                  "name": "extensionName",
                  "nameLocation": "2081:13:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 4389,
                  "src": "2065:29:4",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4374,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2065:6:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2064:31:4"
            },
            "returnParameters": {
              "id": 4380,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4379,
                  "mutability": "mutable",
                  "name": "extensionAddress",
                  "nameLocation": "2144:16:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 4389,
                  "src": "2136:24:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4378,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2136:7:4",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2135:26:4"
            },
            "scope": 4809,
            "src": "2036:208:4",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              19355
            ],
            "body": {
              "id": 4404,
              "nodeType": "Block",
              "src": "2370:58:4",
              "statements": [
                {
                  "expression": {
                    "id": 4402,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4397,
                      "name": "active",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4395,
                      "src": "2380:6:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 4398,
                          "name": "_extension",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4258,
                          "src": "2389:10:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Ext_$4246_storage_$",
                            "typeString": "mapping(string memory => struct Registry.Ext storage ref)"
                          }
                        },
                        "id": 4400,
                        "indexExpression": {
                          "id": 4399,
                          "name": "extensionName",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4391,
                          "src": "2400:13:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_calldata_ptr",
                            "typeString": "string calldata"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "2389:25:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Ext_$4246_storage",
                          "typeString": "struct Registry.Ext storage ref"
                        }
                      },
                      "id": 4401,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "active",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4241,
                      "src": "2389:32:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "2380:41:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4403,
                  "nodeType": "ExpressionStatement",
                  "src": "2380:41:4"
                }
              ]
            },
            "functionSelector": "f77d6571",
            "id": 4405,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getExtensionActive",
            "nameLocation": "2263:18:4",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 4393,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2331:8:4"
            },
            "parameters": {
              "id": 4392,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4391,
                  "mutability": "mutable",
                  "name": "extensionName",
                  "nameLocation": "2298:13:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 4405,
                  "src": "2282:29:4",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4390,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2282:6:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2281:31:4"
            },
            "returnParameters": {
              "id": 4396,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4395,
                  "mutability": "mutable",
                  "name": "active",
                  "nameLocation": "2358:6:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 4405,
                  "src": "2353:11:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4394,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2353:4:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2352:13:4"
            },
            "scope": 4809,
            "src": "2254:174:4",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              19362
            ],
            "body": {
              "id": 4420,
              "nodeType": "Block",
              "src": "2577:84:4",
              "statements": [
                {
                  "expression": {
                    "id": 4418,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4413,
                      "name": "informationLocation",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4411,
                      "src": "2587:19:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 4414,
                          "name": "_extension",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4258,
                          "src": "2609:10:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Ext_$4246_storage_$",
                            "typeString": "mapping(string memory => struct Registry.Ext storage ref)"
                          }
                        },
                        "id": 4416,
                        "indexExpression": {
                          "id": 4415,
                          "name": "extensionName",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4407,
                          "src": "2620:13:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_calldata_ptr",
                            "typeString": "string calldata"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "2609:25:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Ext_$4246_storage",
                          "typeString": "struct Registry.Ext storage ref"
                        }
                      },
                      "id": 4417,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "informationLocation",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4245,
                      "src": "2609:45:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "2587:67:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 4419,
                  "nodeType": "ExpressionStatement",
                  "src": "2587:67:4"
                }
              ]
            },
            "functionSelector": "526ecad8",
            "id": 4421,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getExtensionRulesLocation",
            "nameLocation": "2447:25:4",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 4409,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2522:8:4"
            },
            "parameters": {
              "id": 4408,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4407,
                  "mutability": "mutable",
                  "name": "extensionName",
                  "nameLocation": "2489:13:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 4421,
                  "src": "2473:29:4",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4406,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2473:6:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2472:31:4"
            },
            "returnParameters": {
              "id": 4412,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4411,
                  "mutability": "mutable",
                  "name": "informationLocation",
                  "nameLocation": "2552:19:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 4421,
                  "src": "2544:27:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 4410,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2544:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2543:29:4"
            },
            "scope": 4809,
            "src": "2438:223:4",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              19373
            ],
            "body": {
              "id": 4475,
              "nodeType": "Block",
              "src": "2831:561:4",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 4435,
                            "name": "DEFAULT_ADMIN_ROLE",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5359,
                            "src": "2857:18:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "expression": {
                              "id": 4436,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "2877:3:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 4437,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "2877:10:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 4434,
                          "name": "hasRole",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5427,
                          "src": "2849:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
                            "typeString": "function (bytes32,address) view returns (bool)"
                          }
                        },
                        "id": 4438,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2849:39:4",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5265676973747279202d2072656769737465724e6577436f6d7065746974696f6e3a2043616c6c657220697320756e617574686f72697a65642e",
                        "id": 4439,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2890:60:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c2793a301df305d8872cb162be1cadf7bf9b8ca583afd71a6a14759275b203c1",
                          "typeString": "literal_string \"Registry - registerNewCompetition: Caller is unauthorized.\""
                        },
                        "value": "Registry - registerNewCompetition: Caller is unauthorized."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c2793a301df305d8872cb162be1cadf7bf9b8ca583afd71a6a14759275b203c1",
                          "typeString": "literal_string \"Registry - registerNewCompetition: Caller is unauthorized.\""
                        }
                      ],
                      "id": 4433,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2841:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4440,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2841:110:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4441,
                  "nodeType": "ExpressionStatement",
                  "src": "2841:110:4"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4447,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "2969:37:4",
                        "subExpression": {
                          "expression": {
                            "baseExpression": {
                              "id": 4443,
                              "name": "_competition",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4253,
                              "src": "2970:12:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Comp_$4239_storage_$",
                                "typeString": "mapping(string memory => struct Registry.Comp storage ref)"
                              }
                            },
                            "id": 4445,
                            "indexExpression": {
                              "id": 4444,
                              "name": "competitionName",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4423,
                              "src": "2983:15:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_calldata_ptr",
                                "typeString": "string calldata"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "2970:29:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Comp_$4239_storage",
                              "typeString": "struct Registry.Comp storage ref"
                            }
                          },
                          "id": 4446,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "active",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 4232,
                          "src": "2970:36:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5265676973747279202d2072656769737465724e6577436f6d7065746974696f6e3a20436f6d7065746974696f6e20616c7265616479206578697374732e",
                        "id": 4448,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3008:64:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_a98fdca0c9f33fcefa970c70ef823e4d8bdd8a5d2d150aee13ee41a7eaabd0b1",
                          "typeString": "literal_string \"Registry - registerNewCompetition: Competition already exists.\""
                        },
                        "value": "Registry - registerNewCompetition: Competition already exists."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_a98fdca0c9f33fcefa970c70ef823e4d8bdd8a5d2d150aee13ee41a7eaabd0b1",
                          "typeString": "literal_string \"Registry - registerNewCompetition: Competition already exists.\""
                        }
                      ],
                      "id": 4442,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2961:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4449,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2961:112:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4450,
                  "nodeType": "ExpressionStatement",
                  "src": "2961:112:4"
                },
                {
                  "expression": {
                    "id": 4460,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 4451,
                        "name": "_competition",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4253,
                        "src": "3083:12:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Comp_$4239_storage_$",
                          "typeString": "mapping(string memory => struct Registry.Comp storage ref)"
                        }
                      },
                      "id": 4453,
                      "indexExpression": {
                        "id": 4452,
                        "name": "competitionName",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4423,
                        "src": "3096:15:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "3083:29:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Comp_$4239_storage",
                        "typeString": "struct Registry.Comp storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "hexValue": "74727565",
                          "id": 4455,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3128:4:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        {
                          "id": 4456,
                          "name": "competitionAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4425,
                          "src": "3153:18:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "id": 4457,
                          "name": "vaultAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4427,
                          "src": "3187:12:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "id": 4458,
                          "name": "rulesLocation",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4429,
                          "src": "3215:13:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        ],
                        "id": 4454,
                        "name": "Comp",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4239,
                        "src": "3115:4:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_Comp_$4239_storage_ptr_$",
                          "typeString": "type(struct Registry.Comp storage pointer)"
                        }
                      },
                      "id": 4459,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "names": [
                        "active",
                        "competitionAddress",
                        "vaultAddress",
                        "rulesLocation"
                      ],
                      "nodeType": "FunctionCall",
                      "src": "3115:115:4",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Comp_$4239_memory_ptr",
                        "typeString": "struct Registry.Comp memory"
                      }
                    },
                    "src": "3083:147:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Comp_$4239_storage",
                      "typeString": "struct Registry.Comp storage ref"
                    }
                  },
                  "id": 4461,
                  "nodeType": "ExpressionStatement",
                  "src": "3083:147:4"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4465,
                        "name": "competitionName",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4423,
                        "src": "3263:15:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        }
                      ],
                      "expression": {
                        "id": 4462,
                        "name": "_competitionNames",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4261,
                        "src": "3240:17:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_string_storage_$dyn_storage",
                          "typeString": "string storage ref[] storage ref"
                        }
                      },
                      "id": 4464,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "push",
                      "nodeType": "MemberAccess",
                      "src": "3240:22:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_string_storage_$dyn_storage_ptr_$_t_string_storage_$returns$__$bound_to$_t_array$_t_string_storage_$dyn_storage_ptr_$",
                        "typeString": "function (string storage ref[] storage pointer,string storage ref)"
                      }
                    },
                    "id": 4466,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3240:39:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4467,
                  "nodeType": "ExpressionStatement",
                  "src": "3240:39:4"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 4469,
                        "name": "competitionName",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4423,
                        "src": "3320:15:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        }
                      },
                      {
                        "id": 4470,
                        "name": "competitionAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4425,
                        "src": "3337:18:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4471,
                        "name": "vaultAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4427,
                        "src": "3357:12:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4472,
                        "name": "rulesLocation",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4429,
                        "src": "3371:13:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 4468,
                      "name": "NewCompetitionRegistered",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19428,
                      "src": "3295:24:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_string_memory_ptr_$_t_address_$_t_address_$_t_bytes32_$returns$__$",
                        "typeString": "function (string memory,address,address,bytes32)"
                      }
                    },
                    "id": 4473,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3295:90:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4474,
                  "nodeType": "EmitStatement",
                  "src": "3290:95:4"
                }
              ]
            },
            "functionSelector": "4d2ddc6c",
            "id": 4476,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "registerNewCompetition",
            "nameLocation": "2676:22:4",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 4431,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2818:8:4"
            },
            "parameters": {
              "id": 4430,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4423,
                  "mutability": "mutable",
                  "name": "competitionName",
                  "nameLocation": "2715:15:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 4476,
                  "src": "2699:31:4",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4422,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2699:6:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4425,
                  "mutability": "mutable",
                  "name": "competitionAddress",
                  "nameLocation": "2740:18:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 4476,
                  "src": "2732:26:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4424,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2732:7:4",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4427,
                  "mutability": "mutable",
                  "name": "vaultAddress",
                  "nameLocation": "2768:12:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 4476,
                  "src": "2760:20:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4426,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2760:7:4",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4429,
                  "mutability": "mutable",
                  "name": "rulesLocation",
                  "nameLocation": "2790:13:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 4476,
                  "src": "2782:21:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 4428,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2782:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2698:106:4"
            },
            "returnParameters": {
              "id": 4432,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2831:0:4"
            },
            "scope": 4809,
            "src": "2667:725:4",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              19378
            ],
            "body": {
              "id": 4519,
              "nodeType": "Block",
              "src": "3490:466:4",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 4484,
                            "name": "DEFAULT_ADMIN_ROLE",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5359,
                            "src": "3516:18:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "expression": {
                              "id": 4485,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "3536:3:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 4486,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "3536:10:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 4483,
                          "name": "hasRole",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5427,
                          "src": "3508:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
                            "typeString": "function (bytes32,address) view returns (bool)"
                          }
                        },
                        "id": 4487,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3508:39:4",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5265676973747279202d20746f67676c65436f6d7065746974696f6e4163746976653a2043616c6c657220697320756e617574686f72697a65642e",
                        "id": 4488,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3549:61:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_d00ca8fe76341269e0a8bd283b1d4f51dcb50d2dfef2d76f417c4ffff4878114",
                          "typeString": "literal_string \"Registry - toggleCompetitionActive: Caller is unauthorized.\""
                        },
                        "value": "Registry - toggleCompetitionActive: Caller is unauthorized."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_d00ca8fe76341269e0a8bd283b1d4f51dcb50d2dfef2d76f417c4ffff4878114",
                          "typeString": "literal_string \"Registry - toggleCompetitionActive: Caller is unauthorized.\""
                        }
                      ],
                      "id": 4482,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3500:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4489,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3500:111:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4490,
                  "nodeType": "ExpressionStatement",
                  "src": "3500:111:4"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 4500,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "baseExpression": {
                              "id": 4492,
                              "name": "_competition",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4253,
                              "src": "3629:12:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Comp_$4239_storage_$",
                                "typeString": "mapping(string memory => struct Registry.Comp storage ref)"
                              }
                            },
                            "id": 4494,
                            "indexExpression": {
                              "id": 4493,
                              "name": "competitionName",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4478,
                              "src": "3642:15:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_calldata_ptr",
                                "typeString": "string calldata"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "3629:29:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Comp_$4239_storage",
                              "typeString": "struct Registry.Comp storage ref"
                            }
                          },
                          "id": 4495,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "competitionAddress",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 4234,
                          "src": "3629:48:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 4498,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3689:1:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 4497,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "3681:7:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 4496,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "3681:7:4",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 4499,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3681:10:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "3629:62:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5265676973747279202d20746f67676c65436f6d7065746974696f6e4163746976653a20436f6d7065746974696f6e20646f6573206e6f742065786973742e205573652066756e6374696f6e202772656769737465724e6577436f6d7065746974696f6e2720696e73746561642e",
                        "id": 4501,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3693:112:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_de371222d1297def2bfb138e672842e17876ff1f7683a8a1a2cdd03511d4993f",
                          "typeString": "literal_string \"Registry - toggleCompetitionActive: Competition does not exist. Use function 'registerNewCompetition' instead.\""
                        },
                        "value": "Registry - toggleCompetitionActive: Competition does not exist. Use function 'registerNewCompetition' instead."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_de371222d1297def2bfb138e672842e17876ff1f7683a8a1a2cdd03511d4993f",
                          "typeString": "literal_string \"Registry - toggleCompetitionActive: Competition does not exist. Use function 'registerNewCompetition' instead.\""
                        }
                      ],
                      "id": 4491,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3621:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4502,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3621:185:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4503,
                  "nodeType": "ExpressionStatement",
                  "src": "3621:185:4"
                },
                {
                  "expression": {
                    "id": 4513,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 4504,
                          "name": "_competition",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4253,
                          "src": "3816:12:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Comp_$4239_storage_$",
                            "typeString": "mapping(string memory => struct Registry.Comp storage ref)"
                          }
                        },
                        "id": 4506,
                        "indexExpression": {
                          "id": 4505,
                          "name": "competitionName",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4478,
                          "src": "3829:15:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_calldata_ptr",
                            "typeString": "string calldata"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "3816:29:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Comp_$4239_storage",
                          "typeString": "struct Registry.Comp storage ref"
                        }
                      },
                      "id": 4507,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "active",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4232,
                      "src": "3816:36:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 4512,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "!",
                      "prefix": true,
                      "src": "3855:37:4",
                      "subExpression": {
                        "expression": {
                          "baseExpression": {
                            "id": 4508,
                            "name": "_competition",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4253,
                            "src": "3856:12:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Comp_$4239_storage_$",
                              "typeString": "mapping(string memory => struct Registry.Comp storage ref)"
                            }
                          },
                          "id": 4510,
                          "indexExpression": {
                            "id": 4509,
                            "name": "competitionName",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4478,
                            "src": "3869:15:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_calldata_ptr",
                              "typeString": "string calldata"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3856:29:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Comp_$4239_storage",
                            "typeString": "struct Registry.Comp storage ref"
                          }
                        },
                        "id": 4511,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "active",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 4232,
                        "src": "3856:36:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "3816:76:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4514,
                  "nodeType": "ExpressionStatement",
                  "src": "3816:76:4"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 4516,
                        "name": "competitionName",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4478,
                        "src": "3933:15:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        }
                      ],
                      "id": 4515,
                      "name": "CompetitionActiveToggled",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19432,
                      "src": "3908:24:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory)"
                      }
                    },
                    "id": 4517,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3908:41:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4518,
                  "nodeType": "EmitStatement",
                  "src": "3903:46:4"
                }
              ]
            },
            "functionSelector": "06bbb7f6",
            "id": 4520,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "toggleCompetitionActive",
            "nameLocation": "3407:23:4",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 4480,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3477:8:4"
            },
            "parameters": {
              "id": 4479,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4478,
                  "mutability": "mutable",
                  "name": "competitionName",
                  "nameLocation": "3447:15:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 4520,
                  "src": "3431:31:4",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4477,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3431:6:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3430:33:4"
            },
            "returnParameters": {
              "id": 4481,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3490:0:4"
            },
            "scope": 4809,
            "src": "3398:558:4",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              19385
            ],
            "body": {
              "id": 4572,
              "nodeType": "Block",
              "src": "4078:582:4",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 4530,
                            "name": "DEFAULT_ADMIN_ROLE",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5359,
                            "src": "4104:18:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "expression": {
                              "id": 4531,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "4124:3:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 4532,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "4124:10:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 4529,
                          "name": "hasRole",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5427,
                          "src": "4096:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
                            "typeString": "function (bytes32,address) view returns (bool)"
                          }
                        },
                        "id": 4533,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4096:39:4",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5265676973747279202d206368616e6765436f6d7065746974696f6e5661756c743a2043616c6c657220697320756e617574686f72697a65642e",
                        "id": 4534,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4137:60:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_29311ca2be2f2eeddda96d55ee7de1cf8f80401f50bb7eccd144c4c0c99079a7",
                          "typeString": "literal_string \"Registry - changeCompetitionVault: Caller is unauthorized.\""
                        },
                        "value": "Registry - changeCompetitionVault: Caller is unauthorized."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_29311ca2be2f2eeddda96d55ee7de1cf8f80401f50bb7eccd144c4c0c99079a7",
                          "typeString": "literal_string \"Registry - changeCompetitionVault: Caller is unauthorized.\""
                        }
                      ],
                      "id": 4528,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4088:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4535,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4088:110:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4536,
                  "nodeType": "ExpressionStatement",
                  "src": "4088:110:4"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 4546,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "baseExpression": {
                              "id": 4538,
                              "name": "_competition",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4253,
                              "src": "4216:12:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Comp_$4239_storage_$",
                                "typeString": "mapping(string memory => struct Registry.Comp storage ref)"
                              }
                            },
                            "id": 4540,
                            "indexExpression": {
                              "id": 4539,
                              "name": "competitionName",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4522,
                              "src": "4229:15:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_calldata_ptr",
                                "typeString": "string calldata"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "4216:29:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Comp_$4239_storage",
                              "typeString": "struct Registry.Comp storage ref"
                            }
                          },
                          "id": 4541,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "competitionAddress",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 4234,
                          "src": "4216:48:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 4544,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4276:1:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 4543,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "4268:7:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 4542,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "4268:7:4",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 4545,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4268:10:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "4216:62:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5265676973747279202d206368616e6765436f6d7065746974696f6e5661756c743a20436f6d7065746974696f6e20646f6573206e6f742065786973742e205573652066756e6374696f6e202772656769737465724e6577436f6d7065746974696f6e2720696e73746561642e",
                        "id": 4547,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4280:111:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_a1e7e6ee179a4f9273532aa22972ce6b23e8c7cd6aec92b438526d939390f23e",
                          "typeString": "literal_string \"Registry - changeCompetitionVault: Competition does not exist. Use function 'registerNewCompetition' instead.\""
                        },
                        "value": "Registry - changeCompetitionVault: Competition does not exist. Use function 'registerNewCompetition' instead."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_a1e7e6ee179a4f9273532aa22972ce6b23e8c7cd6aec92b438526d939390f23e",
                          "typeString": "literal_string \"Registry - changeCompetitionVault: Competition does not exist. Use function 'registerNewCompetition' instead.\""
                        }
                      ],
                      "id": 4537,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4208:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4548,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4208:184:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4549,
                  "nodeType": "ExpressionStatement",
                  "src": "4208:184:4"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 4556,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 4551,
                          "name": "newVaultAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4524,
                          "src": "4410:15:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 4554,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4437:1:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 4553,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "4429:7:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 4552,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "4429:7:4",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 4555,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4429:10:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "4410:29:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5265676973747279202d206368616e6765436f6d7065746974696f6e5661756c743a2043616e6e6f742073657420746f203020616464726573732e",
                        "id": 4557,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4441:61:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_de2a3e246b2d97a46afe3db94c2955689bd21e07389d4237dc4a92b994ad24c8",
                          "typeString": "literal_string \"Registry - changeCompetitionVault: Cannot set to 0 address.\""
                        },
                        "value": "Registry - changeCompetitionVault: Cannot set to 0 address."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_de2a3e246b2d97a46afe3db94c2955689bd21e07389d4237dc4a92b994ad24c8",
                          "typeString": "literal_string \"Registry - changeCompetitionVault: Cannot set to 0 address.\""
                        }
                      ],
                      "id": 4550,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4402:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4558,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4402:101:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4559,
                  "nodeType": "ExpressionStatement",
                  "src": "4402:101:4"
                },
                {
                  "expression": {
                    "id": 4565,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 4560,
                          "name": "_competition",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4253,
                          "src": "4513:12:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Comp_$4239_storage_$",
                            "typeString": "mapping(string memory => struct Registry.Comp storage ref)"
                          }
                        },
                        "id": 4562,
                        "indexExpression": {
                          "id": 4561,
                          "name": "competitionName",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4522,
                          "src": "4526:15:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_calldata_ptr",
                            "typeString": "string calldata"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "4513:29:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Comp_$4239_storage",
                          "typeString": "struct Registry.Comp storage ref"
                        }
                      },
                      "id": 4563,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "vaultAddress",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4236,
                      "src": "4513:42:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 4564,
                      "name": "newVaultAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4524,
                      "src": "4558:15:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4513:60:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 4566,
                  "nodeType": "ExpressionStatement",
                  "src": "4513:60:4"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 4568,
                        "name": "competitionName",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4522,
                        "src": "4620:15:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        }
                      },
                      {
                        "id": 4569,
                        "name": "newVaultAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4524,
                        "src": "4637:15:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 4567,
                      "name": "CompetitionVaultAddressChanged",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19438,
                      "src": "4589:30:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_string_memory_ptr_$_t_address_$returns$__$",
                        "typeString": "function (string memory,address)"
                      }
                    },
                    "id": 4570,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4589:64:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4571,
                  "nodeType": "EmitStatement",
                  "src": "4584:69:4"
                }
              ]
            },
            "functionSelector": "a59e9947",
            "id": 4573,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "changeCompetitionVault",
            "nameLocation": "3971:22:4",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 4526,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4065:8:4"
            },
            "parameters": {
              "id": 4525,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4522,
                  "mutability": "mutable",
                  "name": "competitionName",
                  "nameLocation": "4010:15:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 4573,
                  "src": "3994:31:4",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4521,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3994:6:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4524,
                  "mutability": "mutable",
                  "name": "newVaultAddress",
                  "nameLocation": "4035:15:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 4573,
                  "src": "4027:23:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4523,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4027:7:4",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3993:58:4"
            },
            "returnParameters": {
              "id": 4527,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4078:0:4"
            },
            "scope": 4809,
            "src": "3962:698:4",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              19392
            ],
            "body": {
              "id": 4625,
              "nodeType": "Block",
              "src": "4786:596:4",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 4583,
                            "name": "DEFAULT_ADMIN_ROLE",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5359,
                            "src": "4812:18:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "expression": {
                              "id": 4584,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "4832:3:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 4585,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "4832:10:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 4582,
                          "name": "hasRole",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5427,
                          "src": "4804:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
                            "typeString": "function (bytes32,address) view returns (bool)"
                          }
                        },
                        "id": 4586,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4804:39:4",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5265676973747279202d206368616e6765436f6d7065746974696f6e52756c65734c6f636174696f6e3a2043616c6c657220697320756e617574686f72697a65642e",
                        "id": 4587,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4845:68:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_dfb51c6e1e649c4e567a5f2c46b2e673d6455bc53cbfa456800fffb814b52d4f",
                          "typeString": "literal_string \"Registry - changeCompetitionRulesLocation: Caller is unauthorized.\""
                        },
                        "value": "Registry - changeCompetitionRulesLocation: Caller is unauthorized."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_dfb51c6e1e649c4e567a5f2c46b2e673d6455bc53cbfa456800fffb814b52d4f",
                          "typeString": "literal_string \"Registry - changeCompetitionRulesLocation: Caller is unauthorized.\""
                        }
                      ],
                      "id": 4581,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4796:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4588,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4796:118:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4589,
                  "nodeType": "ExpressionStatement",
                  "src": "4796:118:4"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 4599,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "baseExpression": {
                              "id": 4591,
                              "name": "_competition",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4253,
                              "src": "4932:12:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Comp_$4239_storage_$",
                                "typeString": "mapping(string memory => struct Registry.Comp storage ref)"
                              }
                            },
                            "id": 4593,
                            "indexExpression": {
                              "id": 4592,
                              "name": "competitionName",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4575,
                              "src": "4945:15:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_calldata_ptr",
                                "typeString": "string calldata"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "4932:29:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Comp_$4239_storage",
                              "typeString": "struct Registry.Comp storage ref"
                            }
                          },
                          "id": 4594,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "competitionAddress",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 4234,
                          "src": "4932:48:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 4597,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4992:1:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 4596,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "4984:7:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 4595,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "4984:7:4",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 4598,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4984:10:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "4932:62:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5265676973747279202d206368616e6765436f6d7065746974696f6e52756c65734c6f636174696f6e3a20436f6d7065746974696f6e20646f6573206e6f742065786973742e205573652066756e6374696f6e202772656769737465724e6577436f6d7065746974696f6e2720696e73746561642e",
                        "id": 4600,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4996:119:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_fdfc6ccba0fd85fdf9f1bd56fc67f3ce884457cc092976df41c59a171809c555",
                          "typeString": "literal_string \"Registry - changeCompetitionRulesLocation: Competition does not exist. Use function 'registerNewCompetition' instead.\""
                        },
                        "value": "Registry - changeCompetitionRulesLocation: Competition does not exist. Use function 'registerNewCompetition' instead."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_fdfc6ccba0fd85fdf9f1bd56fc67f3ce884457cc092976df41c59a171809c555",
                          "typeString": "literal_string \"Registry - changeCompetitionRulesLocation: Competition does not exist. Use function 'registerNewCompetition' instead.\""
                        }
                      ],
                      "id": 4590,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4924:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4601,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4924:192:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4602,
                  "nodeType": "ExpressionStatement",
                  "src": "4924:192:4"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "id": 4609,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 4604,
                          "name": "newLocation",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4577,
                          "src": "5134:11:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 4607,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5157:1:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 4606,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "5149:7:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_bytes32_$",
                              "typeString": "type(bytes32)"
                            },
                            "typeName": {
                              "id": 4605,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "5149:7:4",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 4608,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5149:10:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "src": "5134:25:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5265676973747279202d206368616e6765436f6d7065746974696f6e52756c65734c6f636174696f6e3a2043616e6e6f742073657420746f203020616464726573732e",
                        "id": 4610,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5161:69:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_70547884221783ae67e850b88c69356cce41717a35a1f9901e87b2e562ffa6fe",
                          "typeString": "literal_string \"Registry - changeCompetitionRulesLocation: Cannot set to 0 address.\""
                        },
                        "value": "Registry - changeCompetitionRulesLocation: Cannot set to 0 address."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_70547884221783ae67e850b88c69356cce41717a35a1f9901e87b2e562ffa6fe",
                          "typeString": "literal_string \"Registry - changeCompetitionRulesLocation: Cannot set to 0 address.\""
                        }
                      ],
                      "id": 4603,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5126:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4611,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5126:105:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4612,
                  "nodeType": "ExpressionStatement",
                  "src": "5126:105:4"
                },
                {
                  "expression": {
                    "id": 4618,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 4613,
                          "name": "_competition",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4253,
                          "src": "5241:12:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Comp_$4239_storage_$",
                            "typeString": "mapping(string memory => struct Registry.Comp storage ref)"
                          }
                        },
                        "id": 4615,
                        "indexExpression": {
                          "id": 4614,
                          "name": "competitionName",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4575,
                          "src": "5254:15:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_calldata_ptr",
                            "typeString": "string calldata"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "5241:29:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Comp_$4239_storage",
                          "typeString": "struct Registry.Comp storage ref"
                        }
                      },
                      "id": 4616,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "rulesLocation",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4238,
                      "src": "5241:43:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 4617,
                      "name": "newLocation",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4577,
                      "src": "5287:11:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "5241:57:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 4619,
                  "nodeType": "ExpressionStatement",
                  "src": "5241:57:4"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 4621,
                        "name": "competitionName",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4575,
                        "src": "5346:15:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        }
                      },
                      {
                        "id": 4622,
                        "name": "newLocation",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4577,
                        "src": "5363:11:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 4620,
                      "name": "CompetitionRulesLocationChanged",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19444,
                      "src": "5314:31:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_string_memory_ptr_$_t_bytes32_$returns$__$",
                        "typeString": "function (string memory,bytes32)"
                      }
                    },
                    "id": 4623,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5314:61:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4624,
                  "nodeType": "EmitStatement",
                  "src": "5309:66:4"
                }
              ]
            },
            "functionSelector": "ff280a16",
            "id": 4626,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "changeCompetitionRulesLocation",
            "nameLocation": "4675:30:4",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 4579,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4773:8:4"
            },
            "parameters": {
              "id": 4578,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4575,
                  "mutability": "mutable",
                  "name": "competitionName",
                  "nameLocation": "4722:15:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 4626,
                  "src": "4706:31:4",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4574,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "4706:6:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4577,
                  "mutability": "mutable",
                  "name": "newLocation",
                  "nameLocation": "4747:11:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 4626,
                  "src": "4739:19:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 4576,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4739:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4705:54:4"
            },
            "returnParameters": {
              "id": 4580,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4786:0:4"
            },
            "scope": 4809,
            "src": "4666:716:4",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              19397
            ],
            "body": {
              "id": 4659,
              "nodeType": "Block",
              "src": "5462:301:4",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 4634,
                            "name": "DEFAULT_ADMIN_ROLE",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5359,
                            "src": "5488:18:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "expression": {
                              "id": 4635,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "5508:3:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 4636,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "5508:10:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 4633,
                          "name": "hasRole",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5427,
                          "src": "5480:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
                            "typeString": "function (bytes32,address) view returns (bool)"
                          }
                        },
                        "id": 4637,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5480:39:4",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5265676973747279202d206368616e6765546f6b656e416464726573733a2043616c6c657220697320756e617574686f72697a65642e",
                        "id": 4638,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5521:56:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3edcfc99fd974089f6c2dd78f12e79edc38df62cbb2feebb7a33a331c9d74d19",
                          "typeString": "literal_string \"Registry - changeTokenAddress: Caller is unauthorized.\""
                        },
                        "value": "Registry - changeTokenAddress: Caller is unauthorized."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3edcfc99fd974089f6c2dd78f12e79edc38df62cbb2feebb7a33a331c9d74d19",
                          "typeString": "literal_string \"Registry - changeTokenAddress: Caller is unauthorized.\""
                        }
                      ],
                      "id": 4632,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5472:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4639,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5472:106:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4640,
                  "nodeType": "ExpressionStatement",
                  "src": "5472:106:4"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 4647,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 4642,
                          "name": "newAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4628,
                          "src": "5596:10:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 4645,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5618:1:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 4644,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "5610:7:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 4643,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "5610:7:4",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 4646,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5610:10:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "5596:24:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5265676973747279202d206368616e6765546f6b656e416464726573733a2043616e6e6f742073657420746f203020616464726573732e",
                        "id": 4648,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5622:57:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f1b4792d009341355ece03d883e4b3dfa330e36310208b8ab38a2f18d9977d45",
                          "typeString": "literal_string \"Registry - changeTokenAddress: Cannot set to 0 address.\""
                        },
                        "value": "Registry - changeTokenAddress: Cannot set to 0 address."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f1b4792d009341355ece03d883e4b3dfa330e36310208b8ab38a2f18d9977d45",
                          "typeString": "literal_string \"Registry - changeTokenAddress: Cannot set to 0 address.\""
                        }
                      ],
                      "id": 4641,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5588:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4649,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5588:92:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4650,
                  "nodeType": "ExpressionStatement",
                  "src": "5588:92:4"
                },
                {
                  "expression": {
                    "id": 4653,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4651,
                      "name": "_token",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4248,
                      "src": "5690:6:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 4652,
                      "name": "newAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4628,
                      "src": "5699:10:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "5690:19:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 4654,
                  "nodeType": "ExpressionStatement",
                  "src": "5690:19:4"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 4656,
                        "name": "newAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4628,
                        "src": "5745:10:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 4655,
                      "name": "TokenAddressChanged",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19448,
                      "src": "5725:19:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 4657,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5725:31:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4658,
                  "nodeType": "EmitStatement",
                  "src": "5720:36:4"
                }
              ]
            },
            "functionSelector": "c9cda91f",
            "id": 4660,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "changeTokenAddress",
            "nameLocation": "5397:18:4",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 4630,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5449:8:4"
            },
            "parameters": {
              "id": 4629,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4628,
                  "mutability": "mutable",
                  "name": "newAddress",
                  "nameLocation": "5424:10:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 4660,
                  "src": "5416:18:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4627,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5416:7:4",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5415:20:4"
            },
            "returnParameters": {
              "id": 4631,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5462:0:4"
            },
            "scope": 4809,
            "src": "5388:375:4",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              19406
            ],
            "body": {
              "id": 4710,
              "nodeType": "Block",
              "src": "5910:508:4",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 4672,
                            "name": "DEFAULT_ADMIN_ROLE",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5359,
                            "src": "5936:18:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "expression": {
                              "id": 4673,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "5956:3:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 4674,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "5956:10:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 4671,
                          "name": "hasRole",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5427,
                          "src": "5928:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
                            "typeString": "function (bytes32,address) view returns (bool)"
                          }
                        },
                        "id": 4675,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5928:39:4",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5265676973747279202d2072656769737465724e6577457874656e73696f6e3a2043616c6c657220697320756e617574686f72697a65642e",
                        "id": 4676,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5969:58:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_6f5751de29f5df8014fed50350c2382aa68be28e5f24fbfdf23daafe108cc544",
                          "typeString": "literal_string \"Registry - registerNewExtension: Caller is unauthorized.\""
                        },
                        "value": "Registry - registerNewExtension: Caller is unauthorized."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_6f5751de29f5df8014fed50350c2382aa68be28e5f24fbfdf23daafe108cc544",
                          "typeString": "literal_string \"Registry - registerNewExtension: Caller is unauthorized.\""
                        }
                      ],
                      "id": 4670,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5920:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4677,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5920:108:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4678,
                  "nodeType": "ExpressionStatement",
                  "src": "5920:108:4"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4684,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "6046:33:4",
                        "subExpression": {
                          "expression": {
                            "baseExpression": {
                              "id": 4680,
                              "name": "_extension",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4258,
                              "src": "6047:10:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Ext_$4246_storage_$",
                                "typeString": "mapping(string memory => struct Registry.Ext storage ref)"
                              }
                            },
                            "id": 4682,
                            "indexExpression": {
                              "id": 4681,
                              "name": "extensionName",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4662,
                              "src": "6058:13:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_calldata_ptr",
                                "typeString": "string calldata"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "6047:25:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Ext_$4246_storage",
                              "typeString": "struct Registry.Ext storage ref"
                            }
                          },
                          "id": 4683,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "active",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 4241,
                          "src": "6047:32:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5265676973747279202d2072656769737465724e6577457874656e73696f6e3a20457874656e73696f6e20616c7265616479206578697374732e",
                        "id": 4685,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6081:60:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_9efa177c71ff8f0b339b9f10834754f26bdfa91f3cf41597983c08d6ee8088a5",
                          "typeString": "literal_string \"Registry - registerNewExtension: Extension already exists.\""
                        },
                        "value": "Registry - registerNewExtension: Extension already exists."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_9efa177c71ff8f0b339b9f10834754f26bdfa91f3cf41597983c08d6ee8088a5",
                          "typeString": "literal_string \"Registry - registerNewExtension: Extension already exists.\""
                        }
                      ],
                      "id": 4679,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6038:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4686,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6038:104:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4687,
                  "nodeType": "ExpressionStatement",
                  "src": "6038:104:4"
                },
                {
                  "expression": {
                    "id": 4696,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 4688,
                        "name": "_extension",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4258,
                        "src": "6152:10:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Ext_$4246_storage_$",
                          "typeString": "mapping(string memory => struct Registry.Ext storage ref)"
                        }
                      },
                      "id": 4690,
                      "indexExpression": {
                        "id": 4689,
                        "name": "extensionName",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4662,
                        "src": "6163:13:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "6152:25:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Ext_$4246_storage",
                        "typeString": "struct Registry.Ext storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "hexValue": "74727565",
                          "id": 4692,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6192:4:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        {
                          "id": 4693,
                          "name": "extensionAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4664,
                          "src": "6215:16:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "id": 4694,
                          "name": "informationLocation",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4666,
                          "src": "6253:19:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        ],
                        "id": 4691,
                        "name": "Ext",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4246,
                        "src": "6180:3:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_Ext_$4246_storage_ptr_$",
                          "typeString": "type(struct Registry.Ext storage pointer)"
                        }
                      },
                      "id": 4695,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "names": [
                        "active",
                        "extensionAddress",
                        "informationLocation"
                      ],
                      "nodeType": "FunctionCall",
                      "src": "6180:94:4",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Ext_$4246_memory_ptr",
                        "typeString": "struct Registry.Ext memory"
                      }
                    },
                    "src": "6152:122:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Ext_$4246_storage",
                      "typeString": "struct Registry.Ext storage ref"
                    }
                  },
                  "id": 4697,
                  "nodeType": "ExpressionStatement",
                  "src": "6152:122:4"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4701,
                        "name": "extensionName",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4662,
                        "src": "6305:13:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        }
                      ],
                      "expression": {
                        "id": 4698,
                        "name": "_extensionNames",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4264,
                        "src": "6284:15:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_string_storage_$dyn_storage",
                          "typeString": "string storage ref[] storage ref"
                        }
                      },
                      "id": 4700,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "push",
                      "nodeType": "MemberAccess",
                      "src": "6284:20:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_string_storage_$dyn_storage_ptr_$_t_string_storage_$returns$__$bound_to$_t_array$_t_string_storage_$dyn_storage_ptr_$",
                        "typeString": "function (string storage ref[] storage pointer,string storage ref)"
                      }
                    },
                    "id": 4702,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6284:35:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4703,
                  "nodeType": "ExpressionStatement",
                  "src": "6284:35:4"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 4705,
                        "name": "extensionName",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4662,
                        "src": "6358:13:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        }
                      },
                      {
                        "id": 4706,
                        "name": "extensionAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4664,
                        "src": "6373:16:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4707,
                        "name": "informationLocation",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4666,
                        "src": "6391:19:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 4704,
                      "name": "NewExtensionRegistered",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19456,
                      "src": "6335:22:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_string_memory_ptr_$_t_address_$_t_bytes32_$returns$__$",
                        "typeString": "function (string memory,address,bytes32)"
                      }
                    },
                    "id": 4708,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6335:76:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4709,
                  "nodeType": "EmitStatement",
                  "src": "6330:81:4"
                }
              ]
            },
            "functionSelector": "35f2d3c6",
            "id": 4711,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "registerNewExtension",
            "nameLocation": "5778:20:4",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 4668,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5897:8:4"
            },
            "parameters": {
              "id": 4667,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4662,
                  "mutability": "mutable",
                  "name": "extensionName",
                  "nameLocation": "5815:13:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 4711,
                  "src": "5799:29:4",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4661,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "5799:6:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4664,
                  "mutability": "mutable",
                  "name": "extensionAddress",
                  "nameLocation": "5837:16:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 4711,
                  "src": "5829:24:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4663,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5829:7:4",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4666,
                  "mutability": "mutable",
                  "name": "informationLocation",
                  "nameLocation": "5863:19:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 4711,
                  "src": "5855:27:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 4665,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5855:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5798:85:4"
            },
            "returnParameters": {
              "id": 4669,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5910:0:4"
            },
            "scope": 4809,
            "src": "5769:649:4",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              19411
            ],
            "body": {
              "id": 4754,
              "nodeType": "Block",
              "src": "6516:440:4",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 4719,
                            "name": "DEFAULT_ADMIN_ROLE",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5359,
                            "src": "6542:18:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "expression": {
                              "id": 4720,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "6562:3:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 4721,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "6562:10:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 4718,
                          "name": "hasRole",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5427,
                          "src": "6534:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
                            "typeString": "function (bytes32,address) view returns (bool)"
                          }
                        },
                        "id": 4722,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6534:39:4",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5265676973747279202d20746f67676c65457874656e73696f6e4163746976653a2043616c6c657220697320756e617574686f72697a65642e",
                        "id": 4723,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6575:59:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ba61e1373e7339fe9dc71cc54c466dc74a730a6d2727a50b4b05557a6c04eb12",
                          "typeString": "literal_string \"Registry - toggleExtensionActive: Caller is unauthorized.\""
                        },
                        "value": "Registry - toggleExtensionActive: Caller is unauthorized."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ba61e1373e7339fe9dc71cc54c466dc74a730a6d2727a50b4b05557a6c04eb12",
                          "typeString": "literal_string \"Registry - toggleExtensionActive: Caller is unauthorized.\""
                        }
                      ],
                      "id": 4717,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6526:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4724,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6526:109:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4725,
                  "nodeType": "ExpressionStatement",
                  "src": "6526:109:4"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 4735,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "baseExpression": {
                              "id": 4727,
                              "name": "_extension",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4258,
                              "src": "6653:10:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Ext_$4246_storage_$",
                                "typeString": "mapping(string memory => struct Registry.Ext storage ref)"
                              }
                            },
                            "id": 4729,
                            "indexExpression": {
                              "id": 4728,
                              "name": "extensionName",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4713,
                              "src": "6664:13:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_calldata_ptr",
                                "typeString": "string calldata"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "6653:25:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Ext_$4246_storage",
                              "typeString": "struct Registry.Ext storage ref"
                            }
                          },
                          "id": 4730,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "extensionAddress",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 4243,
                          "src": "6653:42:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 4733,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "6707:1:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 4732,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "6699:7:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 4731,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "6699:7:4",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 4734,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6699:10:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "6653:56:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5265676973747279202d20746f67676c65457874656e73696f6e4163746976653a20457874656e73696f6e20646f6573206e6f742065786973742e205573652066756e6374696f6e202772656769737465724e6577457874656e73696f6e2720696e73746561642e",
                        "id": 4736,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6711:106:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_0c4d74816cdf1df461c532fe5350c59662bb012156687e313962cd71f07d598d",
                          "typeString": "literal_string \"Registry - toggleExtensionActive: Extension does not exist. Use function 'registerNewExtension' instead.\""
                        },
                        "value": "Registry - toggleExtensionActive: Extension does not exist. Use function 'registerNewExtension' instead."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_0c4d74816cdf1df461c532fe5350c59662bb012156687e313962cd71f07d598d",
                          "typeString": "literal_string \"Registry - toggleExtensionActive: Extension does not exist. Use function 'registerNewExtension' instead.\""
                        }
                      ],
                      "id": 4726,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6645:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4737,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6645:173:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4738,
                  "nodeType": "ExpressionStatement",
                  "src": "6645:173:4"
                },
                {
                  "expression": {
                    "id": 4748,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 4739,
                          "name": "_extension",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4258,
                          "src": "6828:10:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Ext_$4246_storage_$",
                            "typeString": "mapping(string memory => struct Registry.Ext storage ref)"
                          }
                        },
                        "id": 4741,
                        "indexExpression": {
                          "id": 4740,
                          "name": "extensionName",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4713,
                          "src": "6839:13:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_calldata_ptr",
                            "typeString": "string calldata"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "6828:25:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Ext_$4246_storage",
                          "typeString": "struct Registry.Ext storage ref"
                        }
                      },
                      "id": 4742,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "active",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4241,
                      "src": "6828:32:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 4747,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "!",
                      "prefix": true,
                      "src": "6863:33:4",
                      "subExpression": {
                        "expression": {
                          "baseExpression": {
                            "id": 4743,
                            "name": "_extension",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4258,
                            "src": "6864:10:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Ext_$4246_storage_$",
                              "typeString": "mapping(string memory => struct Registry.Ext storage ref)"
                            }
                          },
                          "id": 4745,
                          "indexExpression": {
                            "id": 4744,
                            "name": "extensionName",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4713,
                            "src": "6875:13:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_calldata_ptr",
                              "typeString": "string calldata"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "6864:25:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Ext_$4246_storage",
                            "typeString": "struct Registry.Ext storage ref"
                          }
                        },
                        "id": 4746,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "active",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 4241,
                        "src": "6864:32:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "6828:68:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4749,
                  "nodeType": "ExpressionStatement",
                  "src": "6828:68:4"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 4751,
                        "name": "extensionName",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4713,
                        "src": "6935:13:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        }
                      ],
                      "id": 4750,
                      "name": "ExtensionActiveToggled",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19460,
                      "src": "6912:22:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory)"
                      }
                    },
                    "id": 4752,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6912:37:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4753,
                  "nodeType": "EmitStatement",
                  "src": "6907:42:4"
                }
              ]
            },
            "functionSelector": "41d7238e",
            "id": 4755,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "toggleExtensionActive",
            "nameLocation": "6437:21:4",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 4715,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "6503:8:4"
            },
            "parameters": {
              "id": 4714,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4713,
                  "mutability": "mutable",
                  "name": "extensionName",
                  "nameLocation": "6475:13:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 4755,
                  "src": "6459:29:4",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4712,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "6459:6:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6458:31:4"
            },
            "returnParameters": {
              "id": 4716,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6516:0:4"
            },
            "scope": 4809,
            "src": "6428:528:4",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              19418
            ],
            "body": {
              "id": 4807,
              "nodeType": "Block",
              "src": "7081:578:4",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 4765,
                            "name": "DEFAULT_ADMIN_ROLE",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5359,
                            "src": "7107:18:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "expression": {
                              "id": 4766,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "7127:3:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 4767,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "7127:10:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 4764,
                          "name": "hasRole",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5427,
                          "src": "7099:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
                            "typeString": "function (bytes32,address) view returns (bool)"
                          }
                        },
                        "id": 4768,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7099:39:4",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5265676973747279202d206368616e6765457874656e73696f6e496e666f4c6f636174696f6e3a2043616c6c657220697320756e617574686f72697a65642e",
                        "id": 4769,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7140:65:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c61f79053cd7a15c7e512e9fd430b6ef812c8a4b8a40841b926708204210c129",
                          "typeString": "literal_string \"Registry - changeExtensionInfoLocation: Caller is unauthorized.\""
                        },
                        "value": "Registry - changeExtensionInfoLocation: Caller is unauthorized."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c61f79053cd7a15c7e512e9fd430b6ef812c8a4b8a40841b926708204210c129",
                          "typeString": "literal_string \"Registry - changeExtensionInfoLocation: Caller is unauthorized.\""
                        }
                      ],
                      "id": 4763,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7091:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4770,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7091:115:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4771,
                  "nodeType": "ExpressionStatement",
                  "src": "7091:115:4"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 4781,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "baseExpression": {
                              "id": 4773,
                              "name": "_extension",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4258,
                              "src": "7224:10:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Ext_$4246_storage_$",
                                "typeString": "mapping(string memory => struct Registry.Ext storage ref)"
                              }
                            },
                            "id": 4775,
                            "indexExpression": {
                              "id": 4774,
                              "name": "extensionName",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4757,
                              "src": "7235:13:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_calldata_ptr",
                                "typeString": "string calldata"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "7224:25:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Ext_$4246_storage",
                              "typeString": "struct Registry.Ext storage ref"
                            }
                          },
                          "id": 4776,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "extensionAddress",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 4243,
                          "src": "7224:42:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 4779,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7278:1:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 4778,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "7270:7:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 4777,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "7270:7:4",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 4780,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7270:10:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "7224:56:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5265676973747279202d206368616e6765457874656e73696f6e496e666f4c6f636174696f6e3a20436f6d7065746974696f6e20646f6573206e6f742065786973742e205573652066756e6374696f6e202772656769737465724e6577436f6d7065746974696f6e2720696e73746561642e",
                        "id": 4782,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7282:116:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_149718046ca08d2db441ef75608667e338bdcaf071e386015f4638d85af99a7a",
                          "typeString": "literal_string \"Registry - changeExtensionInfoLocation: Competition does not exist. Use function 'registerNewCompetition' instead.\""
                        },
                        "value": "Registry - changeExtensionInfoLocation: Competition does not exist. Use function 'registerNewCompetition' instead."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_149718046ca08d2db441ef75608667e338bdcaf071e386015f4638d85af99a7a",
                          "typeString": "literal_string \"Registry - changeExtensionInfoLocation: Competition does not exist. Use function 'registerNewCompetition' instead.\""
                        }
                      ],
                      "id": 4772,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7216:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4783,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7216:183:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4784,
                  "nodeType": "ExpressionStatement",
                  "src": "7216:183:4"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "id": 4791,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 4786,
                          "name": "newLocation",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4759,
                          "src": "7417:11:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 4789,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7440:1:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 4788,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "7432:7:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_bytes32_$",
                              "typeString": "type(bytes32)"
                            },
                            "typeName": {
                              "id": 4787,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "7432:7:4",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 4790,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7432:10:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "src": "7417:25:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5265676973747279202d206368616e6765457874656e73696f6e496e666f4c6f636174696f6e3a2043616e6e6f742073657420746f203020616464726573732e",
                        "id": 4792,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7444:66:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_053098f405a4eafef6f4c816cd6c1a3bd462a4e4da97939cbc178e3d131ebde9",
                          "typeString": "literal_string \"Registry - changeExtensionInfoLocation: Cannot set to 0 address.\""
                        },
                        "value": "Registry - changeExtensionInfoLocation: Cannot set to 0 address."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_053098f405a4eafef6f4c816cd6c1a3bd462a4e4da97939cbc178e3d131ebde9",
                          "typeString": "literal_string \"Registry - changeExtensionInfoLocation: Cannot set to 0 address.\""
                        }
                      ],
                      "id": 4785,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7409:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4793,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7409:102:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4794,
                  "nodeType": "ExpressionStatement",
                  "src": "7409:102:4"
                },
                {
                  "expression": {
                    "id": 4800,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 4795,
                          "name": "_extension",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4258,
                          "src": "7521:10:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Ext_$4246_storage_$",
                            "typeString": "mapping(string memory => struct Registry.Ext storage ref)"
                          }
                        },
                        "id": 4797,
                        "indexExpression": {
                          "id": 4796,
                          "name": "extensionName",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4757,
                          "src": "7532:13:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_calldata_ptr",
                            "typeString": "string calldata"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "7521:25:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Ext_$4246_storage",
                          "typeString": "struct Registry.Ext storage ref"
                        }
                      },
                      "id": 4798,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "informationLocation",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4245,
                      "src": "7521:45:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 4799,
                      "name": "newLocation",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4759,
                      "src": "7569:11:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "7521:59:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 4801,
                  "nodeType": "ExpressionStatement",
                  "src": "7521:59:4"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 4803,
                        "name": "extensionName",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4757,
                        "src": "7625:13:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        }
                      },
                      {
                        "id": 4804,
                        "name": "newLocation",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4759,
                        "src": "7640:11:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 4802,
                      "name": "ExtensionInfoLocationChanged",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19466,
                      "src": "7596:28:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_string_memory_ptr_$_t_bytes32_$returns$__$",
                        "typeString": "function (string memory,bytes32)"
                      }
                    },
                    "id": 4805,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7596:56:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4806,
                  "nodeType": "EmitStatement",
                  "src": "7591:61:4"
                }
              ]
            },
            "functionSelector": "e4bf72cc",
            "id": 4808,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "changeExtensionInfoLocation",
            "nameLocation": "6975:27:4",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 4761,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "7068:8:4"
            },
            "parameters": {
              "id": 4760,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4757,
                  "mutability": "mutable",
                  "name": "extensionName",
                  "nameLocation": "7019:13:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 4808,
                  "src": "7003:29:4",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4756,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "7003:6:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4759,
                  "mutability": "mutable",
                  "name": "newLocation",
                  "nameLocation": "7042:11:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 4808,
                  "src": "7034:19:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 4758,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "7034:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7002:52:4"
            },
            "returnParameters": {
              "id": 4762,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7081:0:4"
            },
            "scope": 4809,
            "src": "6966:693:4",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 4810,
        "src": "145:7526:4",
        "usedErrors": []
      }
    ],
    "src": "0:7677:4"
  },
  "bytecode": "",
  "bytecodeSha1": "5072787be126368811dd0508f93e04a3c81c8c6e",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.4+commit.c7e474f2"
  },
  "contractName": "Registry",
  "coverageMap": {
    "branches": {
      "4": {
        "Registry.changeCompetitionRulesLocation": {
          "63": [
            4804,
            4843,
            true
          ],
          "64": [
            4932,
            4994,
            true
          ],
          "65": [
            5134,
            5159,
            true
          ]
        },
        "Registry.changeCompetitionVault": {
          "55": [
            4096,
            4135,
            true
          ],
          "56": [
            4216,
            4278,
            true
          ],
          "57": [
            4410,
            4439,
            true
          ]
        },
        "Registry.changeExtensionInfoLocation": {
          "60": [
            7099,
            7138,
            true
          ],
          "61": [
            7224,
            7280,
            true
          ],
          "62": [
            7417,
            7442,
            true
          ]
        },
        "Registry.changeTokenAddress": {
          "58": [
            5480,
            5519,
            true
          ],
          "59": [
            5596,
            5620,
            true
          ]
        },
        "Registry.registerNewCompetition": {
          "53": [
            2849,
            2888,
            true
          ],
          "54": [
            2969,
            3006,
            true
          ]
        },
        "Registry.registerNewExtension": {
          "49": [
            5928,
            5967,
            true
          ],
          "50": [
            6046,
            6079,
            true
          ]
        },
        "Registry.toggleCompetitionActive": {
          "47": [
            3508,
            3547,
            true
          ],
          "48": [
            3629,
            3691,
            true
          ]
        },
        "Registry.toggleExtensionActive": {
          "51": [
            6534,
            6573,
            true
          ],
          "52": [
            6653,
            6709,
            true
          ]
        }
      }
    },
    "statements": {
      "4": {
        "Registry.changeCompetitionRulesLocation": {
          "42": [
            4796,
            4914
          ],
          "43": [
            4924,
            5116
          ],
          "44": [
            5126,
            5231
          ],
          "45": [
            5241,
            5298
          ],
          "46": [
            5309,
            5375
          ]
        },
        "Registry.changeCompetitionVault": {
          "26": [
            4088,
            4198
          ],
          "27": [
            4208,
            4392
          ],
          "28": [
            4402,
            4503
          ],
          "29": [
            4513,
            4573
          ],
          "30": [
            4584,
            4653
          ]
        },
        "Registry.changeExtensionInfoLocation": {
          "36": [
            7091,
            7206
          ],
          "37": [
            7216,
            7399
          ],
          "38": [
            7409,
            7511
          ],
          "39": [
            7521,
            7580
          ],
          "40": [
            7591,
            7652
          ]
        },
        "Registry.changeTokenAddress": {
          "31": [
            5472,
            5578
          ],
          "32": [
            5588,
            5680
          ],
          "33": [
            5690,
            5709
          ],
          "34": [
            5720,
            5756
          ]
        },
        "Registry.getCompetitionActive": {
          "24": [
            1196,
            1241
          ]
        },
        "Registry.getCompetitionAddress": {
          "23": [
            1400,
            1469
          ]
        },
        "Registry.getCompetitionList": {
          "25": [
            858,
            894
          ]
        },
        "Registry.getCompetitionRulesLocation": {
          "12": [
            1837,
            1896
          ]
        },
        "Registry.getCompetitionVault": {
          "35": [
            1620,
            1677
          ]
        },
        "Registry.getExtensionActive": {
          "41": [
            2380,
            2421
          ]
        },
        "Registry.getExtensionAddress": {
          "5": [
            2176,
            2237
          ]
        },
        "Registry.getExtensionList": {
          "6": [
            1021,
            1053
          ]
        },
        "Registry.getExtensionRulesLocation": {
          "22": [
            2587,
            2654
          ]
        },
        "Registry.getTokenAddress": {
          "0": [
            2005,
            2019
          ]
        },
        "Registry.registerNewCompetition": {
          "17": [
            2841,
            2951
          ],
          "18": [
            2961,
            3073
          ],
          "19": [
            3083,
            3230
          ],
          "20": [
            3240,
            3279
          ],
          "21": [
            3290,
            3385
          ]
        },
        "Registry.registerNewExtension": {
          "7": [
            5920,
            6028
          ],
          "8": [
            6038,
            6142
          ],
          "9": [
            6152,
            6274
          ],
          "10": [
            6284,
            6319
          ],
          "11": [
            6330,
            6411
          ]
        },
        "Registry.toggleCompetitionActive": {
          "1": [
            3500,
            3611
          ],
          "2": [
            3621,
            3806
          ],
          "3": [
            3816,
            3892
          ],
          "4": [
            3903,
            3949
          ]
        },
        "Registry.toggleExtensionActive": {
          "13": [
            6526,
            6635
          ],
          "14": [
            6645,
            6818
          ],
          "15": [
            6828,
            6896
          ],
          "16": [
            6907,
            6949
          ]
        }
      }
    }
  },
  "dependencies": [],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106101735760003560e01c8063526ecad8116100de578063a59e994711610097578063ddad6d5011610071578063ddad6d501461033a578063e4bf72cc1461034d578063f77d657114610360578063ff280a161461037357600080fd5b8063a59e994714610301578063c9cda91f14610314578063d547741f1461032757600080fd5b8063526ecad8146102a55780635d58ebc1146102b857806382144989146102cb5780638b9c0e36146102de57806391d14854146102e6578063a217fddf146102f957600080fd5b80632f2ff15d116101305780632f2ff15d1461023357806335f2d3c61461024657806336568abe146102595780633d7837401461026c57806341d7238e1461027f5780634d2ddc6c1461029257600080fd5b806301ffc9a71461017857806306bbb7f6146101a057806310fe9ae8146101b5578063202a1c65146101da578063248a9ca3146101ed5780632ac7b7571461021e575b600080fd5b61018b610186366004611b7d565b610386565b60405190151581526020015b60405180910390f35b6101b36101ae366004611ba5565b6103bd565b005b6001546001600160a01b03165b6040516001600160a01b039091168152602001610197565b6101c26101e8366004611ba5565b6105c5565b6102106101fb366004611b3a565b60009081526020819052604090206001015490565b604051908152602001610197565b6102266105ff565b6040516101979190611d56565b6101b3610241366004611b52565b6106d8565b6101b3610254366004611ca2565b610767565b6101b3610267366004611b52565b610993565b61021061027a366004611ba5565b610a0d565b6101b361028d366004611ba5565b610a3b565b6101b36102a0366004611c37565b610c38565b6102106102b3366004611ba5565b610e9e565b6101c26102c6366004611ba5565b610ecc565b61018b6102d9366004611ba5565b610ee0565b610226610f0e565b61018b6102f4366004611b52565b610fde565b610210600081565b6101b361030f366004611be5565b611007565b6101b3610322366004611b19565b611273565b6101b3610335366004611b52565b6113af565b6101c2610348366004611ba5565b61142f565b6101b361035b366004611cfc565b611466565b61018b61036e366004611ba5565b6116b7565b6101b3610381366004611cfc565b6116cb565b60006001600160e01b03198216637965db0b60e01b14806103b757506301ffc9a760e01b6001600160e01b03198316145b92915050565b6103c8600033610fde565b61043f5760405162461bcd60e51b815260206004820152603b60248201527f5265676973747279202d20746f67676c65436f6d7065746974696f6e4163746960448201527f76653a2043616c6c657220697320756e617574686f72697a65642e000000000060648201526084015b60405180910390fd5b60006001600160a01b03166002838360405161045c929190611d46565b908152604051908190036020019020546001600160a01b0361010090910416141561052c5760405162461bcd60e51b815260206004820152606e60248201527f5265676973747279202d20746f67676c65436f6d7065746974696f6e4163746960448201527f76653a20436f6d7065746974696f6e20646f6573206e6f742065786973742e2060648201527f5573652066756e6374696f6e202772656769737465724e6577436f6d7065746960848201526d3a34b7b7139034b739ba32b0b21760911b60a482015260c401610436565b6002828260405161053e929190611d46565b9081526040519081900360200181205460ff1615906002906105639085908590611d46565b908152604051908190036020018120805492151560ff19909316929092179091556105919083908390611d46565b604051908190038120907fb1bdac09178448906c9b70df8b0345ac474bbb794b64a551cfffa0a83a0dfdd990600090a25050565b6000600383836040516105d9929190611d46565b908152604051908190036020019020546001600160a01b03610100909104169392505050565b60606005805480602002602001604051908101604052809291908181526020016000905b828210156106cf57838290600052602060002001805461064290611dee565b80601f016020809104026020016040519081016040528092919081815260200182805461066e90611dee565b80156106bb5780601f10610690576101008083540402835291602001916106bb565b820191906000526020600020905b81548152906001019060200180831161069e57829003601f168201915b505050505081526020019060010190610623565b50505050905090565b6000828152602081905260409020600101546106f5905b33610fde565b6107595760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60448201526e0818591b5a5b881d1bc819dc985b9d608a1b6064820152608401610436565b6107638282611934565b5050565b610772600033610fde565b6107e45760405162461bcd60e51b815260206004820152603860248201527f5265676973747279202d2072656769737465724e6577457874656e73696f6e3a60448201527f2043616c6c657220697320756e617574686f72697a65642e00000000000000006064820152608401610436565b600384846040516107f6929190611d46565b9081526040519081900360200190205460ff161561087c5760405162461bcd60e51b815260206004820152603a60248201527f5265676973747279202d2072656769737465724e6577457874656e73696f6e3a60448201527f20457874656e73696f6e20616c7265616479206578697374732e0000000000006064820152608401610436565b60408051606081018252600181526001600160a01b038416602082015280820183905290516003906108b19087908790611d46565b908152604080516020928190038301902083518154938501516001600160a81b0319909416901515610100600160a81b031916176101006001600160a01b03909416939093029290921782559190910151600191820155600580549182018155600052610941907f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0018585611a1d565b5080826001600160a01b0316858560405161095d929190611d46565b604051908190038120907fc9ecde0ab371f72e2d34131665b30ce9144ea01e7de4a8d5a14d4720617de99190600090a450505050565b6001600160a01b0381163314610a035760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610436565b61076382826119b8565b600060028383604051610a21929190611d46565b908152602001604051809103902060020154905092915050565b610a46600033610fde565b610ab85760405162461bcd60e51b815260206004820152603960248201527f5265676973747279202d20746f67676c65457874656e73696f6e41637469766560448201527f3a2043616c6c657220697320756e617574686f72697a65642e000000000000006064820152608401610436565b60006001600160a01b031660038383604051610ad5929190611d46565b908152604051908190036020019020546001600160a01b03610100909104161415610b9f5760405162461bcd60e51b815260206004820152606860248201527f5265676973747279202d20746f67676c65457874656e73696f6e41637469766560448201527f3a20457874656e73696f6e20646f6573206e6f742065786973742e205573652060648201527f66756e6374696f6e202772656769737465724e6577457874656e73696f6e272060848201526734b739ba32b0b21760c11b60a482015260c401610436565b60038282604051610bb1929190611d46565b9081526040519081900360200181205460ff161590600390610bd69085908590611d46565b908152604051908190036020018120805492151560ff1990931692909217909155610c049083908390611d46565b604051908190038120907f83ae5d198de73bba6f0f383b1b155dae2ca94d1d7ecbd63542d0d07635209fdd90600090a25050565b610c43600033610fde565b610cb55760405162461bcd60e51b815260206004820152603a60248201527f5265676973747279202d2072656769737465724e6577436f6d7065746974696f60448201527f6e3a2043616c6c657220697320756e617574686f72697a65642e0000000000006064820152608401610436565b60028585604051610cc7929190611d46565b9081526040519081900360200190205460ff1615610d4d5760405162461bcd60e51b815260206004820152603e60248201527f5265676973747279202d2072656769737465724e6577436f6d7065746974696f60448201527f6e3a20436f6d7065746974696f6e20616c7265616479206578697374732e00006064820152608401610436565b60408051608081018252600181526001600160a01b038086166020830152841681830152606081018390529051600290610d8a9088908890611d46565b908152604080516020928190038301902083518154938501516001600160a81b0319909416901515610100600160a81b031916176101006001600160a01b039485160217815590830151600180830180546001600160a01b0319169290941691909117909255606090920151600290920191909155600480549182018155600052610e38907f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b018686611a1d565b50816001600160a01b0316836001600160a01b03168686604051610e5d929190611d46565b604051908190038120848252907fd90ede5d677ad2a14bd589a04c16586098f2f5b09d36bf775fb413c5c7ff6a989060200160405180910390a45050505050565b600060038383604051610eb2929190611d46565b908152602001604051809103902060010154905092915050565b6000600283836040516105d9929190611d46565b600060028383604051610ef4929190611d46565b9081526040519081900360200190205460ff169392505050565b60606004805480602002602001604051908101604052809291908181526020016000905b828210156106cf578382906000526020600020018054610f5190611dee565b80601f0160208091040260200160405190810160405280929190818152602001828054610f7d90611dee565b8015610fca5780601f10610f9f57610100808354040283529160200191610fca565b820191906000526020600020905b815481529060010190602001808311610fad57829003601f168201915b505050505081526020019060010190610f32565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b611012600033610fde565b6110845760405162461bcd60e51b815260206004820152603a60248201527f5265676973747279202d206368616e6765436f6d7065746974696f6e5661756c60448201527f743a2043616c6c657220697320756e617574686f72697a65642e0000000000006064820152608401610436565b60006001600160a01b0316600284846040516110a1929190611d46565b908152604051908190036020019020546001600160a01b036101009091041614156111705760405162461bcd60e51b815260206004820152606d60248201527f5265676973747279202d206368616e6765436f6d7065746974696f6e5661756c60448201527f743a20436f6d7065746974696f6e20646f6573206e6f742065786973742e205560648201527f73652066756e6374696f6e202772656769737465724e6577436f6d706574697460848201526c34b7b7139034b739ba32b0b21760991b60a482015260c401610436565b6001600160a01b0381166111ec5760405162461bcd60e51b815260206004820152603b60248201527f5265676973747279202d206368616e6765436f6d7065746974696f6e5661756c60448201527f743a2043616e6e6f742073657420746f203020616464726573732e00000000006064820152608401610436565b80600284846040516111ff929190611d46565b90815260405190819003602001812060010180546001600160a01b039384166001600160a01b03199091161790559082169061123e9085908590611d46565b604051908190038120907f7cfac95b87ab328bbdc2cb62be233c18b521a6044b46f0a9f5281732bc8cb6ab90600090a3505050565b61127e600033610fde565b6112e95760405162461bcd60e51b815260206004820152603660248201527f5265676973747279202d206368616e6765546f6b656e416464726573733a204360448201527530b63632b91034b9903ab730baba3437b934bd32b21760511b6064820152608401610436565b6001600160a01b0381166113655760405162461bcd60e51b815260206004820152603760248201527f5265676973747279202d206368616e6765546f6b656e416464726573733a204360448201527f616e6e6f742073657420746f203020616464726573732e0000000000000000006064820152608401610436565b600180546001600160a01b0319166001600160a01b0383169081179091556040517f1297217f6da0341ba2cab10677a2e4471c20ebc84acc96ef2339a734a3a233b290600090a250565b6000828152602081905260409020600101546113ca906106ef565b610a035760405162461bcd60e51b815260206004820152603060248201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60448201526f2061646d696e20746f207265766f6b6560801b6064820152608401610436565b600060028383604051611443929190611d46565b908152604051908190036020019020600101546001600160a01b03169392505050565b611471600033610fde565b6114e35760405162461bcd60e51b815260206004820152603f60248201527f5265676973747279202d206368616e6765457874656e73696f6e496e666f4c6f60448201527f636174696f6e3a2043616c6c657220697320756e617574686f72697a65642e006064820152608401610436565b60006001600160a01b031660038484604051611500929190611d46565b908152604051908190036020019020546001600160a01b036101009091041614156115d45760405162461bcd60e51b815260206004820152607260248201527f5265676973747279202d206368616e6765457874656e73696f6e496e666f4c6f60448201527f636174696f6e3a20436f6d7065746974696f6e20646f6573206e6f742065786960648201527f73742e205573652066756e6374696f6e202772656769737465724e6577436f6d6084820152713832ba34ba34b7b7139034b739ba32b0b21760711b60a482015260c401610436565b80611649576040805162461bcd60e51b81526020600482015260248101919091527f5265676973747279202d206368616e6765457874656e73696f6e496e666f4c6f60448201527f636174696f6e3a2043616e6e6f742073657420746f203020616464726573732e6064820152608401610436565b806003848460405161165c929190611d46565b908152602001604051809103902060010181905550808383604051611682929190611d46565b604051908190038120907f88bfdf54ce240d8032ad74fde55d2fc88647a35643bd1a8a4bb7bfc6efc6058c90600090a3505050565b600060038383604051610ef4929190611d46565b6116d6600033610fde565b6117535760405162461bcd60e51b815260206004820152604260248201527f5265676973747279202d206368616e6765436f6d7065746974696f6e52756c6560448201527f734c6f636174696f6e3a2043616c6c657220697320756e617574686f72697a65606482015261321760f11b608482015260a401610436565b60006001600160a01b031660028484604051611770929190611d46565b908152604051908190036020019020546001600160a01b036101009091041614156118475760405162461bcd60e51b815260206004820152607560248201527f5265676973747279202d206368616e6765436f6d7065746974696f6e52756c6560448201527f734c6f636174696f6e3a20436f6d7065746974696f6e20646f6573206e6f742060648201527f65786973742e205573652066756e6374696f6e202772656769737465724e657760848201527421b7b6b832ba34ba34b7b7139034b739ba32b0b21760591b60a482015260c401610436565b806118c65760405162461bcd60e51b815260206004820152604360248201527f5265676973747279202d206368616e6765436f6d7065746974696f6e52756c6560448201527f734c6f636174696f6e3a2043616e6e6f742073657420746f203020616464726560648201526239b99760e91b608482015260a401610436565b80600284846040516118d9929190611d46565b9081526020016040518091039020600201819055508083836040516118ff929190611d46565b604051908190038120907f090e4275b4012fedfa9b631d72bff03048df6aff9864bc8cdee29aa02360d7fd90600090a3505050565b61193e8282610fde565b610763576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556119743390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6119c28282610fde565b15610763576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b828054611a2990611dee565b90600052602060002090601f016020900481019282611a4b5760008555611a91565b82601f10611a645782800160ff19823516178555611a91565b82800160010185558215611a91579182015b82811115611a91578235825591602001919060010190611a76565b50611a9d929150611aa1565b5090565b5b80821115611a9d5760008155600101611aa2565b80356001600160a01b0381168114611acd57600080fd5b919050565b60008083601f840112611ae3578182fd5b50813567ffffffffffffffff811115611afa578182fd5b602083019150836020828501011115611b1257600080fd5b9250929050565b600060208284031215611b2a578081fd5b611b3382611ab6565b9392505050565b600060208284031215611b4b578081fd5b5035919050565b60008060408385031215611b64578081fd5b82359150611b7460208401611ab6565b90509250929050565b600060208284031215611b8e578081fd5b81356001600160e01b031981168114611b33578182fd5b60008060208385031215611bb7578182fd5b823567ffffffffffffffff811115611bcd578283fd5b611bd985828601611ad2565b90969095509350505050565b600080600060408486031215611bf9578081fd5b833567ffffffffffffffff811115611c0f578182fd5b611c1b86828701611ad2565b9094509250611c2e905060208501611ab6565b90509250925092565b600080600080600060808688031215611c4e578081fd5b853567ffffffffffffffff811115611c64578182fd5b611c7088828901611ad2565b9096509450611c83905060208701611ab6565b9250611c9160408701611ab6565b949793965091946060013592915050565b60008060008060608587031215611cb7578384fd5b843567ffffffffffffffff811115611ccd578485fd5b611cd987828801611ad2565b9095509350611cec905060208601611ab6565b9396929550929360400135925050565b600080600060408486031215611d10578283fd5b833567ffffffffffffffff811115611d26578384fd5b611d3286828701611ad2565b909790965060209590950135949350505050565b8183823760009101908152919050565b6000602080830181845280855180835260408601915060408160051b8701019250838701855b82811015611de157878503603f1901845281518051808752885b81811015611db1578281018901518882018a01528801611d96565b81811115611dc1578989838a0101525b50601f01601f191695909501860194509285019290850190600101611d7c565b5092979650505050505050565b600181811c90821680611e0257607f821691505b60208210811415611e2357634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212204220e8630557f1f36ae77eb88b4ecbf5287d5dcf49ec26a90491b1ada85363ec64736f6c63430008040033",
  "deployedSourceMap": "145:7526:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3566:214:7;;;;;;:::i;:::-;;:::i;:::-;;;6138:14:93;;6131:22;6113:41;;6101:2;6086:18;3566:214:7;;;;;;;;3398:558:4;;;;;;:::i;:::-;;:::i;:::-;;1909:117;2013:6;;-1:-1:-1;;;;;2013:6:4;1909:117;;;-1:-1:-1;;;;;4674:32:93;;;4656:51;;4644:2;4629:18;1909:117:4;4611:102:93;2036:208:4;;;;;;:::i;:::-;;:::i;4185:121:7:-;;;;;;:::i;:::-;4251:7;4277:12;;;;;;;;;;:22;;;;4185:121;;;;6311:25:93;;;6299:2;6284:18;4185:121:7;6266:76:93;907:153:4;;;:::i;:::-;;;;;;;:::i;4556:228:7:-;;;;;;:::i;:::-;;:::i;5769:649:4:-;;;;;;:::i;:::-;;:::i;5740:214:7:-;;;;;;:::i;:::-;;:::i;1690:213:4:-;;;;;;:::i;:::-;;:::i;6428:528::-;;;;;;:::i;:::-;;:::i;2667:725::-;;;;;;:::i;:::-;;:::i;2438:223::-;;;;;;:::i;:::-;;:::i;1254:222::-;;;;;;:::i;:::-;;:::i;1066:182::-;;;;;;:::i;:::-;;:::i;740:161::-;;;:::i;3867:137:7:-;;;;;;:::i;:::-;;:::i;2363:49::-;;2408:4;2363:49;;3962:698:4;;;;;;:::i;:::-;;:::i;5388:375::-;;;;;;:::i;:::-;;:::i;5018:231:7:-;;;;;;:::i;:::-;;:::i;1482:202:4:-;;;;;;:::i;:::-;;:::i;6966:693::-;;;;;;:::i;:::-;;:::i;2254:174::-;;;;;;:::i;:::-;;:::i;4666:716::-;;;;;;:::i;:::-;;:::i;3566:214:7:-;3651:4;-1:-1:-1;;;;;;3674:47:7;;-1:-1:-1;;;3674:47:7;;:99;;-1:-1:-1;;;;;;;;;;871:40:75;;;3737:36:7;3667:106;3566:214;-1:-1:-1;;3566:214:7:o;3398:558:4:-;3508:39;2408:4:7;3536:10:4;3508:7;:39::i;:::-;3500:111;;;;-1:-1:-1;;;3500:111:4;;13386:2:93;3500:111:4;;;13368:21:93;13425:2;13405:18;;;13398:30;13464:34;13444:18;;;13437:62;13535:29;13515:18;;;13508:57;13582:19;;3500:111:4;;;;;;;;;3689:1;-1:-1:-1;;;;;3629:62:4;:12;3642:15;;3629:29;;;;;;;:::i;:::-;;;;;;;;;;;;;;:48;-1:-1:-1;;;;;3629:48:4;;;;;:62;;3621:185;;;;-1:-1:-1;;;3621:185:4;;14242:2:93;3621:185:4;;;14224:21:93;14281:3;14261:18;;;14254:31;14321:34;14301:18;;;14294:62;14392:34;14372:18;;;14365:62;14464:34;14443:19;;;14436:63;-1:-1:-1;;;14515:19:93;;;14508:45;14570:19;;3621:185:4;14214:381:93;3621:185:4;3856:12;3869:15;;3856:29;;;;;;;:::i;:::-;;;;;;;;;;;;;;:36;;;3855:37;;3816:12;;:29;;3829:15;;;;3816:29;:::i;:::-;;;;;;;;;;;;;;:76;;;;;-1:-1:-1;;3816:76:4;;;;;;;;;;3908:41;;3933:15;;;;3908:41;:::i;:::-;;;;;;;;;;;;;;;3398:558;;:::o;2036:208::-;2136:24;2195:10;2206:13;;2195:25;;;;;;;:::i;:::-;;;;;;;;;;;;;;:42;-1:-1:-1;;;;;2195:42:4;;;;;;2036:208;-1:-1:-1;;;2036:208:4:o;907:153::-;975:30;1038:15;1021:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;907:153;:::o;4556:228:7:-;4251:7;4277:12;;;;;;;;;;:22;;;4648:41;;4656:18;665:10:65;3867:137:7;:::i;4648:41::-;4640:101;;;;-1:-1:-1;;;4640:101:7;;6982:2:93;4640:101:7;;;6964:21:93;7021:2;7001:18;;;6994:30;7060:34;7040:18;;;7033:62;-1:-1:-1;;;7111:18:93;;;7104:45;7166:19;;4640:101:7;6954:237:93;4640:101:7;4752:25;4763:4;4769:7;4752:10;:25::i;:::-;4556:228;;:::o;5769:649:4:-;5928:39;2408:4:7;5956:10:4;5928:7;:39::i;:::-;5920:108;;;;-1:-1:-1;;;5920:108:4;;9783:2:93;5920:108:4;;;9765:21:93;9822:2;9802:18;;;9795:30;9861:34;9841:18;;;9834:62;9932:26;9912:18;;;9905:54;9976:19;;5920:108:4;9755:246:93;5920:108:4;6047:10;6058:13;;6047:25;;;;;;;:::i;:::-;;;;;;;;;;;;;;:32;;;6046:33;6038:104;;;;-1:-1:-1;;;6038:104:4;;10684:2:93;6038:104:4;;;10666:21:93;10723:2;10703:18;;;10696:30;10762:34;10742:18;;;10735:62;10833:28;10813:18;;;10806:56;10879:19;;6038:104:4;10656:248:93;6038:104:4;6180:94;;;;;;;;6192:4;6180:94;;-1:-1:-1;;;;;6180:94:4;;;;;;;;;;;;6152:25;;:10;;:25;;6163:13;;;;6152:25;:::i;:::-;;;;;;;;;;;;;;;;:122;;;;;;;;-1:-1:-1;;;;;;6152:122:4;;;;;;-1:-1:-1;;;;;;6152:122:4;;;-1:-1:-1;;;;;6152:122:4;;;;;;;;;;;;;;;;;;-1:-1:-1;6152:122:4;;;;6284:15;:35;;;;;;;-1:-1:-1;6284:35:4;;;;;6305:13;;6284:35;:::i;:::-;;6391:19;6373:16;-1:-1:-1;;;;;6335:76:4;6358:13;;6335:76;;;;;;;:::i;:::-;;;;;;;;;;;;;;;5769:649;;;;:::o;5740:214:7:-;-1:-1:-1;;;;;5835:23:7;;665:10:65;5835:23:7;5827:83;;;;-1:-1:-1;;;5827:83:7;;15701:2:93;5827:83:7;;;15683:21:93;15740:2;15720:18;;;15713:30;15779:34;15759:18;;;15752:62;-1:-1:-1;;;15830:18:93;;;15823:45;15885:19;;5827:83:7;15673:237:93;5827:83:7;5921:26;5933:4;5939:7;5921:11;:26::i;1690:213:4:-;1800:21;1853:12;1866:15;;1853:29;;;;;;;:::i;:::-;;;;;;;;;;;;;:43;;;1837:59;;1690:213;;;;:::o;6428:528::-;6534:39;2408:4:7;6562:10:4;6534:7;:39::i;:::-;6526:109;;;;-1:-1:-1;;;6526:109:4;;12101:2:93;6526:109:4;;;12083:21:93;12140:2;12120:18;;;12113:30;12179:34;12159:18;;;12152:62;12250:27;12230:18;;;12223:55;12295:19;;6526:109:4;12073:247:93;6526:109:4;6707:1;-1:-1:-1;;;;;6653:56:4;:10;6664:13;;6653:25;;;;;;;:::i;:::-;;;;;;;;;;;;;;:42;-1:-1:-1;;;;;6653:42:4;;;;;:56;;6645:173;;;;-1:-1:-1;;;6645:173:4;;7398:2:93;6645:173:4;;;7380:21:93;7437:3;7417:18;;;7410:31;7477:34;7457:18;;;7450:62;7548:34;7528:18;;;7521:62;7620:34;7599:19;;;7592:63;-1:-1:-1;;;7671:19:93;;;7664:39;7720:19;;6645:173:4;7370:375:93;6645:173:4;6864:10;6875:13;;6864:25;;;;;;;:::i;:::-;;;;;;;;;;;;;;:32;;;6863:33;;6828:10;;:25;;6839:13;;;;6828:25;:::i;:::-;;;;;;;;;;;;;;:68;;;;;-1:-1:-1;;6828:68:4;;;;;;;;;;6912:37;;6935:13;;;;6912:37;:::i;:::-;;;;;;;;;;;;;;;6428:528;;:::o;2667:725::-;2849:39;2408:4:7;2877:10:4;2849:7;:39::i;:::-;2841:110;;;;-1:-1:-1;;;2841:110:4;;12527:2:93;2841:110:4;;;12509:21:93;12566:2;12546:18;;;12539:30;12605:34;12585:18;;;12578:62;12676:28;12656:18;;;12649:56;12722:19;;2841:110:4;12499:248:93;2841:110:4;2970:12;2983:15;;2970:29;;;;;;;:::i;:::-;;;;;;;;;;;;;;:36;;;2969:37;2961:112;;;;-1:-1:-1;;;2961:112:4;;11670:2:93;2961:112:4;;;11652:21:93;11709:2;11689:18;;;11682:30;11748:34;11728:18;;;11721:62;11819:32;11799:18;;;11792:60;11869:19;;2961:112:4;11642:252:93;2961:112:4;3115:115;;;;;;;;3128:4;3115:115;;-1:-1:-1;;;;;3115:115:4;;;;;;;;;;;;;;;;;;;3083:29;;:12;;:29;;3096:15;;;;3083:29;:::i;:::-;;;;;;;;;;;;;;;;:147;;;;;;;;-1:-1:-1;;;;;;3083:147:4;;;;;;-1:-1:-1;;;;;;3083:147:4;;;-1:-1:-1;;;;;3083:147:4;;;;;;;;;;;-1:-1:-1;3083:147:4;;;;;-1:-1:-1;;;;;;3083:147:4;;;;;;;;;;;;;;;;;;;;;;;;;3240:17;:39;;;;;;;-1:-1:-1;3240:39:4;;;;;3263:15;;3240:39;:::i;:::-;;3357:12;-1:-1:-1;;;;;3295:90:4;3337:18;-1:-1:-1;;;;;3295:90:4;3320:15;;3295:90;;;;;;;:::i;:::-;;;;;;;;;6311:25:93;;;3295:90:4;;;6299:2:93;6284:18;3295:90:4;;;;;;;2667:725;;;;;:::o;2438:223::-;2544:27;2609:10;2620:13;;2609:25;;;;;;;:::i;:::-;;;;;;;;;;;;;:45;;;2587:67;;2438:223;;;;:::o;1254:222::-;1358:26;1421:12;1434:15;;1421:29;;;;;;;:::i;1066:182::-;1169:11;1205:12;1218:15;;1205:29;;;;;;;:::i;:::-;;;;;;;;;;;;;;:36;;;;1066:182;-1:-1:-1;;;1066:182:4:o;740:161::-;810:32;877:17;858:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3867:137:7;3945:4;3968:12;;;;;;;;;;;-1:-1:-1;;;;;3968:29:7;;;;;;;;;;;;;;;3867:137::o;3962:698:4:-;4096:39;2408:4:7;4124:10:4;4096:7;:39::i;:::-;4088:110;;;;-1:-1:-1;;;4088:110:4;;8516:2:93;4088:110:4;;;8498:21:93;8555:2;8535:18;;;8528:30;8594:34;8574:18;;;8567:62;8665:28;8645:18;;;8638:56;8711:19;;4088:110:4;8488:248:93;4088:110:4;4276:1;-1:-1:-1;;;;;4216:62:4;:12;4229:15;;4216:29;;;;;;;:::i;:::-;;;;;;;;;;;;;;:48;-1:-1:-1;;;;;4216:48:4;;;;;:62;;4208:184;;;;-1:-1:-1;;;4208:184:4;;11111:2:93;4208:184:4;;;11093:21:93;11150:3;11130:18;;;11123:31;11190:34;11170:18;;;11163:62;11261:34;11241:18;;;11234:62;11333:34;11312:19;;;11305:63;-1:-1:-1;;;11384:19:93;;;11377:44;11438:19;;4208:184:4;11083:380:93;4208:184:4;-1:-1:-1;;;;;4410:29:4;;4402:101;;;;-1:-1:-1;;;4402:101:4;;13814:2:93;4402:101:4;;;13796:21:93;13853:2;13833:18;;;13826:30;13892:34;13872:18;;;13865:62;13963:29;13943:18;;;13936:57;14010:19;;4402:101:4;13786:249:93;4402:101:4;4558:15;4513:12;4526:15;;4513:29;;;;;;;:::i;:::-;;;;;;;;;;;;;;:42;;:60;;-1:-1:-1;;;;;4513:60:4;;;-1:-1:-1;;;;;;4513:60:4;;;;;;4589:64;;;;;;4620:15;;;;4589:64;:::i;:::-;;;;;;;;;;;;;;;3962:698;;;:::o;5388:375::-;5480:39;2408:4:7;5508:10:4;5480:7;:39::i;:::-;5472:106;;;;-1:-1:-1;;;5472:106:4;;8943:2:93;5472:106:4;;;8925:21:93;8982:2;8962:18;;;8955:30;9021:34;9001:18;;;8994:62;-1:-1:-1;;;9072:18:93;;;9065:52;9134:19;;5472:106:4;8915:244:93;5472:106:4;-1:-1:-1;;;;;5596:24:4;;5588:92;;;;-1:-1:-1;;;5588:92:4;;15277:2:93;5588:92:4;;;15259:21:93;15316:2;15296:18;;;15289:30;15355:34;15335:18;;;15328:62;15426:25;15406:18;;;15399:53;15469:19;;5588:92:4;15249:245:93;5588:92:4;5690:6;:19;;-1:-1:-1;;;;;;5690:19:4;-1:-1:-1;;;;;5690:19:4;;;;;;;;5725:31;;;;-1:-1:-1;;5725:31:4;5388:375;:::o;5018:231:7:-;4251:7;4277:12;;;;;;;;;;:22;;;5111:41;;5119:18;4185:121;5111:41;5103:102;;;;-1:-1:-1;;;5103:102:7;;9366:2:93;5103:102:7;;;9348:21:93;9405:2;9385:18;;;9378:30;9444:34;9424:18;;;9417:62;-1:-1:-1;;;9495:18:93;;;9488:46;9551:19;;5103:102:7;9338:238:93;1482:202:4;1584:20;1635:12;1648:15;;1635:29;;;;;;;:::i;:::-;;;;;;;;;;;;;;:42;;;-1:-1:-1;;;;;1635:42:4;;1482:202;-1:-1:-1;;;1482:202:4:o;6966:693::-;7099:39;2408:4:7;7127:10:4;7099:7;:39::i;:::-;7091:115;;;;-1:-1:-1;;;7091:115:4;;12954:2:93;7091:115:4;;;12936:21:93;12993:2;12973:18;;;12966:30;13032:34;13012:18;;;13005:62;13103:33;13083:18;;;13076:61;13154:19;;7091:115:4;12926:253:93;7091:115:4;7278:1;-1:-1:-1;;;;;7224:56:4;:10;7235:13;;7224:25;;;;;;;:::i;:::-;;;;;;;;;;;;;;:42;-1:-1:-1;;;;;7224:42:4;;;;;:56;;7216:183;;;;-1:-1:-1;;;7216:183:4;;7952:2:93;7216:183:4;;;7934:21:93;7991:3;7971:18;;;7964:31;8031:34;8011:18;;;8004:62;8102:34;8082:18;;;8075:62;8174:34;8153:19;;;8146:63;-1:-1:-1;;;8225:19:93;;;8218:49;8284:19;;7216:183:4;7924:385:93;7216:183:4;7417:25;7409:102;;;;;-1:-1:-1;;;7409:102:4;;6549:2:93;7409:102:4;;;6531:21:93;6568:18;;;6561:30;;;;6627:34;6607:18;;;6600:62;6698:34;6678:18;;;6671:62;6750:19;;7409:102:4;6521:254:93;7409:102:4;7569:11;7521:10;7532:13;;7521:25;;;;;;;:::i;:::-;;;;;;;;;;;;;:45;;:59;;;;7640:11;7625:13;;7596:56;;;;;;;:::i;:::-;;;;;;;;;;;;;;;6966:693;;;:::o;2254:174::-;2353:11;2389:10;2400:13;;2389:25;;;;;;;:::i;4666:716::-;4804:39;2408:4:7;4832:10:4;4804:7;:39::i;:::-;4796:118;;;;-1:-1:-1;;;4796:118:4;;14802:2:93;4796:118:4;;;14784:21:93;14841:2;14821:18;;;14814:30;14880:34;14860:18;;;14853:62;14951:34;14931:18;;;14924:62;-1:-1:-1;;;15002:19:93;;;14995:33;15045:19;;4796:118:4;14774:296:93;4796:118:4;4992:1;-1:-1:-1;;;;;4932:62:4;:12;4945:15;;4932:29;;;;;;;:::i;:::-;;;;;;;;;;;;;;:48;-1:-1:-1;;;;;4932:48:4;;;;;:62;;4924:192;;;;-1:-1:-1;;;4924:192:4;;16117:2:93;4924:192:4;;;16099:21:93;16156:3;16136:18;;;16129:31;16196:34;16176:18;;;16169:62;16267:34;16247:18;;;16240:62;16339:34;16318:19;;;16311:63;-1:-1:-1;;;16390:19:93;;;16383:52;16452:19;;4924:192:4;16089:388:93;4924:192:4;5134:25;5126:105;;;;-1:-1:-1;;;5126:105:4;;10208:2:93;5126:105:4;;;10190:21:93;10247:2;10227:18;;;10220:30;10286:34;10266:18;;;10259:62;10357:34;10337:18;;;10330:62;-1:-1:-1;;;10408:19:93;;;10401:34;10452:19;;5126:105:4;10180:297:93;5126:105:4;5287:11;5241:12;5254:15;;5241:29;;;;;;;:::i;:::-;;;;;;;;;;;;;:43;;:57;;;;5363:11;5346:15;;5314:61;;;;;;;:::i;:::-;;;;;;;;;;;;;;;4666:716;;;:::o;6952:224:7:-;7026:22;7034:4;7040:7;7026;:22::i;:::-;7021:149;;7064:6;:12;;;;;;;;;;;-1:-1:-1;;;;;7064:29:7;;;;;;;;;:36;;-1:-1:-1;;7064:36:7;7096:4;7064:36;;;7146:12;665:10:65;;586:96;7146:12:7;-1:-1:-1;;;;;7119:40:7;7137:7;-1:-1:-1;;;;;7119:40:7;7131:4;7119:40;;;;;;;;;;6952:224;;:::o;7182:225::-;7256:22;7264:4;7270:7;7256;:22::i;:::-;7252:149;;;7326:5;7294:12;;;;;;;;;;;-1:-1:-1;;;;;7294:29:7;;;;;;;;;;:37;;-1:-1:-1;;7294:37:7;;;7350:40;665:10:65;;7294:12:7;;7350:40;;7326:5;7350:40;7182:225;;:::o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:173:93;82:20;;-1:-1:-1;;;;;131:31:93;;121:42;;111:2;;177:1;174;167:12;111:2;63:124;;;:::o;192:376::-;244:8;254:6;308:3;301:4;293:6;289:17;285:27;275:2;;333:8;323;316:26;275:2;-1:-1:-1;363:20:93;;406:18;395:30;;392:2;;;445:8;435;428:26;392:2;489:4;481:6;477:17;465:29;;541:3;534:4;525:6;517;513:19;509:30;506:39;503:2;;;558:1;555;548:12;503:2;265:303;;;;;:::o;573:196::-;632:6;685:2;673:9;664:7;660:23;656:32;653:2;;;706:6;698;691:22;653:2;734:29;753:9;734:29;:::i;:::-;724:39;643:126;-1:-1:-1;;;643:126:93:o;774:190::-;833:6;886:2;874:9;865:7;861:23;857:32;854:2;;;907:6;899;892:22;854:2;-1:-1:-1;935:23:93;;844:120;-1:-1:-1;844:120:93:o;969:264::-;1037:6;1045;1098:2;1086:9;1077:7;1073:23;1069:32;1066:2;;;1119:6;1111;1104:22;1066:2;1160:9;1147:23;1137:33;;1189:38;1223:2;1212:9;1208:18;1189:38;:::i;:::-;1179:48;;1056:177;;;;;:::o;1238:306::-;1296:6;1349:2;1337:9;1328:7;1324:23;1320:32;1317:2;;;1370:6;1362;1355:22;1317:2;1401:23;;-1:-1:-1;;;;;;1453:32:93;;1443:43;;1433:2;;1505:6;1497;1490:22;1549:431;1620:6;1628;1681:2;1669:9;1660:7;1656:23;1652:32;1649:2;;;1702:6;1694;1687:22;1649:2;1747:9;1734:23;1780:18;1772:6;1769:30;1766:2;;;1817:6;1809;1802:22;1766:2;1861:59;1912:7;1903:6;1892:9;1888:22;1861:59;:::i;:::-;1939:8;;1835:85;;-1:-1:-1;1639:341:93;-1:-1:-1;;;;1639:341:93:o;1985:505::-;2065:6;2073;2081;2134:2;2122:9;2113:7;2109:23;2105:32;2102:2;;;2155:6;2147;2140:22;2102:2;2200:9;2187:23;2233:18;2225:6;2222:30;2219:2;;;2270:6;2262;2255:22;2219:2;2314:59;2365:7;2356:6;2345:9;2341:22;2314:59;:::i;:::-;2392:8;;-1:-1:-1;2288:85:93;-1:-1:-1;2446:38:93;;-1:-1:-1;2480:2:93;2465:18;;2446:38;:::i;:::-;2436:48;;2092:398;;;;;:::o;2495:648::-;2593:6;2601;2609;2617;2625;2678:3;2666:9;2657:7;2653:23;2649:33;2646:2;;;2700:6;2692;2685:22;2646:2;2745:9;2732:23;2778:18;2770:6;2767:30;2764:2;;;2815:6;2807;2800:22;2764:2;2859:59;2910:7;2901:6;2890:9;2886:22;2859:59;:::i;:::-;2937:8;;-1:-1:-1;2833:85:93;-1:-1:-1;2991:38:93;;-1:-1:-1;3025:2:93;3010:18;;2991:38;:::i;:::-;2981:48;;3048:38;3082:2;3071:9;3067:18;3048:38;:::i;:::-;2636:507;;;;-1:-1:-1;2636:507:93;;3133:2;3118:18;3105:32;;2636:507;-1:-1:-1;;2636:507:93:o;3148:573::-;3237:6;3245;3253;3261;3314:2;3302:9;3293:7;3289:23;3285:32;3282:2;;;3335:6;3327;3320:22;3282:2;3380:9;3367:23;3413:18;3405:6;3402:30;3399:2;;;3450:6;3442;3435:22;3399:2;3494:59;3545:7;3536:6;3525:9;3521:22;3494:59;:::i;:::-;3572:8;;-1:-1:-1;3468:85:93;-1:-1:-1;3626:38:93;;-1:-1:-1;3660:2:93;3645:18;;3626:38;:::i;:::-;3272:449;;;;-1:-1:-1;3616:48:93;;3711:2;3696:18;3683:32;;-1:-1:-1;;3272:449:93:o;3726:499::-;3806:6;3814;3822;3875:2;3863:9;3854:7;3850:23;3846:32;3843:2;;;3896:6;3888;3881:22;3843:2;3941:9;3928:23;3974:18;3966:6;3963:30;3960:2;;;4011:6;4003;3996:22;3960:2;4055:59;4106:7;4097:6;4086:9;4082:22;4055:59;:::i;:::-;4133:8;;4029:85;;-1:-1:-1;4215:2:93;4200:18;;;;4187:32;;3833:392;-1:-1:-1;;;;3833:392:93:o;4230:275::-;4415:6;4407;4402:3;4389:33;4371:3;4441:16;;4466:15;;;4441:16;4379:126;-1:-1:-1;4379:126:93:o;4718:1250::-;4880:4;4909:2;4949;4938:9;4934:18;4979:2;4968:9;4961:21;5002:6;5037;5031:13;5068:6;5060;5053:22;5106:2;5095:9;5091:18;5084:25;;5168:2;5158:6;5155:1;5151:14;5140:9;5136:30;5132:39;5118:53;;5206:2;5198:6;5194:15;5227:4;5240:699;5254:6;5251:1;5248:13;5240:699;;;5319:22;;;-1:-1:-1;;5315:36:93;5303:49;;5375:13;;5417:9;;5439:24;;;5487:4;5504:157;5520:8;5515:3;5512:17;5504:157;;;5628:12;;;5624:21;;5618:28;5595:16;;;5591:25;;5584:63;5539:12;;5504:157;;;5685:8;5680:3;5677:17;5674:2;;;5764:4;5759:2;5748:8;5740:6;5736:21;5732:30;5725:44;5674:2;-1:-1:-1;5849:2:93;5826:17;-1:-1:-1;;5822:31:93;5810:44;;;;5806:53;;;-1:-1:-1;5917:12:93;;;;5882:15;;;;5276:1;5269:9;5240:699;;;-1:-1:-1;5956:6:93;;4889:1079;-1:-1:-1;;;;;;;4889:1079:93:o;16482:380::-;16561:1;16557:12;;;;16604;;;16625:2;;16679:4;16671:6;16667:17;16657:27;;16625:2;16732;16724:6;16721:14;16701:18;16698:38;16695:2;;;16778:10;16773:3;16769:20;16766:1;16759:31;16813:4;16810:1;16803:15;16841:4;16838:1;16831:15;16695:2;;16537:325;;;:::o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "offset": [
    145,
    7671
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x173 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x526ECAD8 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0xA59E9947 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xDDAD6D50 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xDDAD6D50 EQ PUSH2 0x33A JUMPI DUP1 PUSH4 0xE4BF72CC EQ PUSH2 0x34D JUMPI DUP1 PUSH4 0xF77D6571 EQ PUSH2 0x360 JUMPI DUP1 PUSH4 0xFF280A16 EQ PUSH2 0x373 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA59E9947 EQ PUSH2 0x301 JUMPI DUP1 PUSH4 0xC9CDA91F EQ PUSH2 0x314 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x327 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x526ECAD8 EQ PUSH2 0x2A5 JUMPI DUP1 PUSH4 0x5D58EBC1 EQ PUSH2 0x2B8 JUMPI DUP1 PUSH4 0x82144989 EQ PUSH2 0x2CB JUMPI DUP1 PUSH4 0x8B9C0E36 EQ PUSH2 0x2DE JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x2E6 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x2F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2F2FF15D GT PUSH2 0x130 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x233 JUMPI DUP1 PUSH4 0x35F2D3C6 EQ PUSH2 0x246 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x259 JUMPI DUP1 PUSH4 0x3D783740 EQ PUSH2 0x26C JUMPI DUP1 PUSH4 0x41D7238E EQ PUSH2 0x27F JUMPI DUP1 PUSH4 0x4D2DDC6C EQ PUSH2 0x292 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0x6BBB7F6 EQ PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x10FE9AE8 EQ PUSH2 0x1B5 JUMPI DUP1 PUSH4 0x202A1C65 EQ PUSH2 0x1DA JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x1ED JUMPI DUP1 PUSH4 0x2AC7B757 EQ PUSH2 0x21E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x18B PUSH2 0x186 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B7D JUMP JUMPDEST PUSH2 0x386 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B3 PUSH2 0x1AE CALLDATASIZE PUSH1 0x4 PUSH2 0x1BA5 JUMP JUMPDEST PUSH2 0x3BD JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x197 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x1E8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BA5 JUMP JUMPDEST PUSH2 0x5C5 JUMP JUMPDEST PUSH2 0x210 PUSH2 0x1FB CALLDATASIZE PUSH1 0x4 PUSH2 0x1B3A JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x197 JUMP JUMPDEST PUSH2 0x226 PUSH2 0x5FF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x197 SWAP2 SWAP1 PUSH2 0x1D56 JUMP JUMPDEST PUSH2 0x1B3 PUSH2 0x241 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B52 JUMP JUMPDEST PUSH2 0x6D8 JUMP JUMPDEST PUSH2 0x1B3 PUSH2 0x254 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CA2 JUMP JUMPDEST PUSH2 0x767 JUMP JUMPDEST PUSH2 0x1B3 PUSH2 0x267 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B52 JUMP JUMPDEST PUSH2 0x993 JUMP JUMPDEST PUSH2 0x210 PUSH2 0x27A CALLDATASIZE PUSH1 0x4 PUSH2 0x1BA5 JUMP JUMPDEST PUSH2 0xA0D JUMP JUMPDEST PUSH2 0x1B3 PUSH2 0x28D CALLDATASIZE PUSH1 0x4 PUSH2 0x1BA5 JUMP JUMPDEST PUSH2 0xA3B JUMP JUMPDEST PUSH2 0x1B3 PUSH2 0x2A0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C37 JUMP JUMPDEST PUSH2 0xC38 JUMP JUMPDEST PUSH2 0x210 PUSH2 0x2B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BA5 JUMP JUMPDEST PUSH2 0xE9E JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x2C6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BA5 JUMP JUMPDEST PUSH2 0xECC JUMP JUMPDEST PUSH2 0x18B PUSH2 0x2D9 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BA5 JUMP JUMPDEST PUSH2 0xEE0 JUMP JUMPDEST PUSH2 0x226 PUSH2 0xF0E JUMP JUMPDEST PUSH2 0x18B PUSH2 0x2F4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B52 JUMP JUMPDEST PUSH2 0xFDE JUMP JUMPDEST PUSH2 0x210 PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1B3 PUSH2 0x30F CALLDATASIZE PUSH1 0x4 PUSH2 0x1BE5 JUMP JUMPDEST PUSH2 0x1007 JUMP JUMPDEST PUSH2 0x1B3 PUSH2 0x322 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B19 JUMP JUMPDEST PUSH2 0x1273 JUMP JUMPDEST PUSH2 0x1B3 PUSH2 0x335 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B52 JUMP JUMPDEST PUSH2 0x13AF JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x348 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BA5 JUMP JUMPDEST PUSH2 0x142F JUMP JUMPDEST PUSH2 0x1B3 PUSH2 0x35B CALLDATASIZE PUSH1 0x4 PUSH2 0x1CFC JUMP JUMPDEST PUSH2 0x1466 JUMP JUMPDEST PUSH2 0x18B PUSH2 0x36E CALLDATASIZE PUSH1 0x4 PUSH2 0x1BA5 JUMP JUMPDEST PUSH2 0x16B7 JUMP JUMPDEST PUSH2 0x1B3 PUSH2 0x381 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CFC JUMP JUMPDEST PUSH2 0x16CB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x3B7 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3C8 PUSH1 0x0 CALLER PUSH2 0xFDE JUMP JUMPDEST PUSH2 0x43F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265676973747279202D20746F67676C65436F6D7065746974696F6E41637469 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x76653A2043616C6C657220697320756E617574686F72697A65642E0000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x2 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x45C SWAP3 SWAP2 SWAP1 PUSH2 0x1D46 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x100 SWAP1 SWAP2 DIV AND EQ ISZERO PUSH2 0x52C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x6E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265676973747279202D20746F67676C65436F6D7065746974696F6E41637469 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x76653A20436F6D7065746974696F6E20646F6573206E6F742065786973742E20 PUSH1 0x64 DUP3 ADD MSTORE PUSH32 0x5573652066756E6374696F6E202772656769737465724E6577436F6D70657469 PUSH1 0x84 DUP3 ADD MSTORE PUSH14 0x3A34B7B7139034B739BA32B0B217 PUSH1 0x91 SHL PUSH1 0xA4 DUP3 ADD MSTORE PUSH1 0xC4 ADD PUSH2 0x436 JUMP JUMPDEST PUSH1 0x2 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x53E SWAP3 SWAP2 SWAP1 PUSH2 0x1D46 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD DUP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO SWAP1 PUSH1 0x2 SWAP1 PUSH2 0x563 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH2 0x1D46 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD DUP2 KECCAK256 DUP1 SLOAD SWAP3 ISZERO ISZERO PUSH1 0xFF NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE PUSH2 0x591 SWAP1 DUP4 SWAP1 DUP4 SWAP1 PUSH2 0x1D46 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB DUP2 KECCAK256 SWAP1 PUSH32 0xB1BDAC09178448906C9B70DF8B0345AC474BBB794B64A551CFFFA0A83A0DFDD9 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x5D9 SWAP3 SWAP2 SWAP1 PUSH2 0x1D46 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x100 SWAP1 SWAP2 DIV AND SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x5 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x6CF JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP1 SLOAD PUSH2 0x642 SWAP1 PUSH2 0x1DEE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x66E SWAP1 PUSH2 0x1DEE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x6BB JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x690 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x6BB JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x69E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x623 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x6F5 SWAP1 JUMPDEST CALLER PUSH2 0xFDE JUMP JUMPDEST PUSH2 0x759 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2073656E646572206D75737420626520616E PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x818591B5A5B881D1BC819DC985B9D PUSH1 0x8A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x436 JUMP JUMPDEST PUSH2 0x763 DUP3 DUP3 PUSH2 0x1934 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x772 PUSH1 0x0 CALLER PUSH2 0xFDE JUMP JUMPDEST PUSH2 0x7E4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265676973747279202D2072656769737465724E6577457874656E73696F6E3A PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x2043616C6C657220697320756E617574686F72697A65642E0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x436 JUMP JUMPDEST PUSH1 0x3 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x7F6 SWAP3 SWAP2 SWAP1 PUSH2 0x1D46 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x87C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265676973747279202D2072656769737465724E6577457874656E73696F6E3A PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x20457874656E73696F6E20616C7265616479206578697374732E000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x436 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE DUP1 DUP3 ADD DUP4 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x3 SWAP1 PUSH2 0x8B1 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH2 0x1D46 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 SWAP3 DUP2 SWAP1 SUB DUP4 ADD SWAP1 KECCAK256 DUP4 MLOAD DUP2 SLOAD SWAP4 DUP6 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP5 AND SWAP1 ISZERO ISZERO PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND OR PUSH2 0x100 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 MUL SWAP3 SWAP1 SWAP3 OR DUP3 SSTORE SWAP2 SWAP1 SWAP2 ADD MLOAD PUSH1 0x1 SWAP2 DUP3 ADD SSTORE PUSH1 0x5 DUP1 SLOAD SWAP2 DUP3 ADD DUP2 SSTORE PUSH1 0x0 MSTORE PUSH2 0x941 SWAP1 PUSH32 0x36B6384B5ECA791C62761152D0C79BB0604C104A5FB6F4EB0703F3154BB3DB0 ADD DUP6 DUP6 PUSH2 0x1A1D JUMP JUMPDEST POP DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x95D SWAP3 SWAP2 SWAP1 PUSH2 0x1D46 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB DUP2 KECCAK256 SWAP1 PUSH32 0xC9ECDE0AB371F72E2D34131665B30CE9144EA01E7DE4A8D5A14D4720617DE991 SWAP1 PUSH1 0x0 SWAP1 LOG4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0xA03 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x436 JUMP JUMPDEST PUSH2 0x763 DUP3 DUP3 PUSH2 0x19B8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0xA21 SWAP3 SWAP2 SWAP1 PUSH2 0x1D46 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xA46 PUSH1 0x0 CALLER PUSH2 0xFDE JUMP JUMPDEST PUSH2 0xAB8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265676973747279202D20746F67676C65457874656E73696F6E416374697665 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x3A2043616C6C657220697320756E617574686F72697A65642E00000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x436 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x3 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0xAD5 SWAP3 SWAP2 SWAP1 PUSH2 0x1D46 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x100 SWAP1 SWAP2 DIV AND EQ ISZERO PUSH2 0xB9F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x68 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265676973747279202D20746F67676C65457874656E73696F6E416374697665 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x3A20457874656E73696F6E20646F6573206E6F742065786973742E2055736520 PUSH1 0x64 DUP3 ADD MSTORE PUSH32 0x66756E6374696F6E202772656769737465724E6577457874656E73696F6E2720 PUSH1 0x84 DUP3 ADD MSTORE PUSH8 0x34B739BA32B0B217 PUSH1 0xC1 SHL PUSH1 0xA4 DUP3 ADD MSTORE PUSH1 0xC4 ADD PUSH2 0x436 JUMP JUMPDEST PUSH1 0x3 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0xBB1 SWAP3 SWAP2 SWAP1 PUSH2 0x1D46 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD DUP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO SWAP1 PUSH1 0x3 SWAP1 PUSH2 0xBD6 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH2 0x1D46 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD DUP2 KECCAK256 DUP1 SLOAD SWAP3 ISZERO ISZERO PUSH1 0xFF NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE PUSH2 0xC04 SWAP1 DUP4 SWAP1 DUP4 SWAP1 PUSH2 0x1D46 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB DUP2 KECCAK256 SWAP1 PUSH32 0x83AE5D198DE73BBA6F0F383B1B155DAE2CA94D1D7ECBD63542D0D07635209FDD SWAP1 PUSH1 0x0 SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0xC43 PUSH1 0x0 CALLER PUSH2 0xFDE JUMP JUMPDEST PUSH2 0xCB5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265676973747279202D2072656769737465724E6577436F6D7065746974696F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E3A2043616C6C657220697320756E617574686F72697A65642E000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x436 JUMP JUMPDEST PUSH1 0x2 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0xCC7 SWAP3 SWAP2 SWAP1 PUSH2 0x1D46 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xD4D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265676973747279202D2072656769737465724E6577436F6D7065746974696F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E3A20436F6D7065746974696F6E20616C7265616479206578697374732E0000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x436 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND DUP2 DUP4 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x2 SWAP1 PUSH2 0xD8A SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH2 0x1D46 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 SWAP3 DUP2 SWAP1 SUB DUP4 ADD SWAP1 KECCAK256 DUP4 MLOAD DUP2 SLOAD SWAP4 DUP6 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP5 AND SWAP1 ISZERO ISZERO PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND OR PUSH2 0x100 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND MUL OR DUP2 SSTORE SWAP1 DUP4 ADD MLOAD PUSH1 0x1 DUP1 DUP4 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP3 SWAP1 SWAP5 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP3 SSTORE PUSH1 0x60 SWAP1 SWAP3 ADD MLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x4 DUP1 SLOAD SWAP2 DUP3 ADD DUP2 SSTORE PUSH1 0x0 MSTORE PUSH2 0xE38 SWAP1 PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B ADD DUP7 DUP7 PUSH2 0x1A1D JUMP JUMPDEST POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0xE5D SWAP3 SWAP2 SWAP1 PUSH2 0x1D46 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB DUP2 KECCAK256 DUP5 DUP3 MSTORE SWAP1 PUSH32 0xD90EDE5D677AD2A14BD589A04C16586098F2F5B09D36BF775FB413C5C7FF6A98 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0xEB2 SWAP3 SWAP2 SWAP1 PUSH2 0x1D46 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x5D9 SWAP3 SWAP2 SWAP1 PUSH2 0x1D46 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0xEF4 SWAP3 SWAP2 SWAP1 PUSH2 0x1D46 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x6CF JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP1 SLOAD PUSH2 0xF51 SWAP1 PUSH2 0x1DEE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xF7D SWAP1 PUSH2 0x1DEE JUMP JUMPDEST DUP1 ISZERO PUSH2 0xFCA JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xF9F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xFCA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xFAD JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xF32 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x1012 PUSH1 0x0 CALLER PUSH2 0xFDE JUMP JUMPDEST PUSH2 0x1084 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265676973747279202D206368616E6765436F6D7065746974696F6E5661756C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x743A2043616C6C657220697320756E617574686F72697A65642E000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x436 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x2 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x10A1 SWAP3 SWAP2 SWAP1 PUSH2 0x1D46 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x100 SWAP1 SWAP2 DIV AND EQ ISZERO PUSH2 0x1170 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x6D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265676973747279202D206368616E6765436F6D7065746974696F6E5661756C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x743A20436F6D7065746974696F6E20646F6573206E6F742065786973742E2055 PUSH1 0x64 DUP3 ADD MSTORE PUSH32 0x73652066756E6374696F6E202772656769737465724E6577436F6D7065746974 PUSH1 0x84 DUP3 ADD MSTORE PUSH13 0x34B7B7139034B739BA32B0B217 PUSH1 0x99 SHL PUSH1 0xA4 DUP3 ADD MSTORE PUSH1 0xC4 ADD PUSH2 0x436 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x11EC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265676973747279202D206368616E6765436F6D7065746974696F6E5661756C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x743A2043616E6E6F742073657420746F203020616464726573732E0000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x436 JUMP JUMPDEST DUP1 PUSH1 0x2 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x11FF SWAP3 SWAP2 SWAP1 PUSH2 0x1D46 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD DUP2 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE SWAP1 DUP3 AND SWAP1 PUSH2 0x123E SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH2 0x1D46 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB DUP2 KECCAK256 SWAP1 PUSH32 0x7CFAC95B87AB328BBDC2CB62BE233C18B521A6044B46F0A9F5281732BC8CB6AB SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x127E PUSH1 0x0 CALLER PUSH2 0xFDE JUMP JUMPDEST PUSH2 0x12E9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265676973747279202D206368616E6765546F6B656E416464726573733A2043 PUSH1 0x44 DUP3 ADD MSTORE PUSH22 0x30B63632B91034B9903AB730BABA3437B934BD32B217 PUSH1 0x51 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x436 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1365 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x37 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265676973747279202D206368616E6765546F6B656E416464726573733A2043 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616E6E6F742073657420746F203020616464726573732E000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x436 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0x1297217F6DA0341BA2CAB10677A2E4471C20EBC84ACC96EF2339A734A3A233B2 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x13CA SWAP1 PUSH2 0x6EF JUMP JUMPDEST PUSH2 0xA03 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2073656E646572206D75737420626520616E PUSH1 0x44 DUP3 ADD MSTORE PUSH16 0x2061646D696E20746F207265766F6B65 PUSH1 0x80 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x436 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1443 SWAP3 SWAP2 SWAP1 PUSH2 0x1D46 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1471 PUSH1 0x0 CALLER PUSH2 0xFDE JUMP JUMPDEST PUSH2 0x14E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265676973747279202D206368616E6765457874656E73696F6E496E666F4C6F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x636174696F6E3A2043616C6C657220697320756E617574686F72697A65642E00 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x436 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x3 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x1500 SWAP3 SWAP2 SWAP1 PUSH2 0x1D46 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x100 SWAP1 SWAP2 DIV AND EQ ISZERO PUSH2 0x15D4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x72 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265676973747279202D206368616E6765457874656E73696F6E496E666F4C6F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x636174696F6E3A20436F6D7065746974696F6E20646F6573206E6F7420657869 PUSH1 0x64 DUP3 ADD MSTORE PUSH32 0x73742E205573652066756E6374696F6E202772656769737465724E6577436F6D PUSH1 0x84 DUP3 ADD MSTORE PUSH18 0x3832BA34BA34B7B7139034B739BA32B0B217 PUSH1 0x71 SHL PUSH1 0xA4 DUP3 ADD MSTORE PUSH1 0xC4 ADD PUSH2 0x436 JUMP JUMPDEST DUP1 PUSH2 0x1649 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x5265676973747279202D206368616E6765457874656E73696F6E496E666F4C6F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x636174696F6E3A2043616E6E6F742073657420746F203020616464726573732E PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x436 JUMP JUMPDEST DUP1 PUSH1 0x3 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x165C SWAP3 SWAP2 SWAP1 PUSH2 0x1D46 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP1 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1682 SWAP3 SWAP2 SWAP1 PUSH2 0x1D46 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB DUP2 KECCAK256 SWAP1 PUSH32 0x88BFDF54CE240D8032AD74FDE55D2FC88647A35643BD1A8A4BB7BFC6EFC6058C SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0xEF4 SWAP3 SWAP2 SWAP1 PUSH2 0x1D46 JUMP JUMPDEST PUSH2 0x16D6 PUSH1 0x0 CALLER PUSH2 0xFDE JUMP JUMPDEST PUSH2 0x1753 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x42 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265676973747279202D206368616E6765436F6D7065746974696F6E52756C65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x734C6F636174696F6E3A2043616C6C657220697320756E617574686F72697A65 PUSH1 0x64 DUP3 ADD MSTORE PUSH2 0x3217 PUSH1 0xF1 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH2 0x436 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x2 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x1770 SWAP3 SWAP2 SWAP1 PUSH2 0x1D46 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x100 SWAP1 SWAP2 DIV AND EQ ISZERO PUSH2 0x1847 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x75 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265676973747279202D206368616E6765436F6D7065746974696F6E52756C65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x734C6F636174696F6E3A20436F6D7065746974696F6E20646F6573206E6F7420 PUSH1 0x64 DUP3 ADD MSTORE PUSH32 0x65786973742E205573652066756E6374696F6E202772656769737465724E6577 PUSH1 0x84 DUP3 ADD MSTORE PUSH21 0x21B7B6B832BA34BA34B7B7139034B739BA32B0B217 PUSH1 0x59 SHL PUSH1 0xA4 DUP3 ADD MSTORE PUSH1 0xC4 ADD PUSH2 0x436 JUMP JUMPDEST DUP1 PUSH2 0x18C6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x43 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265676973747279202D206368616E6765436F6D7065746974696F6E52756C65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x734C6F636174696F6E3A2043616E6E6F742073657420746F2030206164647265 PUSH1 0x64 DUP3 ADD MSTORE PUSH3 0x39B997 PUSH1 0xE9 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH2 0x436 JUMP JUMPDEST DUP1 PUSH1 0x2 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x18D9 SWAP3 SWAP2 SWAP1 PUSH2 0x1D46 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP DUP1 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x18FF SWAP3 SWAP2 SWAP1 PUSH2 0x1D46 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB DUP2 KECCAK256 SWAP1 PUSH32 0x90E4275B4012FEDFA9B631D72BFF03048DF6AFF9864BC8CDEE29AA02360D7FD SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x193E DUP3 DUP3 PUSH2 0xFDE JUMP JUMPDEST PUSH2 0x763 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x1974 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x19C2 DUP3 DUP3 PUSH2 0xFDE JUMP JUMPDEST ISZERO PUSH2 0x763 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x1A29 SWAP1 PUSH2 0x1DEE JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x1A4B JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x1A91 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x1A64 JUMPI DUP3 DUP1 ADD PUSH1 0xFF NOT DUP3 CALLDATALOAD AND OR DUP6 SSTORE PUSH2 0x1A91 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x1A91 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1A91 JUMPI DUP3 CALLDATALOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1A76 JUMP JUMPDEST POP PUSH2 0x1A9D SWAP3 SWAP2 POP PUSH2 0x1AA1 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1A9D JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1AA2 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1ACD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1AE3 JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1AFA JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1B12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B2A JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1B33 DUP3 PUSH2 0x1AB6 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B4B JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B64 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1B74 PUSH1 0x20 DUP5 ADD PUSH2 0x1AB6 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B8E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x1B33 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1BB7 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1BCD JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x1BD9 DUP6 DUP3 DUP7 ADD PUSH2 0x1AD2 JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1BF9 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C0F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1C1B DUP7 DUP3 DUP8 ADD PUSH2 0x1AD2 JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP PUSH2 0x1C2E SWAP1 POP PUSH1 0x20 DUP6 ADD PUSH2 0x1AB6 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1C4E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C64 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1C70 DUP9 DUP3 DUP10 ADD PUSH2 0x1AD2 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH2 0x1C83 SWAP1 POP PUSH1 0x20 DUP8 ADD PUSH2 0x1AB6 JUMP JUMPDEST SWAP3 POP PUSH2 0x1C91 PUSH1 0x40 DUP8 ADD PUSH2 0x1AB6 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP2 SWAP5 PUSH1 0x60 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1CB7 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1CCD JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x1CD9 DUP8 DUP3 DUP9 ADD PUSH2 0x1AD2 JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP PUSH2 0x1CEC SWAP1 POP PUSH1 0x20 DUP7 ADD PUSH2 0x1AB6 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x40 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1D10 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1D26 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1D32 DUP7 DUP3 DUP8 ADD PUSH2 0x1AD2 JUMP JUMPDEST SWAP1 SWAP8 SWAP1 SWAP7 POP PUSH1 0x20 SWAP6 SWAP1 SWAP6 ADD CALLDATALOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP2 DUP4 DUP3 CALLDATACOPY PUSH1 0x0 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1DE1 JUMPI DUP8 DUP6 SUB PUSH1 0x3F NOT ADD DUP5 MSTORE DUP2 MLOAD DUP1 MLOAD DUP1 DUP8 MSTORE DUP9 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1DB1 JUMPI DUP3 DUP2 ADD DUP10 ADD MLOAD DUP9 DUP3 ADD DUP11 ADD MSTORE DUP9 ADD PUSH2 0x1D96 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x1DC1 JUMPI DUP10 DUP10 DUP4 DUP11 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP6 SWAP1 SWAP6 ADD DUP7 ADD SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1D7C JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1E02 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1E23 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 TIMESTAMP KECCAK256 0xE8 PUSH4 0x557F1F3 PUSH11 0xE77EB88B4ECBF5287D5DCF 0x49 0xEC 0x26 0xA9 DIV SWAP2 0xB1 0xAD 0xA8 MSTORE8 PUSH4 0xEC64736F PUSH13 0x63430008040033000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        145,
        7671
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "5": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "CALLVALUE",
      "path": "4"
    },
    "6": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "DUP1",
      "path": "4"
    },
    "7": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "ISZERO",
      "path": "4"
    },
    "8": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "12": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "DUP1",
      "path": "4"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "REVERT",
      "path": "4"
    },
    "16": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "17": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "POP",
      "path": "4"
    },
    "18": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "CALLDATASIZE",
      "path": "4"
    },
    "21": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "LT",
      "path": "4"
    },
    "22": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x173"
    },
    "25": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "26": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "CALLDATALOAD",
      "path": "4"
    },
    "29": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "SHR",
      "path": "4"
    },
    "32": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "DUP1",
      "path": "4"
    },
    "33": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH4",
      "path": "4",
      "value": "0x526ECAD8"
    },
    "38": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "GT",
      "path": "4"
    },
    "39": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xDE"
    },
    "42": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "43": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "DUP1",
      "path": "4"
    },
    "44": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH4",
      "path": "4",
      "value": "0xA59E9947"
    },
    "49": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "GT",
      "path": "4"
    },
    "50": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x97"
    },
    "53": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "54": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "DUP1",
      "path": "4"
    },
    "55": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH4",
      "path": "4",
      "value": "0xDDAD6D50"
    },
    "60": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "GT",
      "path": "4"
    },
    "61": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x71"
    },
    "64": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "65": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "DUP1",
      "path": "4"
    },
    "66": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH4",
      "path": "4",
      "value": "0xDDAD6D50"
    },
    "71": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "EQ",
      "path": "4"
    },
    "72": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x33A"
    },
    "75": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "76": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "DUP1",
      "path": "4"
    },
    "77": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH4",
      "path": "4",
      "value": "0xE4BF72CC"
    },
    "82": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "EQ",
      "path": "4"
    },
    "83": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x34D"
    },
    "86": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "87": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "DUP1",
      "path": "4"
    },
    "88": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH4",
      "path": "4",
      "value": "0xF77D6571"
    },
    "93": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "EQ",
      "path": "4"
    },
    "94": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x360"
    },
    "97": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "98": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "DUP1",
      "path": "4"
    },
    "99": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH4",
      "path": "4",
      "value": "0xFF280A16"
    },
    "104": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "EQ",
      "path": "4"
    },
    "105": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x373"
    },
    "108": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "109": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "111": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "DUP1",
      "path": "4"
    },
    "112": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "REVERT",
      "path": "4"
    },
    "113": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "114": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "DUP1",
      "path": "4"
    },
    "115": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH4",
      "path": "4",
      "value": "0xA59E9947"
    },
    "120": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "EQ",
      "path": "4"
    },
    "121": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x301"
    },
    "124": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "125": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "DUP1",
      "path": "4"
    },
    "126": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH4",
      "path": "4",
      "value": "0xC9CDA91F"
    },
    "131": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "EQ",
      "path": "4"
    },
    "132": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x314"
    },
    "135": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "136": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "DUP1",
      "path": "4"
    },
    "137": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH4",
      "path": "4",
      "value": "0xD547741F"
    },
    "142": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "EQ",
      "path": "4"
    },
    "143": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x327"
    },
    "146": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "147": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "149": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "DUP1",
      "path": "4"
    },
    "150": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "REVERT",
      "path": "4"
    },
    "151": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "152": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "DUP1",
      "path": "4"
    },
    "153": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH4",
      "path": "4",
      "value": "0x526ECAD8"
    },
    "158": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "EQ",
      "path": "4"
    },
    "159": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x2A5"
    },
    "162": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "163": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "DUP1",
      "path": "4"
    },
    "164": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH4",
      "path": "4",
      "value": "0x5D58EBC1"
    },
    "169": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "EQ",
      "path": "4"
    },
    "170": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x2B8"
    },
    "173": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "174": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "DUP1",
      "path": "4"
    },
    "175": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH4",
      "path": "4",
      "value": "0x82144989"
    },
    "180": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "EQ",
      "path": "4"
    },
    "181": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x2CB"
    },
    "184": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "185": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "DUP1",
      "path": "4"
    },
    "186": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH4",
      "path": "4",
      "value": "0x8B9C0E36"
    },
    "191": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "EQ",
      "path": "4"
    },
    "192": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x2DE"
    },
    "195": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "196": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "DUP1",
      "path": "4"
    },
    "197": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH4",
      "path": "4",
      "value": "0x91D14854"
    },
    "202": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "EQ",
      "path": "4"
    },
    "203": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x2E6"
    },
    "206": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "207": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "DUP1",
      "path": "4"
    },
    "208": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH4",
      "path": "4",
      "value": "0xA217FDDF"
    },
    "213": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "EQ",
      "path": "4"
    },
    "214": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x2F9"
    },
    "217": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "218": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "220": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "DUP1",
      "path": "4"
    },
    "221": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "REVERT",
      "path": "4"
    },
    "222": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "223": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "DUP1",
      "path": "4"
    },
    "224": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH4",
      "path": "4",
      "value": "0x2F2FF15D"
    },
    "229": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "GT",
      "path": "4"
    },
    "230": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x130"
    },
    "233": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "234": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "DUP1",
      "path": "4"
    },
    "235": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH4",
      "path": "4",
      "value": "0x2F2FF15D"
    },
    "240": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "EQ",
      "path": "4"
    },
    "241": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x233"
    },
    "244": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "245": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "DUP1",
      "path": "4"
    },
    "246": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH4",
      "path": "4",
      "value": "0x35F2D3C6"
    },
    "251": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "EQ",
      "path": "4"
    },
    "252": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x246"
    },
    "255": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "256": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "DUP1",
      "path": "4"
    },
    "257": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH4",
      "path": "4",
      "value": "0x36568ABE"
    },
    "262": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "EQ",
      "path": "4"
    },
    "263": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x259"
    },
    "266": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "267": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "DUP1",
      "path": "4"
    },
    "268": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH4",
      "path": "4",
      "value": "0x3D783740"
    },
    "273": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "EQ",
      "path": "4"
    },
    "274": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x26C"
    },
    "277": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "278": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "DUP1",
      "path": "4"
    },
    "279": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH4",
      "path": "4",
      "value": "0x41D7238E"
    },
    "284": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "EQ",
      "path": "4"
    },
    "285": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x27F"
    },
    "288": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "289": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "DUP1",
      "path": "4"
    },
    "290": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH4",
      "path": "4",
      "value": "0x4D2DDC6C"
    },
    "295": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "EQ",
      "path": "4"
    },
    "296": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x292"
    },
    "299": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "300": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "302": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "DUP1",
      "path": "4"
    },
    "303": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "REVERT",
      "path": "4"
    },
    "304": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "305": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "DUP1",
      "path": "4"
    },
    "306": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH4",
      "path": "4",
      "value": "0x1FFC9A7"
    },
    "311": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "EQ",
      "path": "4"
    },
    "312": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x178"
    },
    "315": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "316": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "DUP1",
      "path": "4"
    },
    "317": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH4",
      "path": "4",
      "value": "0x6BBB7F6"
    },
    "322": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "EQ",
      "path": "4"
    },
    "323": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1A0"
    },
    "326": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "327": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "DUP1",
      "path": "4"
    },
    "328": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH4",
      "path": "4",
      "value": "0x10FE9AE8"
    },
    "333": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "EQ",
      "path": "4"
    },
    "334": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1B5"
    },
    "337": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "338": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "DUP1",
      "path": "4"
    },
    "339": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH4",
      "path": "4",
      "value": "0x202A1C65"
    },
    "344": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "EQ",
      "path": "4"
    },
    "345": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1DA"
    },
    "348": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "349": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "DUP1",
      "path": "4"
    },
    "350": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH4",
      "path": "4",
      "value": "0x248A9CA3"
    },
    "355": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "EQ",
      "path": "4"
    },
    "356": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1ED"
    },
    "359": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "360": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "DUP1",
      "path": "4"
    },
    "361": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH4",
      "path": "4",
      "value": "0x2AC7B757"
    },
    "366": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "EQ",
      "path": "4"
    },
    "367": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x21E"
    },
    "370": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "371": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "372": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "374": {
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "DUP1",
      "path": "4"
    },
    "375": {
      "first_revert": true,
      "fn": null,
      "offset": [
        145,
        7671
      ],
      "op": "REVERT",
      "path": "4"
    },
    "376": {
      "op": "JUMPDEST"
    },
    "377": {
      "op": "PUSH2",
      "value": "0x18B"
    },
    "380": {
      "op": "PUSH2",
      "value": "0x186"
    },
    "383": {
      "op": "CALLDATASIZE"
    },
    "384": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "386": {
      "op": "PUSH2",
      "value": "0x1B7D"
    },
    "389": {
      "jump": "i",
      "op": "JUMP"
    },
    "390": {
      "op": "JUMPDEST"
    },
    "391": {
      "op": "PUSH2",
      "value": "0x386"
    },
    "394": {
      "jump": "i",
      "op": "JUMP"
    },
    "395": {
      "op": "JUMPDEST"
    },
    "396": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "398": {
      "op": "MLOAD"
    },
    "399": {
      "op": "SWAP1"
    },
    "400": {
      "op": "ISZERO"
    },
    "401": {
      "op": "ISZERO"
    },
    "402": {
      "op": "DUP2"
    },
    "403": {
      "op": "MSTORE"
    },
    "404": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "406": {
      "op": "ADD"
    },
    "407": {
      "op": "JUMPDEST"
    },
    "408": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "410": {
      "op": "MLOAD"
    },
    "411": {
      "op": "DUP1"
    },
    "412": {
      "op": "SWAP2"
    },
    "413": {
      "op": "SUB"
    },
    "414": {
      "op": "SWAP1"
    },
    "415": {
      "op": "RETURN"
    },
    "416": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3398,
        3956
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "417": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3398,
        3956
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1B3"
    },
    "420": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3398,
        3956
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1AE"
    },
    "423": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3398,
        3956
      ],
      "op": "CALLDATASIZE",
      "path": "4"
    },
    "424": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3398,
        3956
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "426": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3398,
        3956
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1BA5"
    },
    "429": {
      "fn": "Registry.toggleCompetitionActive",
      "jump": "i",
      "offset": [
        3398,
        3956
      ],
      "op": "JUMP",
      "path": "4"
    },
    "430": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3398,
        3956
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "431": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3398,
        3956
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x3BD"
    },
    "434": {
      "fn": "Registry.toggleCompetitionActive",
      "jump": "i",
      "offset": [
        3398,
        3956
      ],
      "op": "JUMP",
      "path": "4"
    },
    "435": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3398,
        3956
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "436": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3398,
        3956
      ],
      "op": "STOP",
      "path": "4"
    },
    "437": {
      "fn": "Registry.getTokenAddress",
      "offset": [
        1909,
        2026
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "438": {
      "fn": "Registry.getTokenAddress",
      "offset": [
        2013,
        2019
      ],
      "op": "PUSH1",
      "path": "4",
      "statement": 0,
      "value": "0x1"
    },
    "440": {
      "fn": "Registry.getTokenAddress",
      "offset": [
        2013,
        2019
      ],
      "op": "SLOAD",
      "path": "4"
    },
    "441": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "443": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "445": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "447": {
      "op": "SHL"
    },
    "448": {
      "op": "SUB"
    },
    "449": {
      "fn": "Registry.getTokenAddress",
      "offset": [
        2013,
        2019
      ],
      "op": "AND",
      "path": "4"
    },
    "450": {
      "fn": "Registry.getTokenAddress",
      "offset": [
        1909,
        2026
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "451": {
      "fn": "Registry.getTokenAddress",
      "offset": [
        1909,
        2026
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "453": {
      "fn": "Registry.getTokenAddress",
      "offset": [
        1909,
        2026
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "454": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "456": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "458": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "460": {
      "op": "SHL"
    },
    "461": {
      "op": "SUB"
    },
    "462": {
      "op": "SWAP1"
    },
    "463": {
      "op": "SWAP2"
    },
    "464": {
      "op": "AND"
    },
    "465": {
      "op": "DUP2"
    },
    "466": {
      "op": "MSTORE"
    },
    "467": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "469": {
      "op": "ADD"
    },
    "470": {
      "fn": "Registry.getTokenAddress",
      "offset": [
        1909,
        2026
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x197"
    },
    "473": {
      "op": "JUMP"
    },
    "474": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2036,
        2244
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "475": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2036,
        2244
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1C2"
    },
    "478": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2036,
        2244
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1E8"
    },
    "481": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2036,
        2244
      ],
      "op": "CALLDATASIZE",
      "path": "4"
    },
    "482": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2036,
        2244
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "484": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2036,
        2244
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1BA5"
    },
    "487": {
      "fn": "Registry.getExtensionAddress",
      "jump": "i",
      "offset": [
        2036,
        2244
      ],
      "op": "JUMP",
      "path": "4"
    },
    "488": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2036,
        2244
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "489": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2036,
        2244
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x5C5"
    },
    "492": {
      "fn": "Registry.getExtensionAddress",
      "jump": "i",
      "offset": [
        2036,
        2244
      ],
      "op": "JUMP",
      "path": "4"
    },
    "493": {
      "op": "JUMPDEST"
    },
    "494": {
      "op": "PUSH2",
      "value": "0x210"
    },
    "497": {
      "op": "PUSH2",
      "value": "0x1FB"
    },
    "500": {
      "op": "CALLDATASIZE"
    },
    "501": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "503": {
      "op": "PUSH2",
      "value": "0x1B3A"
    },
    "506": {
      "jump": "i",
      "op": "JUMP"
    },
    "507": {
      "op": "JUMPDEST"
    },
    "508": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "510": {
      "op": "SWAP1"
    },
    "511": {
      "op": "DUP2"
    },
    "512": {
      "op": "MSTORE"
    },
    "513": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "515": {
      "op": "DUP2"
    },
    "516": {
      "op": "SWAP1"
    },
    "517": {
      "op": "MSTORE"
    },
    "518": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "520": {
      "op": "SWAP1"
    },
    "521": {
      "op": "KECCAK256"
    },
    "522": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "524": {
      "op": "ADD"
    },
    "525": {
      "op": "SLOAD"
    },
    "526": {
      "op": "SWAP1"
    },
    "527": {
      "op": "JUMP"
    },
    "528": {
      "op": "JUMPDEST"
    },
    "529": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "531": {
      "op": "MLOAD"
    },
    "532": {
      "op": "SWAP1"
    },
    "533": {
      "op": "DUP2"
    },
    "534": {
      "op": "MSTORE"
    },
    "535": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "537": {
      "op": "ADD"
    },
    "538": {
      "op": "PUSH2",
      "value": "0x197"
    },
    "541": {
      "op": "JUMP"
    },
    "542": {
      "fn": "Registry.getExtensionList",
      "offset": [
        907,
        1060
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "543": {
      "fn": "Registry.getExtensionList",
      "offset": [
        907,
        1060
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x226"
    },
    "546": {
      "fn": "Registry.getExtensionList",
      "offset": [
        907,
        1060
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x5FF"
    },
    "549": {
      "fn": "Registry.getExtensionList",
      "jump": "i",
      "offset": [
        907,
        1060
      ],
      "op": "JUMP",
      "path": "4"
    },
    "550": {
      "fn": "Registry.getExtensionList",
      "offset": [
        907,
        1060
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "551": {
      "fn": "Registry.getExtensionList",
      "offset": [
        907,
        1060
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "553": {
      "fn": "Registry.getExtensionList",
      "offset": [
        907,
        1060
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "554": {
      "fn": "Registry.getExtensionList",
      "offset": [
        907,
        1060
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x197"
    },
    "557": {
      "fn": "Registry.getExtensionList",
      "offset": [
        907,
        1060
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "558": {
      "fn": "Registry.getExtensionList",
      "offset": [
        907,
        1060
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "559": {
      "fn": "Registry.getExtensionList",
      "offset": [
        907,
        1060
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1D56"
    },
    "562": {
      "fn": "Registry.getExtensionList",
      "jump": "i",
      "offset": [
        907,
        1060
      ],
      "op": "JUMP",
      "path": "4"
    },
    "563": {
      "op": "JUMPDEST"
    },
    "564": {
      "op": "PUSH2",
      "value": "0x1B3"
    },
    "567": {
      "op": "PUSH2",
      "value": "0x241"
    },
    "570": {
      "op": "CALLDATASIZE"
    },
    "571": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "573": {
      "op": "PUSH2",
      "value": "0x1B52"
    },
    "576": {
      "jump": "i",
      "op": "JUMP"
    },
    "577": {
      "op": "JUMPDEST"
    },
    "578": {
      "op": "PUSH2",
      "value": "0x6D8"
    },
    "581": {
      "jump": "i",
      "op": "JUMP"
    },
    "582": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        5769,
        6418
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "583": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        5769,
        6418
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1B3"
    },
    "586": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        5769,
        6418
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x254"
    },
    "589": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        5769,
        6418
      ],
      "op": "CALLDATASIZE",
      "path": "4"
    },
    "590": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        5769,
        6418
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "592": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        5769,
        6418
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1CA2"
    },
    "595": {
      "fn": "Registry.registerNewExtension",
      "jump": "i",
      "offset": [
        5769,
        6418
      ],
      "op": "JUMP",
      "path": "4"
    },
    "596": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        5769,
        6418
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "597": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        5769,
        6418
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x767"
    },
    "600": {
      "fn": "Registry.registerNewExtension",
      "jump": "i",
      "offset": [
        5769,
        6418
      ],
      "op": "JUMP",
      "path": "4"
    },
    "601": {
      "op": "JUMPDEST"
    },
    "602": {
      "op": "PUSH2",
      "value": "0x1B3"
    },
    "605": {
      "op": "PUSH2",
      "value": "0x267"
    },
    "608": {
      "op": "CALLDATASIZE"
    },
    "609": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "611": {
      "op": "PUSH2",
      "value": "0x1B52"
    },
    "614": {
      "jump": "i",
      "op": "JUMP"
    },
    "615": {
      "op": "JUMPDEST"
    },
    "616": {
      "op": "PUSH2",
      "value": "0x993"
    },
    "619": {
      "jump": "i",
      "op": "JUMP"
    },
    "620": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1690,
        1903
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "621": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1690,
        1903
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x210"
    },
    "624": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1690,
        1903
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x27A"
    },
    "627": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1690,
        1903
      ],
      "op": "CALLDATASIZE",
      "path": "4"
    },
    "628": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1690,
        1903
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "630": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1690,
        1903
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1BA5"
    },
    "633": {
      "fn": "Registry.getCompetitionRulesLocation",
      "jump": "i",
      "offset": [
        1690,
        1903
      ],
      "op": "JUMP",
      "path": "4"
    },
    "634": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1690,
        1903
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "635": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1690,
        1903
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xA0D"
    },
    "638": {
      "fn": "Registry.getCompetitionRulesLocation",
      "jump": "i",
      "offset": [
        1690,
        1903
      ],
      "op": "JUMP",
      "path": "4"
    },
    "639": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6428,
        6956
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "640": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6428,
        6956
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1B3"
    },
    "643": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6428,
        6956
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x28D"
    },
    "646": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6428,
        6956
      ],
      "op": "CALLDATASIZE",
      "path": "4"
    },
    "647": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6428,
        6956
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "649": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6428,
        6956
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1BA5"
    },
    "652": {
      "fn": "Registry.toggleExtensionActive",
      "jump": "i",
      "offset": [
        6428,
        6956
      ],
      "op": "JUMP",
      "path": "4"
    },
    "653": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6428,
        6956
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "654": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6428,
        6956
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xA3B"
    },
    "657": {
      "fn": "Registry.toggleExtensionActive",
      "jump": "i",
      "offset": [
        6428,
        6956
      ],
      "op": "JUMP",
      "path": "4"
    },
    "658": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2667,
        3392
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "659": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2667,
        3392
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1B3"
    },
    "662": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2667,
        3392
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x2A0"
    },
    "665": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2667,
        3392
      ],
      "op": "CALLDATASIZE",
      "path": "4"
    },
    "666": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2667,
        3392
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "668": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2667,
        3392
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1C37"
    },
    "671": {
      "fn": "Registry.registerNewCompetition",
      "jump": "i",
      "offset": [
        2667,
        3392
      ],
      "op": "JUMP",
      "path": "4"
    },
    "672": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2667,
        3392
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "673": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2667,
        3392
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xC38"
    },
    "676": {
      "fn": "Registry.registerNewCompetition",
      "jump": "i",
      "offset": [
        2667,
        3392
      ],
      "op": "JUMP",
      "path": "4"
    },
    "677": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2438,
        2661
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "678": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2438,
        2661
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x210"
    },
    "681": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2438,
        2661
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x2B3"
    },
    "684": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2438,
        2661
      ],
      "op": "CALLDATASIZE",
      "path": "4"
    },
    "685": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2438,
        2661
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "687": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2438,
        2661
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1BA5"
    },
    "690": {
      "fn": "Registry.getExtensionRulesLocation",
      "jump": "i",
      "offset": [
        2438,
        2661
      ],
      "op": "JUMP",
      "path": "4"
    },
    "691": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2438,
        2661
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "692": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2438,
        2661
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xE9E"
    },
    "695": {
      "fn": "Registry.getExtensionRulesLocation",
      "jump": "i",
      "offset": [
        2438,
        2661
      ],
      "op": "JUMP",
      "path": "4"
    },
    "696": {
      "fn": "Registry.getCompetitionAddress",
      "offset": [
        1254,
        1476
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "697": {
      "fn": "Registry.getCompetitionAddress",
      "offset": [
        1254,
        1476
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1C2"
    },
    "700": {
      "fn": "Registry.getCompetitionAddress",
      "offset": [
        1254,
        1476
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x2C6"
    },
    "703": {
      "fn": "Registry.getCompetitionAddress",
      "offset": [
        1254,
        1476
      ],
      "op": "CALLDATASIZE",
      "path": "4"
    },
    "704": {
      "fn": "Registry.getCompetitionAddress",
      "offset": [
        1254,
        1476
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "706": {
      "fn": "Registry.getCompetitionAddress",
      "offset": [
        1254,
        1476
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1BA5"
    },
    "709": {
      "fn": "Registry.getCompetitionAddress",
      "jump": "i",
      "offset": [
        1254,
        1476
      ],
      "op": "JUMP",
      "path": "4"
    },
    "710": {
      "fn": "Registry.getCompetitionAddress",
      "offset": [
        1254,
        1476
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "711": {
      "fn": "Registry.getCompetitionAddress",
      "offset": [
        1254,
        1476
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xECC"
    },
    "714": {
      "fn": "Registry.getCompetitionAddress",
      "jump": "i",
      "offset": [
        1254,
        1476
      ],
      "op": "JUMP",
      "path": "4"
    },
    "715": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1066,
        1248
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "716": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1066,
        1248
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x18B"
    },
    "719": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1066,
        1248
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x2D9"
    },
    "722": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1066,
        1248
      ],
      "op": "CALLDATASIZE",
      "path": "4"
    },
    "723": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1066,
        1248
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "725": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1066,
        1248
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1BA5"
    },
    "728": {
      "fn": "Registry.getCompetitionActive",
      "jump": "i",
      "offset": [
        1066,
        1248
      ],
      "op": "JUMP",
      "path": "4"
    },
    "729": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1066,
        1248
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "730": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1066,
        1248
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xEE0"
    },
    "733": {
      "fn": "Registry.getCompetitionActive",
      "jump": "i",
      "offset": [
        1066,
        1248
      ],
      "op": "JUMP",
      "path": "4"
    },
    "734": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        740,
        901
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "735": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        740,
        901
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x226"
    },
    "738": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        740,
        901
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xF0E"
    },
    "741": {
      "fn": "Registry.getCompetitionList",
      "jump": "i",
      "offset": [
        740,
        901
      ],
      "op": "JUMP",
      "path": "4"
    },
    "742": {
      "op": "JUMPDEST"
    },
    "743": {
      "op": "PUSH2",
      "value": "0x18B"
    },
    "746": {
      "op": "PUSH2",
      "value": "0x2F4"
    },
    "749": {
      "op": "CALLDATASIZE"
    },
    "750": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "752": {
      "op": "PUSH2",
      "value": "0x1B52"
    },
    "755": {
      "jump": "i",
      "op": "JUMP"
    },
    "756": {
      "op": "JUMPDEST"
    },
    "757": {
      "op": "PUSH2",
      "value": "0xFDE"
    },
    "760": {
      "jump": "i",
      "op": "JUMP"
    },
    "761": {
      "op": "JUMPDEST"
    },
    "762": {
      "op": "PUSH2",
      "value": "0x210"
    },
    "765": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "767": {
      "op": "DUP2"
    },
    "768": {
      "op": "JUMP"
    },
    "769": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        3962,
        4660
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "770": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        3962,
        4660
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1B3"
    },
    "773": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        3962,
        4660
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x30F"
    },
    "776": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        3962,
        4660
      ],
      "op": "CALLDATASIZE",
      "path": "4"
    },
    "777": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        3962,
        4660
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "779": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        3962,
        4660
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1BE5"
    },
    "782": {
      "fn": "Registry.changeCompetitionVault",
      "jump": "i",
      "offset": [
        3962,
        4660
      ],
      "op": "JUMP",
      "path": "4"
    },
    "783": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        3962,
        4660
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "784": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        3962,
        4660
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1007"
    },
    "787": {
      "fn": "Registry.changeCompetitionVault",
      "jump": "i",
      "offset": [
        3962,
        4660
      ],
      "op": "JUMP",
      "path": "4"
    },
    "788": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5388,
        5763
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "789": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5388,
        5763
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1B3"
    },
    "792": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5388,
        5763
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x322"
    },
    "795": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5388,
        5763
      ],
      "op": "CALLDATASIZE",
      "path": "4"
    },
    "796": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5388,
        5763
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "798": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5388,
        5763
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1B19"
    },
    "801": {
      "fn": "Registry.changeTokenAddress",
      "jump": "i",
      "offset": [
        5388,
        5763
      ],
      "op": "JUMP",
      "path": "4"
    },
    "802": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5388,
        5763
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "803": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5388,
        5763
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1273"
    },
    "806": {
      "fn": "Registry.changeTokenAddress",
      "jump": "i",
      "offset": [
        5388,
        5763
      ],
      "op": "JUMP",
      "path": "4"
    },
    "807": {
      "op": "JUMPDEST"
    },
    "808": {
      "op": "PUSH2",
      "value": "0x1B3"
    },
    "811": {
      "op": "PUSH2",
      "value": "0x335"
    },
    "814": {
      "op": "CALLDATASIZE"
    },
    "815": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "817": {
      "op": "PUSH2",
      "value": "0x1B52"
    },
    "820": {
      "jump": "i",
      "op": "JUMP"
    },
    "821": {
      "op": "JUMPDEST"
    },
    "822": {
      "op": "PUSH2",
      "value": "0x13AF"
    },
    "825": {
      "jump": "i",
      "op": "JUMP"
    },
    "826": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1482,
        1684
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "827": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1482,
        1684
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1C2"
    },
    "830": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1482,
        1684
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x348"
    },
    "833": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1482,
        1684
      ],
      "op": "CALLDATASIZE",
      "path": "4"
    },
    "834": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1482,
        1684
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "836": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1482,
        1684
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1BA5"
    },
    "839": {
      "fn": "Registry.getCompetitionVault",
      "jump": "i",
      "offset": [
        1482,
        1684
      ],
      "op": "JUMP",
      "path": "4"
    },
    "840": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1482,
        1684
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "841": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1482,
        1684
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x142F"
    },
    "844": {
      "fn": "Registry.getCompetitionVault",
      "jump": "i",
      "offset": [
        1482,
        1684
      ],
      "op": "JUMP",
      "path": "4"
    },
    "845": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        6966,
        7659
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "846": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        6966,
        7659
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1B3"
    },
    "849": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        6966,
        7659
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x35B"
    },
    "852": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        6966,
        7659
      ],
      "op": "CALLDATASIZE",
      "path": "4"
    },
    "853": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        6966,
        7659
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "855": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        6966,
        7659
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1CFC"
    },
    "858": {
      "fn": "Registry.changeExtensionInfoLocation",
      "jump": "i",
      "offset": [
        6966,
        7659
      ],
      "op": "JUMP",
      "path": "4"
    },
    "859": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        6966,
        7659
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "860": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        6966,
        7659
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1466"
    },
    "863": {
      "fn": "Registry.changeExtensionInfoLocation",
      "jump": "i",
      "offset": [
        6966,
        7659
      ],
      "op": "JUMP",
      "path": "4"
    },
    "864": {
      "fn": "Registry.getExtensionActive",
      "offset": [
        2254,
        2428
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "865": {
      "fn": "Registry.getExtensionActive",
      "offset": [
        2254,
        2428
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x18B"
    },
    "868": {
      "fn": "Registry.getExtensionActive",
      "offset": [
        2254,
        2428
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x36E"
    },
    "871": {
      "fn": "Registry.getExtensionActive",
      "offset": [
        2254,
        2428
      ],
      "op": "CALLDATASIZE",
      "path": "4"
    },
    "872": {
      "fn": "Registry.getExtensionActive",
      "offset": [
        2254,
        2428
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "874": {
      "fn": "Registry.getExtensionActive",
      "offset": [
        2254,
        2428
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1BA5"
    },
    "877": {
      "fn": "Registry.getExtensionActive",
      "jump": "i",
      "offset": [
        2254,
        2428
      ],
      "op": "JUMP",
      "path": "4"
    },
    "878": {
      "fn": "Registry.getExtensionActive",
      "offset": [
        2254,
        2428
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "879": {
      "fn": "Registry.getExtensionActive",
      "offset": [
        2254,
        2428
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x16B7"
    },
    "882": {
      "fn": "Registry.getExtensionActive",
      "jump": "i",
      "offset": [
        2254,
        2428
      ],
      "op": "JUMP",
      "path": "4"
    },
    "883": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4666,
        5382
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "884": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4666,
        5382
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1B3"
    },
    "887": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4666,
        5382
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x381"
    },
    "890": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4666,
        5382
      ],
      "op": "CALLDATASIZE",
      "path": "4"
    },
    "891": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4666,
        5382
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "893": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4666,
        5382
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1CFC"
    },
    "896": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "jump": "i",
      "offset": [
        4666,
        5382
      ],
      "op": "JUMP",
      "path": "4"
    },
    "897": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4666,
        5382
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "898": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4666,
        5382
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x16CB"
    },
    "901": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "jump": "i",
      "offset": [
        4666,
        5382
      ],
      "op": "JUMP",
      "path": "4"
    },
    "902": {
      "op": "JUMPDEST"
    },
    "903": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "905": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "907": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "909": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "911": {
      "op": "SHL"
    },
    "912": {
      "op": "SUB"
    },
    "913": {
      "op": "NOT"
    },
    "914": {
      "op": "DUP3"
    },
    "915": {
      "op": "AND"
    },
    "916": {
      "op": "PUSH4",
      "value": "0x7965DB0B"
    },
    "921": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "923": {
      "op": "SHL"
    },
    "924": {
      "op": "EQ"
    },
    "925": {
      "op": "DUP1"
    },
    "926": {
      "op": "PUSH2",
      "value": "0x3B7"
    },
    "929": {
      "op": "JUMPI"
    },
    "930": {
      "op": "POP"
    },
    "931": {
      "op": "PUSH4",
      "value": "0x1FFC9A7"
    },
    "936": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "938": {
      "op": "SHL"
    },
    "939": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "941": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "943": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "945": {
      "op": "SHL"
    },
    "946": {
      "op": "SUB"
    },
    "947": {
      "op": "NOT"
    },
    "948": {
      "op": "DUP4"
    },
    "949": {
      "op": "AND"
    },
    "950": {
      "op": "EQ"
    },
    "951": {
      "op": "JUMPDEST"
    },
    "952": {
      "op": "SWAP3"
    },
    "953": {
      "op": "SWAP2"
    },
    "954": {
      "op": "POP"
    },
    "955": {
      "op": "POP"
    },
    "956": {
      "jump": "o",
      "op": "JUMP"
    },
    "957": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3398,
        3956
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "958": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3508,
        3547
      ],
      "op": "PUSH2",
      "path": "4",
      "statement": 1,
      "value": "0x3C8"
    },
    "961": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "963": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3536,
        3546
      ],
      "op": "CALLER",
      "path": "4"
    },
    "964": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3508,
        3515
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xFDE"
    },
    "967": {
      "fn": "Registry.toggleCompetitionActive",
      "jump": "i",
      "offset": [
        3508,
        3547
      ],
      "op": "JUMP",
      "path": "4"
    },
    "968": {
      "branch": 47,
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3508,
        3547
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "969": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3500,
        3611
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x43F"
    },
    "972": {
      "branch": 47,
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3500,
        3611
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "973": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3500,
        3611
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "975": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3500,
        3611
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "976": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "980": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "982": {
      "op": "SHL"
    },
    "983": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3500,
        3611
      ],
      "op": "DUP2",
      "path": "4"
    },
    "984": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3500,
        3611
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "985": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "987": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3500,
        3611
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "989": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3500,
        3611
      ],
      "op": "DUP3",
      "path": "4"
    },
    "990": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3500,
        3611
      ],
      "op": "ADD",
      "path": "4"
    },
    "991": {
      "op": "MSTORE"
    },
    "992": {
      "op": "PUSH1",
      "value": "0x3B"
    },
    "994": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "996": {
      "op": "DUP3"
    },
    "997": {
      "op": "ADD"
    },
    "998": {
      "op": "MSTORE"
    },
    "999": {
      "op": "PUSH32",
      "value": "0x5265676973747279202D20746F67676C65436F6D7065746974696F6E41637469"
    },
    "1032": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1034": {
      "op": "DUP3"
    },
    "1035": {
      "op": "ADD"
    },
    "1036": {
      "op": "MSTORE"
    },
    "1037": {
      "op": "PUSH32",
      "value": "0x76653A2043616C6C657220697320756E617574686F72697A65642E0000000000"
    },
    "1070": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1072": {
      "op": "DUP3"
    },
    "1073": {
      "op": "ADD"
    },
    "1074": {
      "op": "MSTORE"
    },
    "1075": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1077": {
      "op": "ADD"
    },
    "1078": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3500,
        3611
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "1079": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3500,
        3611
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "1081": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3500,
        3611
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "1082": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3500,
        3611
      ],
      "op": "DUP1",
      "path": "4"
    },
    "1083": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3500,
        3611
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "1084": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3500,
        3611
      ],
      "op": "SUB",
      "path": "4"
    },
    "1085": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3500,
        3611
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1086": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3500,
        3611
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "4"
    },
    "1087": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3500,
        3611
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "1088": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3689,
        3690
      ],
      "op": "PUSH1",
      "path": "4",
      "statement": 2,
      "value": "0x0"
    },
    "1090": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1092": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1094": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1096": {
      "op": "SHL"
    },
    "1097": {
      "op": "SUB"
    },
    "1098": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3629,
        3691
      ],
      "op": "AND",
      "path": "4"
    },
    "1099": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3629,
        3641
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x2"
    },
    "1101": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3642,
        3657
      ],
      "op": "DUP4",
      "path": "4"
    },
    "1102": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3642,
        3657
      ],
      "op": "DUP4",
      "path": "4"
    },
    "1103": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3629,
        3658
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "1105": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3629,
        3658
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "1106": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3629,
        3658
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x45C"
    },
    "1109": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3629,
        3658
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "1110": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3629,
        3658
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "1111": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3629,
        3658
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1112": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3629,
        3658
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1D46"
    },
    "1115": {
      "fn": "Registry.toggleCompetitionActive",
      "jump": "i",
      "offset": [
        3629,
        3658
      ],
      "op": "JUMP",
      "path": "4"
    },
    "1116": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3629,
        3658
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "1117": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3629,
        3658
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1118": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3629,
        3658
      ],
      "op": "DUP2",
      "path": "4"
    },
    "1119": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3629,
        3658
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "1120": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3629,
        3658
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "1122": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3629,
        3658
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "1123": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3629,
        3658
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1124": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3629,
        3658
      ],
      "op": "DUP2",
      "path": "4"
    },
    "1125": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3629,
        3658
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1126": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3629,
        3658
      ],
      "op": "SUB",
      "path": "4"
    },
    "1127": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3629,
        3658
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "1129": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3629,
        3658
      ],
      "op": "ADD",
      "path": "4"
    },
    "1130": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3629,
        3658
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1131": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3629,
        3658
      ],
      "op": "KECCAK256",
      "path": "4"
    },
    "1132": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3629,
        3677
      ],
      "op": "SLOAD",
      "path": "4"
    },
    "1133": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1135": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1137": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1139": {
      "op": "SHL"
    },
    "1140": {
      "op": "SUB"
    },
    "1141": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3629,
        3677
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x100"
    },
    "1144": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3629,
        3677
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1145": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3629,
        3677
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "1146": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3629,
        3677
      ],
      "op": "DIV",
      "path": "4"
    },
    "1147": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3629,
        3677
      ],
      "op": "AND",
      "path": "4"
    },
    "1148": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3629,
        3691
      ],
      "op": "EQ",
      "path": "4"
    },
    "1149": {
      "branch": 48,
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3629,
        3691
      ],
      "op": "ISZERO",
      "path": "4"
    },
    "1150": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3621,
        3806
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x52C"
    },
    "1153": {
      "branch": 48,
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3621,
        3806
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "1154": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3621,
        3806
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "1156": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3621,
        3806
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "1157": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1161": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1163": {
      "op": "SHL"
    },
    "1164": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3621,
        3806
      ],
      "op": "DUP2",
      "path": "4"
    },
    "1165": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3621,
        3806
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "1166": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1168": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3621,
        3806
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "1170": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3621,
        3806
      ],
      "op": "DUP3",
      "path": "4"
    },
    "1171": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3621,
        3806
      ],
      "op": "ADD",
      "path": "4"
    },
    "1172": {
      "op": "MSTORE"
    },
    "1173": {
      "op": "PUSH1",
      "value": "0x6E"
    },
    "1175": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1177": {
      "op": "DUP3"
    },
    "1178": {
      "op": "ADD"
    },
    "1179": {
      "op": "MSTORE"
    },
    "1180": {
      "op": "PUSH32",
      "value": "0x5265676973747279202D20746F67676C65436F6D7065746974696F6E41637469"
    },
    "1213": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1215": {
      "op": "DUP3"
    },
    "1216": {
      "op": "ADD"
    },
    "1217": {
      "op": "MSTORE"
    },
    "1218": {
      "op": "PUSH32",
      "value": "0x76653A20436F6D7065746974696F6E20646F6573206E6F742065786973742E20"
    },
    "1251": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1253": {
      "op": "DUP3"
    },
    "1254": {
      "op": "ADD"
    },
    "1255": {
      "op": "MSTORE"
    },
    "1256": {
      "op": "PUSH32",
      "value": "0x5573652066756E6374696F6E202772656769737465724E6577436F6D70657469"
    },
    "1289": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1291": {
      "op": "DUP3"
    },
    "1292": {
      "op": "ADD"
    },
    "1293": {
      "op": "MSTORE"
    },
    "1294": {
      "op": "PUSH14",
      "value": "0x3A34B7B7139034B739BA32B0B217"
    },
    "1309": {
      "op": "PUSH1",
      "value": "0x91"
    },
    "1311": {
      "op": "SHL"
    },
    "1312": {
      "op": "PUSH1",
      "value": "0xA4"
    },
    "1314": {
      "op": "DUP3"
    },
    "1315": {
      "op": "ADD"
    },
    "1316": {
      "op": "MSTORE"
    },
    "1317": {
      "op": "PUSH1",
      "value": "0xC4"
    },
    "1319": {
      "op": "ADD"
    },
    "1320": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3621,
        3806
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x436"
    },
    "1323": {
      "op": "JUMP"
    },
    "1324": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3621,
        3806
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "1325": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3856,
        3868
      ],
      "op": "PUSH1",
      "path": "4",
      "statement": 3,
      "value": "0x2"
    },
    "1327": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3869,
        3884
      ],
      "op": "DUP3",
      "path": "4"
    },
    "1328": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3869,
        3884
      ],
      "op": "DUP3",
      "path": "4"
    },
    "1329": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3856,
        3885
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "1331": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3856,
        3885
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "1332": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3856,
        3885
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x53E"
    },
    "1335": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3856,
        3885
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "1336": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3856,
        3885
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "1337": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3856,
        3885
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1338": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3856,
        3885
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1D46"
    },
    "1341": {
      "fn": "Registry.toggleCompetitionActive",
      "jump": "i",
      "offset": [
        3856,
        3885
      ],
      "op": "JUMP",
      "path": "4"
    },
    "1342": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3856,
        3885
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "1343": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3856,
        3885
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1344": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3856,
        3885
      ],
      "op": "DUP2",
      "path": "4"
    },
    "1345": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3856,
        3885
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "1346": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3856,
        3885
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "1348": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3856,
        3885
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "1349": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3856,
        3885
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1350": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3856,
        3885
      ],
      "op": "DUP2",
      "path": "4"
    },
    "1351": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3856,
        3885
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1352": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3856,
        3885
      ],
      "op": "SUB",
      "path": "4"
    },
    "1353": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3856,
        3885
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "1355": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3856,
        3885
      ],
      "op": "ADD",
      "path": "4"
    },
    "1356": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3856,
        3885
      ],
      "op": "DUP2",
      "path": "4"
    },
    "1357": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3856,
        3885
      ],
      "op": "KECCAK256",
      "path": "4"
    },
    "1358": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3856,
        3892
      ],
      "op": "SLOAD",
      "path": "4"
    },
    "1359": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3856,
        3892
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0xFF"
    },
    "1361": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3856,
        3892
      ],
      "op": "AND",
      "path": "4"
    },
    "1362": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3855,
        3892
      ],
      "op": "ISZERO",
      "path": "4"
    },
    "1363": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3855,
        3892
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1364": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3816,
        3828
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x2"
    },
    "1366": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3816,
        3828
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1367": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3816,
        3845
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x563"
    },
    "1370": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3816,
        3845
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1371": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3829,
        3844
      ],
      "op": "DUP6",
      "path": "4"
    },
    "1372": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3829,
        3844
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1373": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3829,
        3844
      ],
      "op": "DUP6",
      "path": "4"
    },
    "1374": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3829,
        3844
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1375": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3816,
        3845
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1D46"
    },
    "1378": {
      "fn": "Registry.toggleCompetitionActive",
      "jump": "i",
      "offset": [
        3816,
        3845
      ],
      "op": "JUMP",
      "path": "4"
    },
    "1379": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3816,
        3845
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "1380": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3816,
        3845
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1381": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3816,
        3845
      ],
      "op": "DUP2",
      "path": "4"
    },
    "1382": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3816,
        3845
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "1383": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3816,
        3845
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "1385": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3816,
        3845
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "1386": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3816,
        3845
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1387": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3816,
        3845
      ],
      "op": "DUP2",
      "path": "4"
    },
    "1388": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3816,
        3845
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1389": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3816,
        3845
      ],
      "op": "SUB",
      "path": "4"
    },
    "1390": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3816,
        3845
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "1392": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3816,
        3845
      ],
      "op": "ADD",
      "path": "4"
    },
    "1393": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3816,
        3845
      ],
      "op": "DUP2",
      "path": "4"
    },
    "1394": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3816,
        3845
      ],
      "op": "KECCAK256",
      "path": "4"
    },
    "1395": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3816,
        3892
      ],
      "op": "DUP1",
      "path": "4"
    },
    "1396": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3816,
        3892
      ],
      "op": "SLOAD",
      "path": "4"
    },
    "1397": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3816,
        3892
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "1398": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3816,
        3892
      ],
      "op": "ISZERO",
      "path": "4"
    },
    "1399": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3816,
        3892
      ],
      "op": "ISZERO",
      "path": "4"
    },
    "1400": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1402": {
      "op": "NOT"
    },
    "1403": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3816,
        3892
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1404": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3816,
        3892
      ],
      "op": "SWAP4",
      "path": "4"
    },
    "1405": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3816,
        3892
      ],
      "op": "AND",
      "path": "4"
    },
    "1406": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3816,
        3892
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "1407": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3816,
        3892
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1408": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3816,
        3892
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "1409": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3816,
        3892
      ],
      "op": "OR",
      "path": "4"
    },
    "1410": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3816,
        3892
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1411": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3816,
        3892
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "1412": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3816,
        3892
      ],
      "op": "SSTORE",
      "path": "4"
    },
    "1413": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3908,
        3949
      ],
      "op": "PUSH2",
      "path": "4",
      "statement": 4,
      "value": "0x591"
    },
    "1416": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3908,
        3949
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1417": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3933,
        3948
      ],
      "op": "DUP4",
      "path": "4"
    },
    "1418": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3933,
        3948
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1419": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3933,
        3948
      ],
      "op": "DUP4",
      "path": "4"
    },
    "1420": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3933,
        3948
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1421": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3908,
        3949
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1D46"
    },
    "1424": {
      "fn": "Registry.toggleCompetitionActive",
      "jump": "i",
      "offset": [
        3908,
        3949
      ],
      "op": "JUMP",
      "path": "4"
    },
    "1425": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3908,
        3949
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "1426": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3908,
        3949
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "1428": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3908,
        3949
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "1429": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3908,
        3949
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1430": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3908,
        3949
      ],
      "op": "DUP2",
      "path": "4"
    },
    "1431": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3908,
        3949
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1432": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3908,
        3949
      ],
      "op": "SUB",
      "path": "4"
    },
    "1433": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3908,
        3949
      ],
      "op": "DUP2",
      "path": "4"
    },
    "1434": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3908,
        3949
      ],
      "op": "KECCAK256",
      "path": "4"
    },
    "1435": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3908,
        3949
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1436": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3908,
        3949
      ],
      "op": "PUSH32",
      "path": "4",
      "value": "0xB1BDAC09178448906C9B70DF8B0345AC474BBB794B64A551CFFFA0A83A0DFDD9"
    },
    "1469": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3908,
        3949
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1470": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3908,
        3949
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "1472": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3908,
        3949
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1473": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3908,
        3949
      ],
      "op": "LOG2",
      "path": "4"
    },
    "1474": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3398,
        3956
      ],
      "op": "POP",
      "path": "4"
    },
    "1475": {
      "fn": "Registry.toggleCompetitionActive",
      "offset": [
        3398,
        3956
      ],
      "op": "POP",
      "path": "4"
    },
    "1476": {
      "fn": "Registry.toggleCompetitionActive",
      "jump": "o",
      "offset": [
        3398,
        3956
      ],
      "op": "JUMP",
      "path": "4"
    },
    "1477": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2036,
        2244
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "1478": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2136,
        2160
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "1480": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2195,
        2205
      ],
      "op": "PUSH1",
      "path": "4",
      "statement": 5,
      "value": "0x3"
    },
    "1482": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2206,
        2219
      ],
      "op": "DUP4",
      "path": "4"
    },
    "1483": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2206,
        2219
      ],
      "op": "DUP4",
      "path": "4"
    },
    "1484": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2195,
        2220
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "1486": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2195,
        2220
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "1487": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2195,
        2220
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x5D9"
    },
    "1490": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2195,
        2220
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "1491": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2195,
        2220
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "1492": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2195,
        2220
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1493": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2195,
        2220
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1D46"
    },
    "1496": {
      "fn": "Registry.getExtensionAddress",
      "jump": "i",
      "offset": [
        2195,
        2220
      ],
      "op": "JUMP",
      "path": "4"
    },
    "1497": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2195,
        2220
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "1498": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2195,
        2220
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1499": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2195,
        2220
      ],
      "op": "DUP2",
      "path": "4"
    },
    "1500": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2195,
        2220
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "1501": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2195,
        2220
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "1503": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2195,
        2220
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "1504": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2195,
        2220
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1505": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2195,
        2220
      ],
      "op": "DUP2",
      "path": "4"
    },
    "1506": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2195,
        2220
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1507": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2195,
        2220
      ],
      "op": "SUB",
      "path": "4"
    },
    "1508": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2195,
        2220
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "1510": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2195,
        2220
      ],
      "op": "ADD",
      "path": "4"
    },
    "1511": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2195,
        2220
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1512": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2195,
        2220
      ],
      "op": "KECCAK256",
      "path": "4"
    },
    "1513": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2195,
        2237
      ],
      "op": "SLOAD",
      "path": "4"
    },
    "1514": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1516": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1518": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1520": {
      "op": "SHL"
    },
    "1521": {
      "op": "SUB"
    },
    "1522": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2195,
        2237
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x100"
    },
    "1525": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2195,
        2237
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1526": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2195,
        2237
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "1527": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2195,
        2237
      ],
      "op": "DIV",
      "path": "4"
    },
    "1528": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2195,
        2237
      ],
      "op": "AND",
      "path": "4"
    },
    "1529": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2195,
        2237
      ],
      "op": "SWAP4",
      "path": "4"
    },
    "1530": {
      "fn": "Registry.getExtensionAddress",
      "offset": [
        2036,
        2244
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "1531": {
      "op": "POP"
    },
    "1532": {
      "op": "POP"
    },
    "1533": {
      "op": "POP"
    },
    "1534": {
      "fn": "Registry.getExtensionAddress",
      "jump": "o",
      "offset": [
        2036,
        2244
      ],
      "op": "JUMP",
      "path": "4"
    },
    "1535": {
      "fn": "Registry.getExtensionList",
      "offset": [
        907,
        1060
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "1536": {
      "fn": "Registry.getExtensionList",
      "offset": [
        975,
        1005
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x60"
    },
    "1538": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1038,
        1053
      ],
      "op": "PUSH1",
      "path": "4",
      "statement": 6,
      "value": "0x5"
    },
    "1540": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "DUP1",
      "path": "4"
    },
    "1541": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "SLOAD",
      "path": "4"
    },
    "1542": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "DUP1",
      "path": "4"
    },
    "1543": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "1545": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "MUL",
      "path": "4"
    },
    "1546": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "1548": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "ADD",
      "path": "4"
    },
    "1549": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "1551": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "1552": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1553": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "DUP2",
      "path": "4"
    },
    "1554": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "ADD",
      "path": "4"
    },
    "1555": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "1557": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "1558": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "DUP1",
      "path": "4"
    },
    "1559": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "1560": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "1561": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1562": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "DUP2",
      "path": "4"
    },
    "1563": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "DUP2",
      "path": "4"
    },
    "1564": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "1565": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "1567": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "ADD",
      "path": "4"
    },
    "1568": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "1570": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1571": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "1572": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "DUP3",
      "path": "4"
    },
    "1573": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "DUP3",
      "path": "4"
    },
    "1574": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "LT",
      "path": "4"
    },
    "1575": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "ISZERO",
      "path": "4"
    },
    "1576": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x6CF"
    },
    "1579": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "1580": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "DUP4",
      "path": "4"
    },
    "1581": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "DUP3",
      "path": "4"
    },
    "1582": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1583": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "1585": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "1586": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "1588": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "1590": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "KECCAK256",
      "path": "4"
    },
    "1591": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "ADD",
      "path": "4"
    },
    "1592": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "DUP1",
      "path": "4"
    },
    "1593": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "SLOAD",
      "path": "4"
    },
    "1594": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x642"
    },
    "1597": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1598": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1DEE"
    },
    "1601": {
      "fn": "Registry.getExtensionList",
      "jump": "i",
      "offset": [
        1021,
        1053
      ],
      "op": "JUMP",
      "path": "4"
    },
    "1602": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "1603": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "DUP1",
      "path": "4"
    },
    "1604": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x1F"
    },
    "1606": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "ADD",
      "path": "4"
    },
    "1607": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "1609": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "DUP1",
      "path": "4"
    },
    "1610": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "1611": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "DIV",
      "path": "4"
    },
    "1612": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "MUL",
      "path": "4"
    },
    "1613": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "1615": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "ADD",
      "path": "4"
    },
    "1616": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "1618": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "1619": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1620": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "DUP2",
      "path": "4"
    },
    "1621": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "ADD",
      "path": "4"
    },
    "1622": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "1624": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "1625": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "DUP1",
      "path": "4"
    },
    "1626": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "1627": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "1628": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1629": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "DUP2",
      "path": "4"
    },
    "1630": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "DUP2",
      "path": "4"
    },
    "1631": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "1632": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "1634": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "ADD",
      "path": "4"
    },
    "1635": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "DUP3",
      "path": "4"
    },
    "1636": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "DUP1",
      "path": "4"
    },
    "1637": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "SLOAD",
      "path": "4"
    },
    "1638": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x66E"
    },
    "1641": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1642": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1DEE"
    },
    "1645": {
      "fn": "Registry.getExtensionList",
      "jump": "i",
      "offset": [
        1021,
        1053
      ],
      "op": "JUMP",
      "path": "4"
    },
    "1646": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "1647": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "DUP1",
      "path": "4"
    },
    "1648": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "ISZERO",
      "path": "4"
    },
    "1649": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x6BB"
    },
    "1652": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "1653": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "DUP1",
      "path": "4"
    },
    "1654": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x1F"
    },
    "1656": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "LT",
      "path": "4"
    },
    "1657": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x690"
    },
    "1660": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "1661": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x100"
    },
    "1664": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "DUP1",
      "path": "4"
    },
    "1665": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "DUP4",
      "path": "4"
    },
    "1666": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "SLOAD",
      "path": "4"
    },
    "1667": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "DIV",
      "path": "4"
    },
    "1668": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "MUL",
      "path": "4"
    },
    "1669": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "DUP4",
      "path": "4"
    },
    "1670": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "1671": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "1672": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "1674": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "ADD",
      "path": "4"
    },
    "1675": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "1676": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x6BB"
    },
    "1679": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "JUMP",
      "path": "4"
    },
    "1680": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "1681": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "DUP3",
      "path": "4"
    },
    "1682": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "ADD",
      "path": "4"
    },
    "1683": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "1684": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1685": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "1687": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "1688": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "1690": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "1692": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "KECCAK256",
      "path": "4"
    },
    "1693": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1694": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "1695": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "DUP2",
      "path": "4"
    },
    "1696": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "SLOAD",
      "path": "4"
    },
    "1697": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "DUP2",
      "path": "4"
    },
    "1698": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "1699": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1700": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x1"
    },
    "1702": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "ADD",
      "path": "4"
    },
    "1703": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1704": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "1706": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "ADD",
      "path": "4"
    },
    "1707": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "DUP1",
      "path": "4"
    },
    "1708": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "DUP4",
      "path": "4"
    },
    "1709": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "GT",
      "path": "4"
    },
    "1710": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x69E"
    },
    "1713": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "1714": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "DUP3",
      "path": "4"
    },
    "1715": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1716": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "SUB",
      "path": "4"
    },
    "1717": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x1F"
    },
    "1719": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "AND",
      "path": "4"
    },
    "1720": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "DUP3",
      "path": "4"
    },
    "1721": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "ADD",
      "path": "4"
    },
    "1722": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "1723": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "1724": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "POP",
      "path": "4"
    },
    "1725": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "POP",
      "path": "4"
    },
    "1726": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "POP",
      "path": "4"
    },
    "1727": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "POP",
      "path": "4"
    },
    "1728": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "POP",
      "path": "4"
    },
    "1729": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "DUP2",
      "path": "4"
    },
    "1730": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "1731": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "1733": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "ADD",
      "path": "4"
    },
    "1734": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1735": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x1"
    },
    "1737": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "ADD",
      "path": "4"
    },
    "1738": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1739": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x623"
    },
    "1742": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "JUMP",
      "path": "4"
    },
    "1743": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "1744": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "POP",
      "path": "4"
    },
    "1745": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "POP",
      "path": "4"
    },
    "1746": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "POP",
      "path": "4"
    },
    "1747": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "POP",
      "path": "4"
    },
    "1748": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1749": {
      "fn": "Registry.getExtensionList",
      "offset": [
        1021,
        1053
      ],
      "op": "POP",
      "path": "4"
    },
    "1750": {
      "fn": "Registry.getExtensionList",
      "offset": [
        907,
        1060
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1751": {
      "fn": "Registry.getExtensionList",
      "jump": "o",
      "offset": [
        907,
        1060
      ],
      "op": "JUMP",
      "path": "4"
    },
    "1752": {
      "op": "JUMPDEST"
    },
    "1753": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1755": {
      "op": "DUP3"
    },
    "1756": {
      "op": "DUP2"
    },
    "1757": {
      "op": "MSTORE"
    },
    "1758": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1760": {
      "op": "DUP2"
    },
    "1761": {
      "op": "SWAP1"
    },
    "1762": {
      "op": "MSTORE"
    },
    "1763": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1765": {
      "op": "SWAP1"
    },
    "1766": {
      "op": "KECCAK256"
    },
    "1767": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1769": {
      "op": "ADD"
    },
    "1770": {
      "op": "SLOAD"
    },
    "1771": {
      "op": "PUSH2",
      "value": "0x6F5"
    },
    "1774": {
      "op": "SWAP1"
    },
    "1775": {
      "op": "JUMPDEST"
    },
    "1776": {
      "op": "CALLER"
    },
    "1777": {
      "op": "PUSH2",
      "value": "0xFDE"
    },
    "1780": {
      "jump": "i",
      "op": "JUMP"
    },
    "1781": {
      "op": "JUMPDEST"
    },
    "1782": {
      "op": "PUSH2",
      "value": "0x759"
    },
    "1785": {
      "op": "JUMPI"
    },
    "1786": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1788": {
      "op": "MLOAD"
    },
    "1789": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1793": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1795": {
      "op": "SHL"
    },
    "1796": {
      "op": "DUP2"
    },
    "1797": {
      "op": "MSTORE"
    },
    "1798": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1800": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "1802": {
      "op": "DUP3"
    },
    "1803": {
      "op": "ADD"
    },
    "1804": {
      "op": "MSTORE"
    },
    "1805": {
      "op": "PUSH1",
      "value": "0x2F"
    },
    "1807": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1809": {
      "op": "DUP3"
    },
    "1810": {
      "op": "ADD"
    },
    "1811": {
      "op": "MSTORE"
    },
    "1812": {
      "op": "PUSH32",
      "value": "0x416363657373436F6E74726F6C3A2073656E646572206D75737420626520616E"
    },
    "1845": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1847": {
      "op": "DUP3"
    },
    "1848": {
      "op": "ADD"
    },
    "1849": {
      "op": "MSTORE"
    },
    "1850": {
      "op": "PUSH15",
      "value": "0x818591B5A5B881D1BC819DC985B9D"
    },
    "1866": {
      "op": "PUSH1",
      "value": "0x8A"
    },
    "1868": {
      "op": "SHL"
    },
    "1869": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1871": {
      "op": "DUP3"
    },
    "1872": {
      "op": "ADD"
    },
    "1873": {
      "op": "MSTORE"
    },
    "1874": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1876": {
      "op": "ADD"
    },
    "1877": {
      "op": "PUSH2",
      "value": "0x436"
    },
    "1880": {
      "op": "JUMP"
    },
    "1881": {
      "op": "JUMPDEST"
    },
    "1882": {
      "op": "PUSH2",
      "value": "0x763"
    },
    "1885": {
      "op": "DUP3"
    },
    "1886": {
      "op": "DUP3"
    },
    "1887": {
      "op": "PUSH2",
      "value": "0x1934"
    },
    "1890": {
      "jump": "i",
      "op": "JUMP"
    },
    "1891": {
      "op": "JUMPDEST"
    },
    "1892": {
      "op": "POP"
    },
    "1893": {
      "op": "POP"
    },
    "1894": {
      "jump": "o",
      "op": "JUMP"
    },
    "1895": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        5769,
        6418
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "1896": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        5928,
        5967
      ],
      "op": "PUSH2",
      "path": "4",
      "statement": 7,
      "value": "0x772"
    },
    "1899": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1901": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        5956,
        5966
      ],
      "op": "CALLER",
      "path": "4"
    },
    "1902": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        5928,
        5935
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xFDE"
    },
    "1905": {
      "fn": "Registry.registerNewExtension",
      "jump": "i",
      "offset": [
        5928,
        5967
      ],
      "op": "JUMP",
      "path": "4"
    },
    "1906": {
      "branch": 49,
      "fn": "Registry.registerNewExtension",
      "offset": [
        5928,
        5967
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "1907": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        5920,
        6028
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x7E4"
    },
    "1910": {
      "branch": 49,
      "fn": "Registry.registerNewExtension",
      "offset": [
        5920,
        6028
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "1911": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        5920,
        6028
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "1913": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        5920,
        6028
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "1914": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1918": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1920": {
      "op": "SHL"
    },
    "1921": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        5920,
        6028
      ],
      "op": "DUP2",
      "path": "4"
    },
    "1922": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        5920,
        6028
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "1923": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1925": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        5920,
        6028
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "1927": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        5920,
        6028
      ],
      "op": "DUP3",
      "path": "4"
    },
    "1928": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        5920,
        6028
      ],
      "op": "ADD",
      "path": "4"
    },
    "1929": {
      "op": "MSTORE"
    },
    "1930": {
      "op": "PUSH1",
      "value": "0x38"
    },
    "1932": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1934": {
      "op": "DUP3"
    },
    "1935": {
      "op": "ADD"
    },
    "1936": {
      "op": "MSTORE"
    },
    "1937": {
      "op": "PUSH32",
      "value": "0x5265676973747279202D2072656769737465724E6577457874656E73696F6E3A"
    },
    "1970": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1972": {
      "op": "DUP3"
    },
    "1973": {
      "op": "ADD"
    },
    "1974": {
      "op": "MSTORE"
    },
    "1975": {
      "op": "PUSH32",
      "value": "0x2043616C6C657220697320756E617574686F72697A65642E0000000000000000"
    },
    "2008": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2010": {
      "op": "DUP3"
    },
    "2011": {
      "op": "ADD"
    },
    "2012": {
      "op": "MSTORE"
    },
    "2013": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2015": {
      "op": "ADD"
    },
    "2016": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        5920,
        6028
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x436"
    },
    "2019": {
      "op": "JUMP"
    },
    "2020": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        5920,
        6028
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "2021": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6047,
        6057
      ],
      "op": "PUSH1",
      "path": "4",
      "statement": 8,
      "value": "0x3"
    },
    "2023": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6058,
        6071
      ],
      "op": "DUP5",
      "path": "4"
    },
    "2024": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6058,
        6071
      ],
      "op": "DUP5",
      "path": "4"
    },
    "2025": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6047,
        6072
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "2027": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6047,
        6072
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "2028": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6047,
        6072
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x7F6"
    },
    "2031": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6047,
        6072
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "2032": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6047,
        6072
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "2033": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6047,
        6072
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2034": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6047,
        6072
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1D46"
    },
    "2037": {
      "fn": "Registry.registerNewExtension",
      "jump": "i",
      "offset": [
        6047,
        6072
      ],
      "op": "JUMP",
      "path": "4"
    },
    "2038": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6047,
        6072
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "2039": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6047,
        6072
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2040": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6047,
        6072
      ],
      "op": "DUP2",
      "path": "4"
    },
    "2041": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6047,
        6072
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "2042": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6047,
        6072
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "2044": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6047,
        6072
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "2045": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6047,
        6072
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2046": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6047,
        6072
      ],
      "op": "DUP2",
      "path": "4"
    },
    "2047": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6047,
        6072
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2048": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6047,
        6072
      ],
      "op": "SUB",
      "path": "4"
    },
    "2049": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6047,
        6072
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "2051": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6047,
        6072
      ],
      "op": "ADD",
      "path": "4"
    },
    "2052": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6047,
        6072
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2053": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6047,
        6072
      ],
      "op": "KECCAK256",
      "path": "4"
    },
    "2054": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6047,
        6079
      ],
      "op": "SLOAD",
      "path": "4"
    },
    "2055": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6047,
        6079
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0xFF"
    },
    "2057": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6047,
        6079
      ],
      "op": "AND",
      "path": "4"
    },
    "2058": {
      "branch": 50,
      "fn": "Registry.registerNewExtension",
      "offset": [
        6046,
        6079
      ],
      "op": "ISZERO",
      "path": "4"
    },
    "2059": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6038,
        6142
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x87C"
    },
    "2062": {
      "branch": 50,
      "fn": "Registry.registerNewExtension",
      "offset": [
        6038,
        6142
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "2063": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6038,
        6142
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "2065": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6038,
        6142
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "2066": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2070": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2072": {
      "op": "SHL"
    },
    "2073": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6038,
        6142
      ],
      "op": "DUP2",
      "path": "4"
    },
    "2074": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6038,
        6142
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "2075": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2077": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6038,
        6142
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "2079": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6038,
        6142
      ],
      "op": "DUP3",
      "path": "4"
    },
    "2080": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6038,
        6142
      ],
      "op": "ADD",
      "path": "4"
    },
    "2081": {
      "op": "MSTORE"
    },
    "2082": {
      "op": "PUSH1",
      "value": "0x3A"
    },
    "2084": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2086": {
      "op": "DUP3"
    },
    "2087": {
      "op": "ADD"
    },
    "2088": {
      "op": "MSTORE"
    },
    "2089": {
      "op": "PUSH32",
      "value": "0x5265676973747279202D2072656769737465724E6577457874656E73696F6E3A"
    },
    "2122": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2124": {
      "op": "DUP3"
    },
    "2125": {
      "op": "ADD"
    },
    "2126": {
      "op": "MSTORE"
    },
    "2127": {
      "op": "PUSH32",
      "value": "0x20457874656E73696F6E20616C7265616479206578697374732E000000000000"
    },
    "2160": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2162": {
      "op": "DUP3"
    },
    "2163": {
      "op": "ADD"
    },
    "2164": {
      "op": "MSTORE"
    },
    "2165": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2167": {
      "op": "ADD"
    },
    "2168": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6038,
        6142
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x436"
    },
    "2171": {
      "op": "JUMP"
    },
    "2172": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6038,
        6142
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "2173": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6180,
        6274
      ],
      "op": "PUSH1",
      "path": "4",
      "statement": 9,
      "value": "0x40"
    },
    "2175": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6180,
        6274
      ],
      "op": "DUP1",
      "path": "4"
    },
    "2176": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6180,
        6274
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "2177": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6180,
        6274
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x60"
    },
    "2179": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6180,
        6274
      ],
      "op": "DUP2",
      "path": "4"
    },
    "2180": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6180,
        6274
      ],
      "op": "ADD",
      "path": "4"
    },
    "2181": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6180,
        6274
      ],
      "op": "DUP3",
      "path": "4"
    },
    "2182": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6180,
        6274
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "2183": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6192,
        6196
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x1"
    },
    "2185": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6180,
        6274
      ],
      "op": "DUP2",
      "path": "4"
    },
    "2186": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6180,
        6274
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "2187": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2189": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2191": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2193": {
      "op": "SHL"
    },
    "2194": {
      "op": "SUB"
    },
    "2195": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6180,
        6274
      ],
      "op": "DUP5",
      "path": "4"
    },
    "2196": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6180,
        6274
      ],
      "op": "AND",
      "path": "4"
    },
    "2197": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6180,
        6274
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "2199": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6180,
        6274
      ],
      "op": "DUP3",
      "path": "4"
    },
    "2200": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6180,
        6274
      ],
      "op": "ADD",
      "path": "4"
    },
    "2201": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6180,
        6274
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "2202": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6180,
        6274
      ],
      "op": "DUP1",
      "path": "4"
    },
    "2203": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6180,
        6274
      ],
      "op": "DUP3",
      "path": "4"
    },
    "2204": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6180,
        6274
      ],
      "op": "ADD",
      "path": "4"
    },
    "2205": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6180,
        6274
      ],
      "op": "DUP4",
      "path": "4"
    },
    "2206": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6180,
        6274
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2207": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6180,
        6274
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "2208": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6177
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2209": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6177
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "2210": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6162
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x3"
    },
    "2212": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6162
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2213": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6177
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x8B1"
    },
    "2216": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6177
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2217": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6163,
        6176
      ],
      "op": "DUP8",
      "path": "4"
    },
    "2218": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6163,
        6176
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2219": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6163,
        6176
      ],
      "op": "DUP8",
      "path": "4"
    },
    "2220": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6163,
        6176
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2221": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6177
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1D46"
    },
    "2224": {
      "fn": "Registry.registerNewExtension",
      "jump": "i",
      "offset": [
        6152,
        6177
      ],
      "op": "JUMP",
      "path": "4"
    },
    "2225": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6177
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "2226": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6177
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2227": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6177
      ],
      "op": "DUP2",
      "path": "4"
    },
    "2228": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6177
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "2229": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6177
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "2231": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6177
      ],
      "op": "DUP1",
      "path": "4"
    },
    "2232": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6177
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "2233": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6177
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "2235": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6177
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "2236": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6177
      ],
      "op": "DUP2",
      "path": "4"
    },
    "2237": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6177
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2238": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6177
      ],
      "op": "SUB",
      "path": "4"
    },
    "2239": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6177
      ],
      "op": "DUP4",
      "path": "4"
    },
    "2240": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6177
      ],
      "op": "ADD",
      "path": "4"
    },
    "2241": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6177
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2242": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6177
      ],
      "op": "KECCAK256",
      "path": "4"
    },
    "2243": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "DUP4",
      "path": "4"
    },
    "2244": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "2245": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "DUP2",
      "path": "4"
    },
    "2246": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "SLOAD",
      "path": "4"
    },
    "2247": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "SWAP4",
      "path": "4"
    },
    "2248": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "DUP6",
      "path": "4"
    },
    "2249": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "ADD",
      "path": "4"
    },
    "2250": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "2251": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2253": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2255": {
      "op": "PUSH1",
      "value": "0xA8"
    },
    "2257": {
      "op": "SHL"
    },
    "2258": {
      "op": "SUB"
    },
    "2259": {
      "op": "NOT"
    },
    "2260": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2261": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "SWAP5",
      "path": "4"
    },
    "2262": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "AND",
      "path": "4"
    },
    "2263": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2264": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "ISZERO",
      "path": "4"
    },
    "2265": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "ISZERO",
      "path": "4"
    },
    "2266": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "2269": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2271": {
      "op": "PUSH1",
      "value": "0xA8"
    },
    "2273": {
      "op": "SHL"
    },
    "2274": {
      "op": "SUB"
    },
    "2275": {
      "op": "NOT"
    },
    "2276": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "AND",
      "path": "4"
    },
    "2277": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "OR",
      "path": "4"
    },
    "2278": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x100"
    },
    "2281": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2283": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2285": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2287": {
      "op": "SHL"
    },
    "2288": {
      "op": "SUB"
    },
    "2289": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2290": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "SWAP5",
      "path": "4"
    },
    "2291": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "AND",
      "path": "4"
    },
    "2292": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "SWAP4",
      "path": "4"
    },
    "2293": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2294": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "SWAP4",
      "path": "4"
    },
    "2295": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "MUL",
      "path": "4"
    },
    "2296": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "2297": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2298": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "2299": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "OR",
      "path": "4"
    },
    "2300": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "DUP3",
      "path": "4"
    },
    "2301": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "SSTORE",
      "path": "4"
    },
    "2302": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "2303": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2304": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "2305": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "ADD",
      "path": "4"
    },
    "2306": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "2307": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2309": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "2310": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "DUP3",
      "path": "4"
    },
    "2311": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "ADD",
      "path": "4"
    },
    "2312": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6152,
        6274
      ],
      "op": "SSTORE",
      "path": "4"
    },
    "2313": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6284,
        6299
      ],
      "op": "PUSH1",
      "path": "4",
      "statement": 10,
      "value": "0x5"
    },
    "2315": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6284,
        6319
      ],
      "op": "DUP1",
      "path": "4"
    },
    "2316": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6284,
        6319
      ],
      "op": "SLOAD",
      "path": "4"
    },
    "2317": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6284,
        6319
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "2318": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6284,
        6319
      ],
      "op": "DUP3",
      "path": "4"
    },
    "2319": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6284,
        6319
      ],
      "op": "ADD",
      "path": "4"
    },
    "2320": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6284,
        6319
      ],
      "op": "DUP2",
      "path": "4"
    },
    "2321": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6284,
        6319
      ],
      "op": "SSTORE",
      "path": "4"
    },
    "2322": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2324": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6284,
        6319
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "2325": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6284,
        6319
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x941"
    },
    "2328": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6284,
        6319
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2329": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6284,
        6319
      ],
      "op": "PUSH32",
      "path": "4",
      "value": "0x36B6384B5ECA791C62761152D0C79BB0604C104A5FB6F4EB0703F3154BB3DB0"
    },
    "2362": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6284,
        6319
      ],
      "op": "ADD",
      "path": "4"
    },
    "2363": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6305,
        6318
      ],
      "op": "DUP6",
      "path": "4"
    },
    "2364": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6305,
        6318
      ],
      "op": "DUP6",
      "path": "4"
    },
    "2365": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6284,
        6319
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1A1D"
    },
    "2368": {
      "fn": "Registry.registerNewExtension",
      "jump": "i",
      "offset": [
        6284,
        6319
      ],
      "op": "JUMP",
      "path": "4"
    },
    "2369": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6284,
        6319
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "2370": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6284,
        6319
      ],
      "op": "POP",
      "path": "4"
    },
    "2371": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6391,
        6410
      ],
      "op": "DUP1",
      "path": "4",
      "statement": 11
    },
    "2372": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6373,
        6389
      ],
      "op": "DUP3",
      "path": "4"
    },
    "2373": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2375": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2377": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2379": {
      "op": "SHL"
    },
    "2380": {
      "op": "SUB"
    },
    "2381": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6335,
        6411
      ],
      "op": "AND",
      "path": "4"
    },
    "2382": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6358,
        6371
      ],
      "op": "DUP6",
      "path": "4"
    },
    "2383": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6358,
        6371
      ],
      "op": "DUP6",
      "path": "4"
    },
    "2384": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6335,
        6411
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "2386": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6335,
        6411
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "2387": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6335,
        6411
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x95D"
    },
    "2390": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6335,
        6411
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "2391": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6335,
        6411
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "2392": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6335,
        6411
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2393": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6335,
        6411
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1D46"
    },
    "2396": {
      "fn": "Registry.registerNewExtension",
      "jump": "i",
      "offset": [
        6335,
        6411
      ],
      "op": "JUMP",
      "path": "4"
    },
    "2397": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6335,
        6411
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "2398": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6335,
        6411
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "2400": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6335,
        6411
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "2401": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6335,
        6411
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2402": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6335,
        6411
      ],
      "op": "DUP2",
      "path": "4"
    },
    "2403": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6335,
        6411
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2404": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6335,
        6411
      ],
      "op": "SUB",
      "path": "4"
    },
    "2405": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6335,
        6411
      ],
      "op": "DUP2",
      "path": "4"
    },
    "2406": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6335,
        6411
      ],
      "op": "KECCAK256",
      "path": "4"
    },
    "2407": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6335,
        6411
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2408": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6335,
        6411
      ],
      "op": "PUSH32",
      "path": "4",
      "value": "0xC9ECDE0AB371F72E2D34131665B30CE9144EA01E7DE4A8D5A14D4720617DE991"
    },
    "2441": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6335,
        6411
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2442": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6335,
        6411
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "2444": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6335,
        6411
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2445": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        6335,
        6411
      ],
      "op": "LOG4",
      "path": "4"
    },
    "2446": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        5769,
        6418
      ],
      "op": "POP",
      "path": "4"
    },
    "2447": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        5769,
        6418
      ],
      "op": "POP",
      "path": "4"
    },
    "2448": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        5769,
        6418
      ],
      "op": "POP",
      "path": "4"
    },
    "2449": {
      "fn": "Registry.registerNewExtension",
      "offset": [
        5769,
        6418
      ],
      "op": "POP",
      "path": "4"
    },
    "2450": {
      "fn": "Registry.registerNewExtension",
      "jump": "o",
      "offset": [
        5769,
        6418
      ],
      "op": "JUMP",
      "path": "4"
    },
    "2451": {
      "op": "JUMPDEST"
    },
    "2452": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2454": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2456": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2458": {
      "op": "SHL"
    },
    "2459": {
      "op": "SUB"
    },
    "2460": {
      "op": "DUP2"
    },
    "2461": {
      "op": "AND"
    },
    "2462": {
      "op": "CALLER"
    },
    "2463": {
      "op": "EQ"
    },
    "2464": {
      "op": "PUSH2",
      "value": "0xA03"
    },
    "2467": {
      "op": "JUMPI"
    },
    "2468": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2470": {
      "op": "MLOAD"
    },
    "2471": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2475": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2477": {
      "op": "SHL"
    },
    "2478": {
      "op": "DUP2"
    },
    "2479": {
      "op": "MSTORE"
    },
    "2480": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2482": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2484": {
      "op": "DUP3"
    },
    "2485": {
      "op": "ADD"
    },
    "2486": {
      "op": "MSTORE"
    },
    "2487": {
      "op": "PUSH1",
      "value": "0x2F"
    },
    "2489": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2491": {
      "op": "DUP3"
    },
    "2492": {
      "op": "ADD"
    },
    "2493": {
      "op": "MSTORE"
    },
    "2494": {
      "op": "PUSH32",
      "value": "0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365"
    },
    "2527": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2529": {
      "op": "DUP3"
    },
    "2530": {
      "op": "ADD"
    },
    "2531": {
      "op": "MSTORE"
    },
    "2532": {
      "op": "PUSH15",
      "value": "0x103937B632B9903337B91039B2B633"
    },
    "2548": {
      "op": "PUSH1",
      "value": "0x89"
    },
    "2550": {
      "op": "SHL"
    },
    "2551": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2553": {
      "op": "DUP3"
    },
    "2554": {
      "op": "ADD"
    },
    "2555": {
      "op": "MSTORE"
    },
    "2556": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2558": {
      "op": "ADD"
    },
    "2559": {
      "op": "PUSH2",
      "value": "0x436"
    },
    "2562": {
      "op": "JUMP"
    },
    "2563": {
      "op": "JUMPDEST"
    },
    "2564": {
      "op": "PUSH2",
      "value": "0x763"
    },
    "2567": {
      "op": "DUP3"
    },
    "2568": {
      "op": "DUP3"
    },
    "2569": {
      "op": "PUSH2",
      "value": "0x19B8"
    },
    "2572": {
      "jump": "i",
      "op": "JUMP"
    },
    "2573": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1690,
        1903
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "2574": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1800,
        1821
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "2576": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1853,
        1865
      ],
      "op": "PUSH1",
      "path": "4",
      "statement": 12,
      "value": "0x2"
    },
    "2578": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1866,
        1881
      ],
      "op": "DUP4",
      "path": "4"
    },
    "2579": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1866,
        1881
      ],
      "op": "DUP4",
      "path": "4"
    },
    "2580": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1853,
        1882
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "2582": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1853,
        1882
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "2583": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1853,
        1882
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xA21"
    },
    "2586": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1853,
        1882
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "2587": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1853,
        1882
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "2588": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1853,
        1882
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2589": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1853,
        1882
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1D46"
    },
    "2592": {
      "fn": "Registry.getCompetitionRulesLocation",
      "jump": "i",
      "offset": [
        1853,
        1882
      ],
      "op": "JUMP",
      "path": "4"
    },
    "2593": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1853,
        1882
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "2594": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1853,
        1882
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2595": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1853,
        1882
      ],
      "op": "DUP2",
      "path": "4"
    },
    "2596": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1853,
        1882
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "2597": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1853,
        1882
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "2599": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1853,
        1882
      ],
      "op": "ADD",
      "path": "4"
    },
    "2600": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1853,
        1882
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "2602": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1853,
        1882
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "2603": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1853,
        1882
      ],
      "op": "DUP1",
      "path": "4"
    },
    "2604": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1853,
        1882
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "2605": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1853,
        1882
      ],
      "op": "SUB",
      "path": "4"
    },
    "2606": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1853,
        1882
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2607": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1853,
        1882
      ],
      "op": "KECCAK256",
      "path": "4"
    },
    "2608": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1853,
        1896
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x2"
    },
    "2610": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1853,
        1896
      ],
      "op": "ADD",
      "path": "4"
    },
    "2611": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1853,
        1896
      ],
      "op": "SLOAD",
      "path": "4"
    },
    "2612": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1837,
        1896
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2613": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1837,
        1896
      ],
      "op": "POP",
      "path": "4"
    },
    "2614": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1690,
        1903
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "2615": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1690,
        1903
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "2616": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1690,
        1903
      ],
      "op": "POP",
      "path": "4"
    },
    "2617": {
      "fn": "Registry.getCompetitionRulesLocation",
      "offset": [
        1690,
        1903
      ],
      "op": "POP",
      "path": "4"
    },
    "2618": {
      "fn": "Registry.getCompetitionRulesLocation",
      "jump": "o",
      "offset": [
        1690,
        1903
      ],
      "op": "JUMP",
      "path": "4"
    },
    "2619": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6428,
        6956
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "2620": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6534,
        6573
      ],
      "op": "PUSH2",
      "path": "4",
      "statement": 13,
      "value": "0xA46"
    },
    "2623": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2625": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6562,
        6572
      ],
      "op": "CALLER",
      "path": "4"
    },
    "2626": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6534,
        6541
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xFDE"
    },
    "2629": {
      "fn": "Registry.toggleExtensionActive",
      "jump": "i",
      "offset": [
        6534,
        6573
      ],
      "op": "JUMP",
      "path": "4"
    },
    "2630": {
      "branch": 51,
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6534,
        6573
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "2631": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6526,
        6635
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xAB8"
    },
    "2634": {
      "branch": 51,
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6526,
        6635
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "2635": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6526,
        6635
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "2637": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6526,
        6635
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "2638": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2642": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2644": {
      "op": "SHL"
    },
    "2645": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6526,
        6635
      ],
      "op": "DUP2",
      "path": "4"
    },
    "2646": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6526,
        6635
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "2647": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2649": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6526,
        6635
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "2651": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6526,
        6635
      ],
      "op": "DUP3",
      "path": "4"
    },
    "2652": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6526,
        6635
      ],
      "op": "ADD",
      "path": "4"
    },
    "2653": {
      "op": "MSTORE"
    },
    "2654": {
      "op": "PUSH1",
      "value": "0x39"
    },
    "2656": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2658": {
      "op": "DUP3"
    },
    "2659": {
      "op": "ADD"
    },
    "2660": {
      "op": "MSTORE"
    },
    "2661": {
      "op": "PUSH32",
      "value": "0x5265676973747279202D20746F67676C65457874656E73696F6E416374697665"
    },
    "2694": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2696": {
      "op": "DUP3"
    },
    "2697": {
      "op": "ADD"
    },
    "2698": {
      "op": "MSTORE"
    },
    "2699": {
      "op": "PUSH32",
      "value": "0x3A2043616C6C657220697320756E617574686F72697A65642E00000000000000"
    },
    "2732": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2734": {
      "op": "DUP3"
    },
    "2735": {
      "op": "ADD"
    },
    "2736": {
      "op": "MSTORE"
    },
    "2737": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2739": {
      "op": "ADD"
    },
    "2740": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6526,
        6635
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x436"
    },
    "2743": {
      "op": "JUMP"
    },
    "2744": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6526,
        6635
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "2745": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6707,
        6708
      ],
      "op": "PUSH1",
      "path": "4",
      "statement": 14,
      "value": "0x0"
    },
    "2747": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2749": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2751": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2753": {
      "op": "SHL"
    },
    "2754": {
      "op": "SUB"
    },
    "2755": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6653,
        6709
      ],
      "op": "AND",
      "path": "4"
    },
    "2756": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6653,
        6663
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x3"
    },
    "2758": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6664,
        6677
      ],
      "op": "DUP4",
      "path": "4"
    },
    "2759": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6664,
        6677
      ],
      "op": "DUP4",
      "path": "4"
    },
    "2760": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6653,
        6678
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "2762": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6653,
        6678
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "2763": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6653,
        6678
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xAD5"
    },
    "2766": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6653,
        6678
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "2767": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6653,
        6678
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "2768": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6653,
        6678
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2769": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6653,
        6678
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1D46"
    },
    "2772": {
      "fn": "Registry.toggleExtensionActive",
      "jump": "i",
      "offset": [
        6653,
        6678
      ],
      "op": "JUMP",
      "path": "4"
    },
    "2773": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6653,
        6678
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "2774": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6653,
        6678
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2775": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6653,
        6678
      ],
      "op": "DUP2",
      "path": "4"
    },
    "2776": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6653,
        6678
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "2777": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6653,
        6678
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "2779": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6653,
        6678
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "2780": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6653,
        6678
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2781": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6653,
        6678
      ],
      "op": "DUP2",
      "path": "4"
    },
    "2782": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6653,
        6678
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2783": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6653,
        6678
      ],
      "op": "SUB",
      "path": "4"
    },
    "2784": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6653,
        6678
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "2786": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6653,
        6678
      ],
      "op": "ADD",
      "path": "4"
    },
    "2787": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6653,
        6678
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2788": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6653,
        6678
      ],
      "op": "KECCAK256",
      "path": "4"
    },
    "2789": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6653,
        6695
      ],
      "op": "SLOAD",
      "path": "4"
    },
    "2790": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2792": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2794": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2796": {
      "op": "SHL"
    },
    "2797": {
      "op": "SUB"
    },
    "2798": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6653,
        6695
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x100"
    },
    "2801": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6653,
        6695
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2802": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6653,
        6695
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "2803": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6653,
        6695
      ],
      "op": "DIV",
      "path": "4"
    },
    "2804": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6653,
        6695
      ],
      "op": "AND",
      "path": "4"
    },
    "2805": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6653,
        6709
      ],
      "op": "EQ",
      "path": "4"
    },
    "2806": {
      "branch": 52,
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6653,
        6709
      ],
      "op": "ISZERO",
      "path": "4"
    },
    "2807": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6645,
        6818
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xB9F"
    },
    "2810": {
      "branch": 52,
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6645,
        6818
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "2811": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6645,
        6818
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "2813": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6645,
        6818
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "2814": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2818": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2820": {
      "op": "SHL"
    },
    "2821": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6645,
        6818
      ],
      "op": "DUP2",
      "path": "4"
    },
    "2822": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6645,
        6818
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "2823": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2825": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6645,
        6818
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "2827": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6645,
        6818
      ],
      "op": "DUP3",
      "path": "4"
    },
    "2828": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6645,
        6818
      ],
      "op": "ADD",
      "path": "4"
    },
    "2829": {
      "op": "MSTORE"
    },
    "2830": {
      "op": "PUSH1",
      "value": "0x68"
    },
    "2832": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2834": {
      "op": "DUP3"
    },
    "2835": {
      "op": "ADD"
    },
    "2836": {
      "op": "MSTORE"
    },
    "2837": {
      "op": "PUSH32",
      "value": "0x5265676973747279202D20746F67676C65457874656E73696F6E416374697665"
    },
    "2870": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2872": {
      "op": "DUP3"
    },
    "2873": {
      "op": "ADD"
    },
    "2874": {
      "op": "MSTORE"
    },
    "2875": {
      "op": "PUSH32",
      "value": "0x3A20457874656E73696F6E20646F6573206E6F742065786973742E2055736520"
    },
    "2908": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2910": {
      "op": "DUP3"
    },
    "2911": {
      "op": "ADD"
    },
    "2912": {
      "op": "MSTORE"
    },
    "2913": {
      "op": "PUSH32",
      "value": "0x66756E6374696F6E202772656769737465724E6577457874656E73696F6E2720"
    },
    "2946": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2948": {
      "op": "DUP3"
    },
    "2949": {
      "op": "ADD"
    },
    "2950": {
      "op": "MSTORE"
    },
    "2951": {
      "op": "PUSH8",
      "value": "0x34B739BA32B0B217"
    },
    "2960": {
      "op": "PUSH1",
      "value": "0xC1"
    },
    "2962": {
      "op": "SHL"
    },
    "2963": {
      "op": "PUSH1",
      "value": "0xA4"
    },
    "2965": {
      "op": "DUP3"
    },
    "2966": {
      "op": "ADD"
    },
    "2967": {
      "op": "MSTORE"
    },
    "2968": {
      "op": "PUSH1",
      "value": "0xC4"
    },
    "2970": {
      "op": "ADD"
    },
    "2971": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6645,
        6818
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x436"
    },
    "2974": {
      "op": "JUMP"
    },
    "2975": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6645,
        6818
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "2976": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6864,
        6874
      ],
      "op": "PUSH1",
      "path": "4",
      "statement": 15,
      "value": "0x3"
    },
    "2978": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6875,
        6888
      ],
      "op": "DUP3",
      "path": "4"
    },
    "2979": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6875,
        6888
      ],
      "op": "DUP3",
      "path": "4"
    },
    "2980": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6864,
        6889
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "2982": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6864,
        6889
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "2983": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6864,
        6889
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xBB1"
    },
    "2986": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6864,
        6889
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "2987": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6864,
        6889
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "2988": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6864,
        6889
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2989": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6864,
        6889
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1D46"
    },
    "2992": {
      "fn": "Registry.toggleExtensionActive",
      "jump": "i",
      "offset": [
        6864,
        6889
      ],
      "op": "JUMP",
      "path": "4"
    },
    "2993": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6864,
        6889
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "2994": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6864,
        6889
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2995": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6864,
        6889
      ],
      "op": "DUP2",
      "path": "4"
    },
    "2996": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6864,
        6889
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "2997": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6864,
        6889
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "2999": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6864,
        6889
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "3000": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6864,
        6889
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3001": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6864,
        6889
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3002": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6864,
        6889
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3003": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6864,
        6889
      ],
      "op": "SUB",
      "path": "4"
    },
    "3004": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6864,
        6889
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "3006": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6864,
        6889
      ],
      "op": "ADD",
      "path": "4"
    },
    "3007": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6864,
        6889
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3008": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6864,
        6889
      ],
      "op": "KECCAK256",
      "path": "4"
    },
    "3009": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6864,
        6896
      ],
      "op": "SLOAD",
      "path": "4"
    },
    "3010": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6864,
        6896
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0xFF"
    },
    "3012": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6864,
        6896
      ],
      "op": "AND",
      "path": "4"
    },
    "3013": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6863,
        6896
      ],
      "op": "ISZERO",
      "path": "4"
    },
    "3014": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6863,
        6896
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3015": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6828,
        6838
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x3"
    },
    "3017": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6828,
        6838
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3018": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6828,
        6853
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xBD6"
    },
    "3021": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6828,
        6853
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3022": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6839,
        6852
      ],
      "op": "DUP6",
      "path": "4"
    },
    "3023": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6839,
        6852
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3024": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6839,
        6852
      ],
      "op": "DUP6",
      "path": "4"
    },
    "3025": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6839,
        6852
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3026": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6828,
        6853
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1D46"
    },
    "3029": {
      "fn": "Registry.toggleExtensionActive",
      "jump": "i",
      "offset": [
        6828,
        6853
      ],
      "op": "JUMP",
      "path": "4"
    },
    "3030": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6828,
        6853
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3031": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6828,
        6853
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3032": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6828,
        6853
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3033": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6828,
        6853
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "3034": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6828,
        6853
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "3036": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6828,
        6853
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "3037": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6828,
        6853
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3038": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6828,
        6853
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3039": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6828,
        6853
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3040": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6828,
        6853
      ],
      "op": "SUB",
      "path": "4"
    },
    "3041": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6828,
        6853
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "3043": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6828,
        6853
      ],
      "op": "ADD",
      "path": "4"
    },
    "3044": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6828,
        6853
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3045": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6828,
        6853
      ],
      "op": "KECCAK256",
      "path": "4"
    },
    "3046": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6828,
        6896
      ],
      "op": "DUP1",
      "path": "4"
    },
    "3047": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6828,
        6896
      ],
      "op": "SLOAD",
      "path": "4"
    },
    "3048": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6828,
        6896
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "3049": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6828,
        6896
      ],
      "op": "ISZERO",
      "path": "4"
    },
    "3050": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6828,
        6896
      ],
      "op": "ISZERO",
      "path": "4"
    },
    "3051": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "3053": {
      "op": "NOT"
    },
    "3054": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6828,
        6896
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3055": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6828,
        6896
      ],
      "op": "SWAP4",
      "path": "4"
    },
    "3056": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6828,
        6896
      ],
      "op": "AND",
      "path": "4"
    },
    "3057": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6828,
        6896
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "3058": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6828,
        6896
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3059": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6828,
        6896
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "3060": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6828,
        6896
      ],
      "op": "OR",
      "path": "4"
    },
    "3061": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6828,
        6896
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3062": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6828,
        6896
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "3063": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6828,
        6896
      ],
      "op": "SSTORE",
      "path": "4"
    },
    "3064": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6912,
        6949
      ],
      "op": "PUSH2",
      "path": "4",
      "statement": 16,
      "value": "0xC04"
    },
    "3067": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6912,
        6949
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3068": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6935,
        6948
      ],
      "op": "DUP4",
      "path": "4"
    },
    "3069": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6935,
        6948
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3070": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6935,
        6948
      ],
      "op": "DUP4",
      "path": "4"
    },
    "3071": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6935,
        6948
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3072": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6912,
        6949
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1D46"
    },
    "3075": {
      "fn": "Registry.toggleExtensionActive",
      "jump": "i",
      "offset": [
        6912,
        6949
      ],
      "op": "JUMP",
      "path": "4"
    },
    "3076": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6912,
        6949
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3077": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6912,
        6949
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "3079": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6912,
        6949
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "3080": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6912,
        6949
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3081": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6912,
        6949
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3082": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6912,
        6949
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3083": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6912,
        6949
      ],
      "op": "SUB",
      "path": "4"
    },
    "3084": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6912,
        6949
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3085": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6912,
        6949
      ],
      "op": "KECCAK256",
      "path": "4"
    },
    "3086": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6912,
        6949
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3087": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6912,
        6949
      ],
      "op": "PUSH32",
      "path": "4",
      "value": "0x83AE5D198DE73BBA6F0F383B1B155DAE2CA94D1D7ECBD63542D0D07635209FDD"
    },
    "3120": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6912,
        6949
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3121": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6912,
        6949
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "3123": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6912,
        6949
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3124": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6912,
        6949
      ],
      "op": "LOG2",
      "path": "4"
    },
    "3125": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6428,
        6956
      ],
      "op": "POP",
      "path": "4"
    },
    "3126": {
      "fn": "Registry.toggleExtensionActive",
      "offset": [
        6428,
        6956
      ],
      "op": "POP",
      "path": "4"
    },
    "3127": {
      "fn": "Registry.toggleExtensionActive",
      "jump": "o",
      "offset": [
        6428,
        6956
      ],
      "op": "JUMP",
      "path": "4"
    },
    "3128": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2667,
        3392
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3129": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2849,
        2888
      ],
      "op": "PUSH2",
      "path": "4",
      "statement": 17,
      "value": "0xC43"
    },
    "3132": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3134": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2877,
        2887
      ],
      "op": "CALLER",
      "path": "4"
    },
    "3135": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2849,
        2856
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xFDE"
    },
    "3138": {
      "fn": "Registry.registerNewCompetition",
      "jump": "i",
      "offset": [
        2849,
        2888
      ],
      "op": "JUMP",
      "path": "4"
    },
    "3139": {
      "branch": 53,
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2849,
        2888
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3140": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2841,
        2951
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xCB5"
    },
    "3143": {
      "branch": 53,
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2841,
        2951
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "3144": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2841,
        2951
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "3146": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2841,
        2951
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "3147": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3151": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3153": {
      "op": "SHL"
    },
    "3154": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2841,
        2951
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3155": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2841,
        2951
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "3156": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3158": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2841,
        2951
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "3160": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2841,
        2951
      ],
      "op": "DUP3",
      "path": "4"
    },
    "3161": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2841,
        2951
      ],
      "op": "ADD",
      "path": "4"
    },
    "3162": {
      "op": "MSTORE"
    },
    "3163": {
      "op": "PUSH1",
      "value": "0x3A"
    },
    "3165": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3167": {
      "op": "DUP3"
    },
    "3168": {
      "op": "ADD"
    },
    "3169": {
      "op": "MSTORE"
    },
    "3170": {
      "op": "PUSH32",
      "value": "0x5265676973747279202D2072656769737465724E6577436F6D7065746974696F"
    },
    "3203": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3205": {
      "op": "DUP3"
    },
    "3206": {
      "op": "ADD"
    },
    "3207": {
      "op": "MSTORE"
    },
    "3208": {
      "op": "PUSH32",
      "value": "0x6E3A2043616C6C657220697320756E617574686F72697A65642E000000000000"
    },
    "3241": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3243": {
      "op": "DUP3"
    },
    "3244": {
      "op": "ADD"
    },
    "3245": {
      "op": "MSTORE"
    },
    "3246": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "3248": {
      "op": "ADD"
    },
    "3249": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2841,
        2951
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x436"
    },
    "3252": {
      "op": "JUMP"
    },
    "3253": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2841,
        2951
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3254": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2970,
        2982
      ],
      "op": "PUSH1",
      "path": "4",
      "statement": 18,
      "value": "0x2"
    },
    "3256": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2983,
        2998
      ],
      "op": "DUP6",
      "path": "4"
    },
    "3257": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2983,
        2998
      ],
      "op": "DUP6",
      "path": "4"
    },
    "3258": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2970,
        2999
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "3260": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2970,
        2999
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "3261": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2970,
        2999
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xCC7"
    },
    "3264": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2970,
        2999
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "3265": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2970,
        2999
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "3266": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2970,
        2999
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3267": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2970,
        2999
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1D46"
    },
    "3270": {
      "fn": "Registry.registerNewCompetition",
      "jump": "i",
      "offset": [
        2970,
        2999
      ],
      "op": "JUMP",
      "path": "4"
    },
    "3271": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2970,
        2999
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3272": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2970,
        2999
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3273": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2970,
        2999
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3274": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2970,
        2999
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "3275": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2970,
        2999
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "3277": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2970,
        2999
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "3278": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2970,
        2999
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3279": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2970,
        2999
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3280": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2970,
        2999
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3281": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2970,
        2999
      ],
      "op": "SUB",
      "path": "4"
    },
    "3282": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2970,
        2999
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "3284": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2970,
        2999
      ],
      "op": "ADD",
      "path": "4"
    },
    "3285": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2970,
        2999
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3286": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2970,
        2999
      ],
      "op": "KECCAK256",
      "path": "4"
    },
    "3287": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2970,
        3006
      ],
      "op": "SLOAD",
      "path": "4"
    },
    "3288": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2970,
        3006
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0xFF"
    },
    "3290": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2970,
        3006
      ],
      "op": "AND",
      "path": "4"
    },
    "3291": {
      "branch": 54,
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2969,
        3006
      ],
      "op": "ISZERO",
      "path": "4"
    },
    "3292": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2961,
        3073
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xD4D"
    },
    "3295": {
      "branch": 54,
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2961,
        3073
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "3296": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2961,
        3073
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "3298": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2961,
        3073
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "3299": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3303": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3305": {
      "op": "SHL"
    },
    "3306": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2961,
        3073
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3307": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2961,
        3073
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "3308": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3310": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2961,
        3073
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "3312": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2961,
        3073
      ],
      "op": "DUP3",
      "path": "4"
    },
    "3313": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2961,
        3073
      ],
      "op": "ADD",
      "path": "4"
    },
    "3314": {
      "op": "MSTORE"
    },
    "3315": {
      "op": "PUSH1",
      "value": "0x3E"
    },
    "3317": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3319": {
      "op": "DUP3"
    },
    "3320": {
      "op": "ADD"
    },
    "3321": {
      "op": "MSTORE"
    },
    "3322": {
      "op": "PUSH32",
      "value": "0x5265676973747279202D2072656769737465724E6577436F6D7065746974696F"
    },
    "3355": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3357": {
      "op": "DUP3"
    },
    "3358": {
      "op": "ADD"
    },
    "3359": {
      "op": "MSTORE"
    },
    "3360": {
      "op": "PUSH32",
      "value": "0x6E3A20436F6D7065746974696F6E20616C7265616479206578697374732E0000"
    },
    "3393": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3395": {
      "op": "DUP3"
    },
    "3396": {
      "op": "ADD"
    },
    "3397": {
      "op": "MSTORE"
    },
    "3398": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "3400": {
      "op": "ADD"
    },
    "3401": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2961,
        3073
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x436"
    },
    "3404": {
      "op": "JUMP"
    },
    "3405": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2961,
        3073
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3406": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3115,
        3230
      ],
      "op": "PUSH1",
      "path": "4",
      "statement": 19,
      "value": "0x40"
    },
    "3408": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3115,
        3230
      ],
      "op": "DUP1",
      "path": "4"
    },
    "3409": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3115,
        3230
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "3410": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3115,
        3230
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x80"
    },
    "3412": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3115,
        3230
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3413": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3115,
        3230
      ],
      "op": "ADD",
      "path": "4"
    },
    "3414": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3115,
        3230
      ],
      "op": "DUP3",
      "path": "4"
    },
    "3415": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3115,
        3230
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "3416": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3128,
        3132
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x1"
    },
    "3418": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3115,
        3230
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3419": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3115,
        3230
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "3420": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3422": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3424": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3426": {
      "op": "SHL"
    },
    "3427": {
      "op": "SUB"
    },
    "3428": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3115,
        3230
      ],
      "op": "DUP1",
      "path": "4"
    },
    "3429": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3115,
        3230
      ],
      "op": "DUP7",
      "path": "4"
    },
    "3430": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3115,
        3230
      ],
      "op": "AND",
      "path": "4"
    },
    "3431": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3115,
        3230
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "3433": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3115,
        3230
      ],
      "op": "DUP4",
      "path": "4"
    },
    "3434": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3115,
        3230
      ],
      "op": "ADD",
      "path": "4"
    },
    "3435": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3115,
        3230
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "3436": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3115,
        3230
      ],
      "op": "DUP5",
      "path": "4"
    },
    "3437": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3115,
        3230
      ],
      "op": "AND",
      "path": "4"
    },
    "3438": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3115,
        3230
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3439": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3115,
        3230
      ],
      "op": "DUP4",
      "path": "4"
    },
    "3440": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3115,
        3230
      ],
      "op": "ADD",
      "path": "4"
    },
    "3441": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3115,
        3230
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "3442": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3115,
        3230
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x60"
    },
    "3444": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3115,
        3230
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3445": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3115,
        3230
      ],
      "op": "ADD",
      "path": "4"
    },
    "3446": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3115,
        3230
      ],
      "op": "DUP4",
      "path": "4"
    },
    "3447": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3115,
        3230
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3448": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3115,
        3230
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "3449": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3112
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3450": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3112
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "3451": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3095
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x2"
    },
    "3453": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3095
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3454": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3112
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xD8A"
    },
    "3457": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3112
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3458": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3096,
        3111
      ],
      "op": "DUP9",
      "path": "4"
    },
    "3459": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3096,
        3111
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3460": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3096,
        3111
      ],
      "op": "DUP9",
      "path": "4"
    },
    "3461": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3096,
        3111
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3462": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3112
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1D46"
    },
    "3465": {
      "fn": "Registry.registerNewCompetition",
      "jump": "i",
      "offset": [
        3083,
        3112
      ],
      "op": "JUMP",
      "path": "4"
    },
    "3466": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3112
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3467": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3112
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3468": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3112
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3469": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3112
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "3470": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3112
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "3472": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3112
      ],
      "op": "DUP1",
      "path": "4"
    },
    "3473": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3112
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "3474": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3112
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "3476": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3112
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "3477": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3112
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3478": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3112
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3479": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3112
      ],
      "op": "SUB",
      "path": "4"
    },
    "3480": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3112
      ],
      "op": "DUP4",
      "path": "4"
    },
    "3481": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3112
      ],
      "op": "ADD",
      "path": "4"
    },
    "3482": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3112
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3483": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3112
      ],
      "op": "KECCAK256",
      "path": "4"
    },
    "3484": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "DUP4",
      "path": "4"
    },
    "3485": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "3486": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3487": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "SLOAD",
      "path": "4"
    },
    "3488": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "SWAP4",
      "path": "4"
    },
    "3489": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "DUP6",
      "path": "4"
    },
    "3490": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "ADD",
      "path": "4"
    },
    "3491": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "3492": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3494": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3496": {
      "op": "PUSH1",
      "value": "0xA8"
    },
    "3498": {
      "op": "SHL"
    },
    "3499": {
      "op": "SUB"
    },
    "3500": {
      "op": "NOT"
    },
    "3501": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3502": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "SWAP5",
      "path": "4"
    },
    "3503": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "AND",
      "path": "4"
    },
    "3504": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3505": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "ISZERO",
      "path": "4"
    },
    "3506": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "ISZERO",
      "path": "4"
    },
    "3507": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "3510": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3512": {
      "op": "PUSH1",
      "value": "0xA8"
    },
    "3514": {
      "op": "SHL"
    },
    "3515": {
      "op": "SUB"
    },
    "3516": {
      "op": "NOT"
    },
    "3517": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "AND",
      "path": "4"
    },
    "3518": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "OR",
      "path": "4"
    },
    "3519": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x100"
    },
    "3522": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3524": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3526": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3528": {
      "op": "SHL"
    },
    "3529": {
      "op": "SUB"
    },
    "3530": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "SWAP5",
      "path": "4"
    },
    "3531": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "DUP6",
      "path": "4"
    },
    "3532": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "AND",
      "path": "4"
    },
    "3533": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "MUL",
      "path": "4"
    },
    "3534": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "OR",
      "path": "4"
    },
    "3535": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3536": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "SSTORE",
      "path": "4"
    },
    "3537": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3538": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "DUP4",
      "path": "4"
    },
    "3539": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "ADD",
      "path": "4"
    },
    "3540": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "3541": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3543": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "DUP1",
      "path": "4"
    },
    "3544": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "DUP4",
      "path": "4"
    },
    "3545": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "ADD",
      "path": "4"
    },
    "3546": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "DUP1",
      "path": "4"
    },
    "3547": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "SLOAD",
      "path": "4"
    },
    "3548": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3550": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3552": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3554": {
      "op": "SHL"
    },
    "3555": {
      "op": "SUB"
    },
    "3556": {
      "op": "NOT"
    },
    "3557": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "AND",
      "path": "4"
    },
    "3558": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "3559": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3560": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "SWAP5",
      "path": "4"
    },
    "3561": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "AND",
      "path": "4"
    },
    "3562": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "3563": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3564": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "3565": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "OR",
      "path": "4"
    },
    "3566": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3567": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "3568": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "SSTORE",
      "path": "4"
    },
    "3569": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x60"
    },
    "3571": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3572": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "3573": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "ADD",
      "path": "4"
    },
    "3574": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "3575": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x2"
    },
    "3577": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3578": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "3579": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "ADD",
      "path": "4"
    },
    "3580": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "3581": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3582": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "3583": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3083,
        3230
      ],
      "op": "SSTORE",
      "path": "4"
    },
    "3584": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3240,
        3257
      ],
      "op": "PUSH1",
      "path": "4",
      "statement": 20,
      "value": "0x4"
    },
    "3586": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3240,
        3279
      ],
      "op": "DUP1",
      "path": "4"
    },
    "3587": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3240,
        3279
      ],
      "op": "SLOAD",
      "path": "4"
    },
    "3588": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3240,
        3279
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "3589": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3240,
        3279
      ],
      "op": "DUP3",
      "path": "4"
    },
    "3590": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3240,
        3279
      ],
      "op": "ADD",
      "path": "4"
    },
    "3591": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3240,
        3279
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3592": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3240,
        3279
      ],
      "op": "SSTORE",
      "path": "4"
    },
    "3593": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3595": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3240,
        3279
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "3596": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3240,
        3279
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xE38"
    },
    "3599": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3240,
        3279
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3600": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3240,
        3279
      ],
      "op": "PUSH32",
      "path": "4",
      "value": "0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B"
    },
    "3633": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3240,
        3279
      ],
      "op": "ADD",
      "path": "4"
    },
    "3634": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3263,
        3278
      ],
      "op": "DUP7",
      "path": "4"
    },
    "3635": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3263,
        3278
      ],
      "op": "DUP7",
      "path": "4"
    },
    "3636": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3240,
        3279
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1A1D"
    },
    "3639": {
      "fn": "Registry.registerNewCompetition",
      "jump": "i",
      "offset": [
        3240,
        3279
      ],
      "op": "JUMP",
      "path": "4"
    },
    "3640": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3240,
        3279
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3641": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3240,
        3279
      ],
      "op": "POP",
      "path": "4"
    },
    "3642": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3357,
        3369
      ],
      "op": "DUP2",
      "path": "4",
      "statement": 21
    },
    "3643": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3645": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3647": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3649": {
      "op": "SHL"
    },
    "3650": {
      "op": "SUB"
    },
    "3651": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3295,
        3385
      ],
      "op": "AND",
      "path": "4"
    },
    "3652": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3337,
        3355
      ],
      "op": "DUP4",
      "path": "4"
    },
    "3653": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3655": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3657": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3659": {
      "op": "SHL"
    },
    "3660": {
      "op": "SUB"
    },
    "3661": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3295,
        3385
      ],
      "op": "AND",
      "path": "4"
    },
    "3662": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3320,
        3335
      ],
      "op": "DUP7",
      "path": "4"
    },
    "3663": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3320,
        3335
      ],
      "op": "DUP7",
      "path": "4"
    },
    "3664": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3295,
        3385
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "3666": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3295,
        3385
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "3667": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3295,
        3385
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xE5D"
    },
    "3670": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3295,
        3385
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "3671": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3295,
        3385
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "3672": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3295,
        3385
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3673": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3295,
        3385
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1D46"
    },
    "3676": {
      "fn": "Registry.registerNewCompetition",
      "jump": "i",
      "offset": [
        3295,
        3385
      ],
      "op": "JUMP",
      "path": "4"
    },
    "3677": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3295,
        3385
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3678": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3295,
        3385
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "3680": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3295,
        3385
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "3681": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3295,
        3385
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3682": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3295,
        3385
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3683": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3295,
        3385
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3684": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3295,
        3385
      ],
      "op": "SUB",
      "path": "4"
    },
    "3685": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3295,
        3385
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3686": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3295,
        3385
      ],
      "op": "KECCAK256",
      "path": "4"
    },
    "3687": {
      "op": "DUP5"
    },
    "3688": {
      "op": "DUP3"
    },
    "3689": {
      "op": "MSTORE"
    },
    "3690": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3295,
        3385
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3691": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3295,
        3385
      ],
      "op": "PUSH32",
      "path": "4",
      "value": "0xD90EDE5D677AD2A14BD589A04C16586098F2F5B09D36BF775FB413C5C7FF6A98"
    },
    "3724": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3295,
        3385
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3725": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3727": {
      "op": "ADD"
    },
    "3728": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3295,
        3385
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "3730": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3295,
        3385
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "3731": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3295,
        3385
      ],
      "op": "DUP1",
      "path": "4"
    },
    "3732": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3295,
        3385
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "3733": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3295,
        3385
      ],
      "op": "SUB",
      "path": "4"
    },
    "3734": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3295,
        3385
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3735": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        3295,
        3385
      ],
      "op": "LOG4",
      "path": "4"
    },
    "3736": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2667,
        3392
      ],
      "op": "POP",
      "path": "4"
    },
    "3737": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2667,
        3392
      ],
      "op": "POP",
      "path": "4"
    },
    "3738": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2667,
        3392
      ],
      "op": "POP",
      "path": "4"
    },
    "3739": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2667,
        3392
      ],
      "op": "POP",
      "path": "4"
    },
    "3740": {
      "fn": "Registry.registerNewCompetition",
      "offset": [
        2667,
        3392
      ],
      "op": "POP",
      "path": "4"
    },
    "3741": {
      "fn": "Registry.registerNewCompetition",
      "jump": "o",
      "offset": [
        2667,
        3392
      ],
      "op": "JUMP",
      "path": "4"
    },
    "3742": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2438,
        2661
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3743": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2544,
        2571
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "3745": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2609,
        2619
      ],
      "op": "PUSH1",
      "path": "4",
      "statement": 22,
      "value": "0x3"
    },
    "3747": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2620,
        2633
      ],
      "op": "DUP4",
      "path": "4"
    },
    "3748": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2620,
        2633
      ],
      "op": "DUP4",
      "path": "4"
    },
    "3749": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2609,
        2634
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "3751": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2609,
        2634
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "3752": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2609,
        2634
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xEB2"
    },
    "3755": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2609,
        2634
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "3756": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2609,
        2634
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "3757": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2609,
        2634
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3758": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2609,
        2634
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1D46"
    },
    "3761": {
      "fn": "Registry.getExtensionRulesLocation",
      "jump": "i",
      "offset": [
        2609,
        2634
      ],
      "op": "JUMP",
      "path": "4"
    },
    "3762": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2609,
        2634
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3763": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2609,
        2634
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3764": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2609,
        2634
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3765": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2609,
        2634
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "3766": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2609,
        2634
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "3768": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2609,
        2634
      ],
      "op": "ADD",
      "path": "4"
    },
    "3769": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2609,
        2634
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "3771": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2609,
        2634
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "3772": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2609,
        2634
      ],
      "op": "DUP1",
      "path": "4"
    },
    "3773": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2609,
        2634
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "3774": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2609,
        2634
      ],
      "op": "SUB",
      "path": "4"
    },
    "3775": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2609,
        2634
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3776": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2609,
        2634
      ],
      "op": "KECCAK256",
      "path": "4"
    },
    "3777": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2609,
        2654
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x1"
    },
    "3779": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2609,
        2654
      ],
      "op": "ADD",
      "path": "4"
    },
    "3780": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2609,
        2654
      ],
      "op": "SLOAD",
      "path": "4"
    },
    "3781": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2587,
        2654
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3782": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2587,
        2654
      ],
      "op": "POP",
      "path": "4"
    },
    "3783": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2438,
        2661
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "3784": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2438,
        2661
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "3785": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2438,
        2661
      ],
      "op": "POP",
      "path": "4"
    },
    "3786": {
      "fn": "Registry.getExtensionRulesLocation",
      "offset": [
        2438,
        2661
      ],
      "op": "POP",
      "path": "4"
    },
    "3787": {
      "fn": "Registry.getExtensionRulesLocation",
      "jump": "o",
      "offset": [
        2438,
        2661
      ],
      "op": "JUMP",
      "path": "4"
    },
    "3788": {
      "fn": "Registry.getCompetitionAddress",
      "offset": [
        1254,
        1476
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3789": {
      "fn": "Registry.getCompetitionAddress",
      "offset": [
        1358,
        1384
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "3791": {
      "fn": "Registry.getCompetitionAddress",
      "offset": [
        1421,
        1433
      ],
      "op": "PUSH1",
      "path": "4",
      "statement": 23,
      "value": "0x2"
    },
    "3793": {
      "fn": "Registry.getCompetitionAddress",
      "offset": [
        1434,
        1449
      ],
      "op": "DUP4",
      "path": "4"
    },
    "3794": {
      "fn": "Registry.getCompetitionAddress",
      "offset": [
        1434,
        1449
      ],
      "op": "DUP4",
      "path": "4"
    },
    "3795": {
      "fn": "Registry.getCompetitionAddress",
      "offset": [
        1421,
        1450
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "3797": {
      "fn": "Registry.getCompetitionAddress",
      "offset": [
        1421,
        1450
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "3798": {
      "fn": "Registry.getCompetitionAddress",
      "offset": [
        1421,
        1450
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x5D9"
    },
    "3801": {
      "fn": "Registry.getCompetitionAddress",
      "offset": [
        1421,
        1450
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "3802": {
      "fn": "Registry.getCompetitionAddress",
      "offset": [
        1421,
        1450
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "3803": {
      "fn": "Registry.getCompetitionAddress",
      "offset": [
        1421,
        1450
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3804": {
      "fn": "Registry.getCompetitionAddress",
      "offset": [
        1421,
        1450
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1D46"
    },
    "3807": {
      "fn": "Registry.getCompetitionAddress",
      "jump": "i",
      "offset": [
        1421,
        1450
      ],
      "op": "JUMP",
      "path": "4"
    },
    "3808": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1066,
        1248
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3809": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1169,
        1180
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "3811": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1205,
        1217
      ],
      "op": "PUSH1",
      "path": "4",
      "statement": 24,
      "value": "0x2"
    },
    "3813": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1218,
        1233
      ],
      "op": "DUP4",
      "path": "4"
    },
    "3814": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1218,
        1233
      ],
      "op": "DUP4",
      "path": "4"
    },
    "3815": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1205,
        1234
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "3817": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1205,
        1234
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "3818": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1205,
        1234
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xEF4"
    },
    "3821": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1205,
        1234
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "3822": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1205,
        1234
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "3823": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1205,
        1234
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3824": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1205,
        1234
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1D46"
    },
    "3827": {
      "fn": "Registry.getCompetitionActive",
      "jump": "i",
      "offset": [
        1205,
        1234
      ],
      "op": "JUMP",
      "path": "4"
    },
    "3828": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1205,
        1234
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3829": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1205,
        1234
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3830": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1205,
        1234
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3831": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1205,
        1234
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "3832": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1205,
        1234
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "3834": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1205,
        1234
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "3835": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1205,
        1234
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3836": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1205,
        1234
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3837": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1205,
        1234
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3838": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1205,
        1234
      ],
      "op": "SUB",
      "path": "4"
    },
    "3839": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1205,
        1234
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "3841": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1205,
        1234
      ],
      "op": "ADD",
      "path": "4"
    },
    "3842": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1205,
        1234
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3843": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1205,
        1234
      ],
      "op": "KECCAK256",
      "path": "4"
    },
    "3844": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1205,
        1241
      ],
      "op": "SLOAD",
      "path": "4"
    },
    "3845": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1205,
        1241
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0xFF"
    },
    "3847": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1205,
        1241
      ],
      "op": "AND",
      "path": "4"
    },
    "3848": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1205,
        1241
      ],
      "op": "SWAP4",
      "path": "4"
    },
    "3849": {
      "fn": "Registry.getCompetitionActive",
      "offset": [
        1066,
        1248
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "3850": {
      "op": "POP"
    },
    "3851": {
      "op": "POP"
    },
    "3852": {
      "op": "POP"
    },
    "3853": {
      "fn": "Registry.getCompetitionActive",
      "jump": "o",
      "offset": [
        1066,
        1248
      ],
      "op": "JUMP",
      "path": "4"
    },
    "3854": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        740,
        901
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3855": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        810,
        842
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x60"
    },
    "3857": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        877,
        894
      ],
      "op": "PUSH1",
      "path": "4",
      "statement": 25,
      "value": "0x4"
    },
    "3859": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "DUP1",
      "path": "4"
    },
    "3860": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "SLOAD",
      "path": "4"
    },
    "3861": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "DUP1",
      "path": "4"
    },
    "3862": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "3864": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "MUL",
      "path": "4"
    },
    "3865": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "3867": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "ADD",
      "path": "4"
    },
    "3868": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "3870": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "3871": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3872": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3873": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "ADD",
      "path": "4"
    },
    "3874": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "3876": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "3877": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "DUP1",
      "path": "4"
    },
    "3878": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "3879": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "3880": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3881": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3882": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3883": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "3884": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "3886": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "ADD",
      "path": "4"
    },
    "3887": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "3889": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3890": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3891": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "DUP3",
      "path": "4"
    },
    "3892": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "DUP3",
      "path": "4"
    },
    "3893": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "LT",
      "path": "4"
    },
    "3894": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "ISZERO",
      "path": "4"
    },
    "3895": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x6CF"
    },
    "3898": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "3899": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "DUP4",
      "path": "4"
    },
    "3900": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "DUP3",
      "path": "4"
    },
    "3901": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3902": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "3904": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "3905": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "3907": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "3909": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "KECCAK256",
      "path": "4"
    },
    "3910": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "ADD",
      "path": "4"
    },
    "3911": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "DUP1",
      "path": "4"
    },
    "3912": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "SLOAD",
      "path": "4"
    },
    "3913": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xF51"
    },
    "3916": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3917": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1DEE"
    },
    "3920": {
      "fn": "Registry.getCompetitionList",
      "jump": "i",
      "offset": [
        858,
        894
      ],
      "op": "JUMP",
      "path": "4"
    },
    "3921": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3922": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "DUP1",
      "path": "4"
    },
    "3923": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x1F"
    },
    "3925": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "ADD",
      "path": "4"
    },
    "3926": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "3928": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "DUP1",
      "path": "4"
    },
    "3929": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "3930": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "DIV",
      "path": "4"
    },
    "3931": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "MUL",
      "path": "4"
    },
    "3932": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "3934": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "ADD",
      "path": "4"
    },
    "3935": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "3937": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "3938": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3939": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3940": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "ADD",
      "path": "4"
    },
    "3941": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "3943": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "3944": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "DUP1",
      "path": "4"
    },
    "3945": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "3946": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "3947": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3948": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3949": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3950": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "3951": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "3953": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "ADD",
      "path": "4"
    },
    "3954": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "DUP3",
      "path": "4"
    },
    "3955": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "DUP1",
      "path": "4"
    },
    "3956": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "SLOAD",
      "path": "4"
    },
    "3957": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xF7D"
    },
    "3960": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3961": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1DEE"
    },
    "3964": {
      "fn": "Registry.getCompetitionList",
      "jump": "i",
      "offset": [
        858,
        894
      ],
      "op": "JUMP",
      "path": "4"
    },
    "3965": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3966": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "DUP1",
      "path": "4"
    },
    "3967": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "ISZERO",
      "path": "4"
    },
    "3968": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xFCA"
    },
    "3971": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "3972": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "DUP1",
      "path": "4"
    },
    "3973": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x1F"
    },
    "3975": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "LT",
      "path": "4"
    },
    "3976": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xF9F"
    },
    "3979": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "3980": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x100"
    },
    "3983": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "DUP1",
      "path": "4"
    },
    "3984": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "DUP4",
      "path": "4"
    },
    "3985": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "SLOAD",
      "path": "4"
    },
    "3986": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "DIV",
      "path": "4"
    },
    "3987": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "MUL",
      "path": "4"
    },
    "3988": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "DUP4",
      "path": "4"
    },
    "3989": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "3990": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "3991": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "3993": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "ADD",
      "path": "4"
    },
    "3994": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "3995": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xFCA"
    },
    "3998": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "JUMP",
      "path": "4"
    },
    "3999": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "4000": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "DUP3",
      "path": "4"
    },
    "4001": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "ADD",
      "path": "4"
    },
    "4002": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "4003": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "4004": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "4006": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "4007": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "4009": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "4011": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "KECCAK256",
      "path": "4"
    },
    "4012": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "4013": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "4014": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "DUP2",
      "path": "4"
    },
    "4015": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "SLOAD",
      "path": "4"
    },
    "4016": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "DUP2",
      "path": "4"
    },
    "4017": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "4018": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "4019": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x1"
    },
    "4021": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "ADD",
      "path": "4"
    },
    "4022": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "4023": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "4025": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "ADD",
      "path": "4"
    },
    "4026": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "DUP1",
      "path": "4"
    },
    "4027": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "DUP4",
      "path": "4"
    },
    "4028": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "GT",
      "path": "4"
    },
    "4029": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xFAD"
    },
    "4032": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "4033": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "DUP3",
      "path": "4"
    },
    "4034": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "4035": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "SUB",
      "path": "4"
    },
    "4036": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x1F"
    },
    "4038": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "AND",
      "path": "4"
    },
    "4039": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "DUP3",
      "path": "4"
    },
    "4040": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "ADD",
      "path": "4"
    },
    "4041": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "4042": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "4043": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "POP",
      "path": "4"
    },
    "4044": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "POP",
      "path": "4"
    },
    "4045": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "POP",
      "path": "4"
    },
    "4046": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "POP",
      "path": "4"
    },
    "4047": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "POP",
      "path": "4"
    },
    "4048": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "DUP2",
      "path": "4"
    },
    "4049": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "4050": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "4052": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "ADD",
      "path": "4"
    },
    "4053": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "4054": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x1"
    },
    "4056": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "ADD",
      "path": "4"
    },
    "4057": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "4058": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xF32"
    },
    "4061": {
      "fn": "Registry.getCompetitionList",
      "offset": [
        858,
        894
      ],
      "op": "JUMP",
      "path": "4"
    },
    "4062": {
      "op": "JUMPDEST"
    },
    "4063": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4065": {
      "op": "SWAP2"
    },
    "4066": {
      "op": "DUP3"
    },
    "4067": {
      "op": "MSTORE"
    },
    "4068": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4070": {
      "op": "DUP3"
    },
    "4071": {
      "op": "DUP2"
    },
    "4072": {
      "op": "MSTORE"
    },
    "4073": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4075": {
      "op": "DUP1"
    },
    "4076": {
      "op": "DUP5"
    },
    "4077": {
      "op": "KECCAK256"
    },
    "4078": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4080": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4082": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4084": {
      "op": "SHL"
    },
    "4085": {
      "op": "SUB"
    },
    "4086": {
      "op": "SWAP4"
    },
    "4087": {
      "op": "SWAP1"
    },
    "4088": {
      "op": "SWAP4"
    },
    "4089": {
      "op": "AND"
    },
    "4090": {
      "op": "DUP5"
    },
    "4091": {
      "op": "MSTORE"
    },
    "4092": {
      "op": "SWAP2"
    },
    "4093": {
      "op": "SWAP1"
    },
    "4094": {
      "op": "MSTORE"
    },
    "4095": {
      "op": "SWAP1"
    },
    "4096": {
      "op": "KECCAK256"
    },
    "4097": {
      "op": "SLOAD"
    },
    "4098": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "4100": {
      "op": "AND"
    },
    "4101": {
      "op": "SWAP1"
    },
    "4102": {
      "jump": "o",
      "op": "JUMP"
    },
    "4103": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        3962,
        4660
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "4104": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4096,
        4135
      ],
      "op": "PUSH2",
      "path": "4",
      "statement": 26,
      "value": "0x1012"
    },
    "4107": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4109": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4124,
        4134
      ],
      "op": "CALLER",
      "path": "4"
    },
    "4110": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4096,
        4103
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xFDE"
    },
    "4113": {
      "fn": "Registry.changeCompetitionVault",
      "jump": "i",
      "offset": [
        4096,
        4135
      ],
      "op": "JUMP",
      "path": "4"
    },
    "4114": {
      "branch": 55,
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4096,
        4135
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "4115": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4088,
        4198
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1084"
    },
    "4118": {
      "branch": 55,
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4088,
        4198
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "4119": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4088,
        4198
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "4121": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4088,
        4198
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "4122": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4126": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4128": {
      "op": "SHL"
    },
    "4129": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4088,
        4198
      ],
      "op": "DUP2",
      "path": "4"
    },
    "4130": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4088,
        4198
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "4131": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4133": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4088,
        4198
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "4135": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4088,
        4198
      ],
      "op": "DUP3",
      "path": "4"
    },
    "4136": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4088,
        4198
      ],
      "op": "ADD",
      "path": "4"
    },
    "4137": {
      "op": "MSTORE"
    },
    "4138": {
      "op": "PUSH1",
      "value": "0x3A"
    },
    "4140": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4142": {
      "op": "DUP3"
    },
    "4143": {
      "op": "ADD"
    },
    "4144": {
      "op": "MSTORE"
    },
    "4145": {
      "op": "PUSH32",
      "value": "0x5265676973747279202D206368616E6765436F6D7065746974696F6E5661756C"
    },
    "4178": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "4180": {
      "op": "DUP3"
    },
    "4181": {
      "op": "ADD"
    },
    "4182": {
      "op": "MSTORE"
    },
    "4183": {
      "op": "PUSH32",
      "value": "0x743A2043616C6C657220697320756E617574686F72697A65642E000000000000"
    },
    "4216": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "4218": {
      "op": "DUP3"
    },
    "4219": {
      "op": "ADD"
    },
    "4220": {
      "op": "MSTORE"
    },
    "4221": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "4223": {
      "op": "ADD"
    },
    "4224": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4088,
        4198
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x436"
    },
    "4227": {
      "op": "JUMP"
    },
    "4228": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4088,
        4198
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "4229": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4276,
        4277
      ],
      "op": "PUSH1",
      "path": "4",
      "statement": 27,
      "value": "0x0"
    },
    "4231": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4233": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4235": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4237": {
      "op": "SHL"
    },
    "4238": {
      "op": "SUB"
    },
    "4239": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4216,
        4278
      ],
      "op": "AND",
      "path": "4"
    },
    "4240": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4216,
        4228
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x2"
    },
    "4242": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4229,
        4244
      ],
      "op": "DUP5",
      "path": "4"
    },
    "4243": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4229,
        4244
      ],
      "op": "DUP5",
      "path": "4"
    },
    "4244": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4216,
        4245
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "4246": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4216,
        4245
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "4247": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4216,
        4245
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x10A1"
    },
    "4250": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4216,
        4245
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "4251": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4216,
        4245
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "4252": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4216,
        4245
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "4253": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4216,
        4245
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1D46"
    },
    "4256": {
      "fn": "Registry.changeCompetitionVault",
      "jump": "i",
      "offset": [
        4216,
        4245
      ],
      "op": "JUMP",
      "path": "4"
    },
    "4257": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4216,
        4245
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "4258": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4216,
        4245
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "4259": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4216,
        4245
      ],
      "op": "DUP2",
      "path": "4"
    },
    "4260": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4216,
        4245
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "4261": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4216,
        4245
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "4263": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4216,
        4245
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "4264": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4216,
        4245
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "4265": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4216,
        4245
      ],
      "op": "DUP2",
      "path": "4"
    },
    "4266": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4216,
        4245
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "4267": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4216,
        4245
      ],
      "op": "SUB",
      "path": "4"
    },
    "4268": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4216,
        4245
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "4270": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4216,
        4245
      ],
      "op": "ADD",
      "path": "4"
    },
    "4271": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4216,
        4245
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "4272": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4216,
        4245
      ],
      "op": "KECCAK256",
      "path": "4"
    },
    "4273": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4216,
        4264
      ],
      "op": "SLOAD",
      "path": "4"
    },
    "4274": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4276": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4278": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4280": {
      "op": "SHL"
    },
    "4281": {
      "op": "SUB"
    },
    "4282": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4216,
        4264
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x100"
    },
    "4285": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4216,
        4264
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "4286": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4216,
        4264
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "4287": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4216,
        4264
      ],
      "op": "DIV",
      "path": "4"
    },
    "4288": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4216,
        4264
      ],
      "op": "AND",
      "path": "4"
    },
    "4289": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4216,
        4278
      ],
      "op": "EQ",
      "path": "4"
    },
    "4290": {
      "branch": 56,
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4216,
        4278
      ],
      "op": "ISZERO",
      "path": "4"
    },
    "4291": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4208,
        4392
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1170"
    },
    "4294": {
      "branch": 56,
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4208,
        4392
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "4295": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4208,
        4392
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "4297": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4208,
        4392
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "4298": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4302": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4304": {
      "op": "SHL"
    },
    "4305": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4208,
        4392
      ],
      "op": "DUP2",
      "path": "4"
    },
    "4306": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4208,
        4392
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "4307": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4309": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4208,
        4392
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "4311": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4208,
        4392
      ],
      "op": "DUP3",
      "path": "4"
    },
    "4312": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4208,
        4392
      ],
      "op": "ADD",
      "path": "4"
    },
    "4313": {
      "op": "MSTORE"
    },
    "4314": {
      "op": "PUSH1",
      "value": "0x6D"
    },
    "4316": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4318": {
      "op": "DUP3"
    },
    "4319": {
      "op": "ADD"
    },
    "4320": {
      "op": "MSTORE"
    },
    "4321": {
      "op": "PUSH32",
      "value": "0x5265676973747279202D206368616E6765436F6D7065746974696F6E5661756C"
    },
    "4354": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "4356": {
      "op": "DUP3"
    },
    "4357": {
      "op": "ADD"
    },
    "4358": {
      "op": "MSTORE"
    },
    "4359": {
      "op": "PUSH32",
      "value": "0x743A20436F6D7065746974696F6E20646F6573206E6F742065786973742E2055"
    },
    "4392": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "4394": {
      "op": "DUP3"
    },
    "4395": {
      "op": "ADD"
    },
    "4396": {
      "op": "MSTORE"
    },
    "4397": {
      "op": "PUSH32",
      "value": "0x73652066756E6374696F6E202772656769737465724E6577436F6D7065746974"
    },
    "4430": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "4432": {
      "op": "DUP3"
    },
    "4433": {
      "op": "ADD"
    },
    "4434": {
      "op": "MSTORE"
    },
    "4435": {
      "op": "PUSH13",
      "value": "0x34B7B7139034B739BA32B0B217"
    },
    "4449": {
      "op": "PUSH1",
      "value": "0x99"
    },
    "4451": {
      "op": "SHL"
    },
    "4452": {
      "op": "PUSH1",
      "value": "0xA4"
    },
    "4454": {
      "op": "DUP3"
    },
    "4455": {
      "op": "ADD"
    },
    "4456": {
      "op": "MSTORE"
    },
    "4457": {
      "op": "PUSH1",
      "value": "0xC4"
    },
    "4459": {
      "op": "ADD"
    },
    "4460": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4208,
        4392
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x436"
    },
    "4463": {
      "op": "JUMP"
    },
    "4464": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4208,
        4392
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "4465": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4467": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4469": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4471": {
      "op": "SHL"
    },
    "4472": {
      "op": "SUB"
    },
    "4473": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4410,
        4439
      ],
      "op": "DUP2",
      "path": "4",
      "statement": 28
    },
    "4474": {
      "branch": 57,
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4410,
        4439
      ],
      "op": "AND",
      "path": "4"
    },
    "4475": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4402,
        4503
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x11EC"
    },
    "4478": {
      "branch": 57,
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4402,
        4503
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "4479": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4402,
        4503
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "4481": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4402,
        4503
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "4482": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4486": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4488": {
      "op": "SHL"
    },
    "4489": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4402,
        4503
      ],
      "op": "DUP2",
      "path": "4"
    },
    "4490": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4402,
        4503
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "4491": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4493": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4402,
        4503
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "4495": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4402,
        4503
      ],
      "op": "DUP3",
      "path": "4"
    },
    "4496": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4402,
        4503
      ],
      "op": "ADD",
      "path": "4"
    },
    "4497": {
      "op": "MSTORE"
    },
    "4498": {
      "op": "PUSH1",
      "value": "0x3B"
    },
    "4500": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4502": {
      "op": "DUP3"
    },
    "4503": {
      "op": "ADD"
    },
    "4504": {
      "op": "MSTORE"
    },
    "4505": {
      "op": "PUSH32",
      "value": "0x5265676973747279202D206368616E6765436F6D7065746974696F6E5661756C"
    },
    "4538": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "4540": {
      "op": "DUP3"
    },
    "4541": {
      "op": "ADD"
    },
    "4542": {
      "op": "MSTORE"
    },
    "4543": {
      "op": "PUSH32",
      "value": "0x743A2043616E6E6F742073657420746F203020616464726573732E0000000000"
    },
    "4576": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "4578": {
      "op": "DUP3"
    },
    "4579": {
      "op": "ADD"
    },
    "4580": {
      "op": "MSTORE"
    },
    "4581": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "4583": {
      "op": "ADD"
    },
    "4584": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4402,
        4503
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x436"
    },
    "4587": {
      "op": "JUMP"
    },
    "4588": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4402,
        4503
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "4589": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4558,
        4573
      ],
      "op": "DUP1",
      "path": "4",
      "statement": 29
    },
    "4590": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4513,
        4525
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x2"
    },
    "4592": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4526,
        4541
      ],
      "op": "DUP5",
      "path": "4"
    },
    "4593": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4526,
        4541
      ],
      "op": "DUP5",
      "path": "4"
    },
    "4594": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4513,
        4542
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "4596": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4513,
        4542
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "4597": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4513,
        4542
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x11FF"
    },
    "4600": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4513,
        4542
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "4601": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4513,
        4542
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "4602": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4513,
        4542
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "4603": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4513,
        4542
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1D46"
    },
    "4606": {
      "fn": "Registry.changeCompetitionVault",
      "jump": "i",
      "offset": [
        4513,
        4542
      ],
      "op": "JUMP",
      "path": "4"
    },
    "4607": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4513,
        4542
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "4608": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4513,
        4542
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "4609": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4513,
        4542
      ],
      "op": "DUP2",
      "path": "4"
    },
    "4610": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4513,
        4542
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "4611": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4513,
        4542
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "4613": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4513,
        4542
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "4614": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4513,
        4542
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "4615": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4513,
        4542
      ],
      "op": "DUP2",
      "path": "4"
    },
    "4616": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4513,
        4542
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "4617": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4513,
        4542
      ],
      "op": "SUB",
      "path": "4"
    },
    "4618": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4513,
        4542
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "4620": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4513,
        4542
      ],
      "op": "ADD",
      "path": "4"
    },
    "4621": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4513,
        4542
      ],
      "op": "DUP2",
      "path": "4"
    },
    "4622": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4513,
        4542
      ],
      "op": "KECCAK256",
      "path": "4"
    },
    "4623": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4513,
        4555
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x1"
    },
    "4625": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4513,
        4555
      ],
      "op": "ADD",
      "path": "4"
    },
    "4626": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4513,
        4573
      ],
      "op": "DUP1",
      "path": "4"
    },
    "4627": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4513,
        4573
      ],
      "op": "SLOAD",
      "path": "4"
    },
    "4628": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4630": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4632": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4634": {
      "op": "SHL"
    },
    "4635": {
      "op": "SUB"
    },
    "4636": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4513,
        4573
      ],
      "op": "SWAP4",
      "path": "4"
    },
    "4637": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4513,
        4573
      ],
      "op": "DUP5",
      "path": "4"
    },
    "4638": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4513,
        4573
      ],
      "op": "AND",
      "path": "4"
    },
    "4639": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4641": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4643": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4645": {
      "op": "SHL"
    },
    "4646": {
      "op": "SUB"
    },
    "4647": {
      "op": "NOT"
    },
    "4648": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4513,
        4573
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "4649": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4513,
        4573
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "4650": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4513,
        4573
      ],
      "op": "AND",
      "path": "4"
    },
    "4651": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4513,
        4573
      ],
      "op": "OR",
      "path": "4"
    },
    "4652": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4513,
        4573
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "4653": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4513,
        4573
      ],
      "op": "SSTORE",
      "path": "4"
    },
    "4654": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4589,
        4653
      ],
      "op": "SWAP1",
      "path": "4",
      "statement": 30
    },
    "4655": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4589,
        4653
      ],
      "op": "DUP3",
      "path": "4"
    },
    "4656": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4589,
        4653
      ],
      "op": "AND",
      "path": "4"
    },
    "4657": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4589,
        4653
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "4658": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4589,
        4653
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x123E"
    },
    "4661": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4589,
        4653
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "4662": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4620,
        4635
      ],
      "op": "DUP6",
      "path": "4"
    },
    "4663": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4620,
        4635
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "4664": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4620,
        4635
      ],
      "op": "DUP6",
      "path": "4"
    },
    "4665": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4620,
        4635
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "4666": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4589,
        4653
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1D46"
    },
    "4669": {
      "fn": "Registry.changeCompetitionVault",
      "jump": "i",
      "offset": [
        4589,
        4653
      ],
      "op": "JUMP",
      "path": "4"
    },
    "4670": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4589,
        4653
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "4671": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4589,
        4653
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "4673": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4589,
        4653
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "4674": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4589,
        4653
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "4675": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4589,
        4653
      ],
      "op": "DUP2",
      "path": "4"
    },
    "4676": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4589,
        4653
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "4677": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4589,
        4653
      ],
      "op": "SUB",
      "path": "4"
    },
    "4678": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4589,
        4653
      ],
      "op": "DUP2",
      "path": "4"
    },
    "4679": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4589,
        4653
      ],
      "op": "KECCAK256",
      "path": "4"
    },
    "4680": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4589,
        4653
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "4681": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4589,
        4653
      ],
      "op": "PUSH32",
      "path": "4",
      "value": "0x7CFAC95B87AB328BBDC2CB62BE233C18B521A6044B46F0A9F5281732BC8CB6AB"
    },
    "4714": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4589,
        4653
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "4715": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4589,
        4653
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "4717": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4589,
        4653
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "4718": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        4589,
        4653
      ],
      "op": "LOG3",
      "path": "4"
    },
    "4719": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        3962,
        4660
      ],
      "op": "POP",
      "path": "4"
    },
    "4720": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        3962,
        4660
      ],
      "op": "POP",
      "path": "4"
    },
    "4721": {
      "fn": "Registry.changeCompetitionVault",
      "offset": [
        3962,
        4660
      ],
      "op": "POP",
      "path": "4"
    },
    "4722": {
      "fn": "Registry.changeCompetitionVault",
      "jump": "o",
      "offset": [
        3962,
        4660
      ],
      "op": "JUMP",
      "path": "4"
    },
    "4723": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5388,
        5763
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "4724": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5480,
        5519
      ],
      "op": "PUSH2",
      "path": "4",
      "statement": 31,
      "value": "0x127E"
    },
    "4727": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4729": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5508,
        5518
      ],
      "op": "CALLER",
      "path": "4"
    },
    "4730": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5480,
        5487
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xFDE"
    },
    "4733": {
      "fn": "Registry.changeTokenAddress",
      "jump": "i",
      "offset": [
        5480,
        5519
      ],
      "op": "JUMP",
      "path": "4"
    },
    "4734": {
      "branch": 58,
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5480,
        5519
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "4735": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5472,
        5578
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x12E9"
    },
    "4738": {
      "branch": 58,
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5472,
        5578
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "4739": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5472,
        5578
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "4741": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5472,
        5578
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "4742": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4746": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4748": {
      "op": "SHL"
    },
    "4749": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5472,
        5578
      ],
      "op": "DUP2",
      "path": "4"
    },
    "4750": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5472,
        5578
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "4751": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4753": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5472,
        5578
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "4755": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5472,
        5578
      ],
      "op": "DUP3",
      "path": "4"
    },
    "4756": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5472,
        5578
      ],
      "op": "ADD",
      "path": "4"
    },
    "4757": {
      "op": "MSTORE"
    },
    "4758": {
      "op": "PUSH1",
      "value": "0x36"
    },
    "4760": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4762": {
      "op": "DUP3"
    },
    "4763": {
      "op": "ADD"
    },
    "4764": {
      "op": "MSTORE"
    },
    "4765": {
      "op": "PUSH32",
      "value": "0x5265676973747279202D206368616E6765546F6B656E416464726573733A2043"
    },
    "4798": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "4800": {
      "op": "DUP3"
    },
    "4801": {
      "op": "ADD"
    },
    "4802": {
      "op": "MSTORE"
    },
    "4803": {
      "op": "PUSH22",
      "value": "0x30B63632B91034B9903AB730BABA3437B934BD32B217"
    },
    "4826": {
      "op": "PUSH1",
      "value": "0x51"
    },
    "4828": {
      "op": "SHL"
    },
    "4829": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "4831": {
      "op": "DUP3"
    },
    "4832": {
      "op": "ADD"
    },
    "4833": {
      "op": "MSTORE"
    },
    "4834": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "4836": {
      "op": "ADD"
    },
    "4837": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5472,
        5578
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x436"
    },
    "4840": {
      "op": "JUMP"
    },
    "4841": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5472,
        5578
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "4842": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4844": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4846": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4848": {
      "op": "SHL"
    },
    "4849": {
      "op": "SUB"
    },
    "4850": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5596,
        5620
      ],
      "op": "DUP2",
      "path": "4",
      "statement": 32
    },
    "4851": {
      "branch": 59,
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5596,
        5620
      ],
      "op": "AND",
      "path": "4"
    },
    "4852": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5588,
        5680
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1365"
    },
    "4855": {
      "branch": 59,
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5588,
        5680
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "4856": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5588,
        5680
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "4858": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5588,
        5680
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "4859": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4863": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4865": {
      "op": "SHL"
    },
    "4866": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5588,
        5680
      ],
      "op": "DUP2",
      "path": "4"
    },
    "4867": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5588,
        5680
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "4868": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4870": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5588,
        5680
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "4872": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5588,
        5680
      ],
      "op": "DUP3",
      "path": "4"
    },
    "4873": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5588,
        5680
      ],
      "op": "ADD",
      "path": "4"
    },
    "4874": {
      "op": "MSTORE"
    },
    "4875": {
      "op": "PUSH1",
      "value": "0x37"
    },
    "4877": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4879": {
      "op": "DUP3"
    },
    "4880": {
      "op": "ADD"
    },
    "4881": {
      "op": "MSTORE"
    },
    "4882": {
      "op": "PUSH32",
      "value": "0x5265676973747279202D206368616E6765546F6B656E416464726573733A2043"
    },
    "4915": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "4917": {
      "op": "DUP3"
    },
    "4918": {
      "op": "ADD"
    },
    "4919": {
      "op": "MSTORE"
    },
    "4920": {
      "op": "PUSH32",
      "value": "0x616E6E6F742073657420746F203020616464726573732E000000000000000000"
    },
    "4953": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "4955": {
      "op": "DUP3"
    },
    "4956": {
      "op": "ADD"
    },
    "4957": {
      "op": "MSTORE"
    },
    "4958": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "4960": {
      "op": "ADD"
    },
    "4961": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5588,
        5680
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x436"
    },
    "4964": {
      "op": "JUMP"
    },
    "4965": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5588,
        5680
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "4966": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5690,
        5696
      ],
      "op": "PUSH1",
      "path": "4",
      "statement": 33,
      "value": "0x1"
    },
    "4968": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5690,
        5709
      ],
      "op": "DUP1",
      "path": "4"
    },
    "4969": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5690,
        5709
      ],
      "op": "SLOAD",
      "path": "4"
    },
    "4970": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4972": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4974": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4976": {
      "op": "SHL"
    },
    "4977": {
      "op": "SUB"
    },
    "4978": {
      "op": "NOT"
    },
    "4979": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5690,
        5709
      ],
      "op": "AND",
      "path": "4"
    },
    "4980": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4982": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4984": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4986": {
      "op": "SHL"
    },
    "4987": {
      "op": "SUB"
    },
    "4988": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5690,
        5709
      ],
      "op": "DUP4",
      "path": "4"
    },
    "4989": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5690,
        5709
      ],
      "op": "AND",
      "path": "4"
    },
    "4990": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5690,
        5709
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "4991": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5690,
        5709
      ],
      "op": "DUP2",
      "path": "4"
    },
    "4992": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5690,
        5709
      ],
      "op": "OR",
      "path": "4"
    },
    "4993": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5690,
        5709
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "4994": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5690,
        5709
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "4995": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5690,
        5709
      ],
      "op": "SSTORE",
      "path": "4"
    },
    "4996": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5725,
        5756
      ],
      "op": "PUSH1",
      "path": "4",
      "statement": 34,
      "value": "0x40"
    },
    "4998": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5725,
        5756
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "4999": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5725,
        5756
      ],
      "op": "PUSH32",
      "path": "4",
      "value": "0x1297217F6DA0341BA2CAB10677A2E4471C20EBC84ACC96EF2339A734A3A233B2"
    },
    "5032": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5725,
        5756
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "5033": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5035": {
      "op": "SWAP1"
    },
    "5036": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5725,
        5756
      ],
      "op": "LOG2",
      "path": "4"
    },
    "5037": {
      "fn": "Registry.changeTokenAddress",
      "offset": [
        5388,
        5763
      ],
      "op": "POP",
      "path": "4"
    },
    "5038": {
      "fn": "Registry.changeTokenAddress",
      "jump": "o",
      "offset": [
        5388,
        5763
      ],
      "op": "JUMP",
      "path": "4"
    },
    "5039": {
      "op": "JUMPDEST"
    },
    "5040": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5042": {
      "op": "DUP3"
    },
    "5043": {
      "op": "DUP2"
    },
    "5044": {
      "op": "MSTORE"
    },
    "5045": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5047": {
      "op": "DUP2"
    },
    "5048": {
      "op": "SWAP1"
    },
    "5049": {
      "op": "MSTORE"
    },
    "5050": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5052": {
      "op": "SWAP1"
    },
    "5053": {
      "op": "KECCAK256"
    },
    "5054": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5056": {
      "op": "ADD"
    },
    "5057": {
      "op": "SLOAD"
    },
    "5058": {
      "op": "PUSH2",
      "value": "0x13CA"
    },
    "5061": {
      "op": "SWAP1"
    },
    "5062": {
      "op": "PUSH2",
      "value": "0x6EF"
    },
    "5065": {
      "op": "JUMP"
    },
    "5066": {
      "op": "JUMPDEST"
    },
    "5067": {
      "op": "PUSH2",
      "value": "0xA03"
    },
    "5070": {
      "op": "JUMPI"
    },
    "5071": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5073": {
      "op": "MLOAD"
    },
    "5074": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "5078": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "5080": {
      "op": "SHL"
    },
    "5081": {
      "op": "DUP2"
    },
    "5082": {
      "op": "MSTORE"
    },
    "5083": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5085": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "5087": {
      "op": "DUP3"
    },
    "5088": {
      "op": "ADD"
    },
    "5089": {
      "op": "MSTORE"
    },
    "5090": {
      "op": "PUSH1",
      "value": "0x30"
    },
    "5092": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5094": {
      "op": "DUP3"
    },
    "5095": {
      "op": "ADD"
    },
    "5096": {
      "op": "MSTORE"
    },
    "5097": {
      "op": "PUSH32",
      "value": "0x416363657373436F6E74726F6C3A2073656E646572206D75737420626520616E"
    },
    "5130": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "5132": {
      "op": "DUP3"
    },
    "5133": {
      "op": "ADD"
    },
    "5134": {
      "op": "MSTORE"
    },
    "5135": {
      "op": "PUSH16",
      "value": "0x2061646D696E20746F207265766F6B65"
    },
    "5152": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "5154": {
      "op": "SHL"
    },
    "5155": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "5157": {
      "op": "DUP3"
    },
    "5158": {
      "op": "ADD"
    },
    "5159": {
      "op": "MSTORE"
    },
    "5160": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "5162": {
      "op": "ADD"
    },
    "5163": {
      "op": "PUSH2",
      "value": "0x436"
    },
    "5166": {
      "op": "JUMP"
    },
    "5167": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1482,
        1684
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "5168": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1584,
        1604
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "5170": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1635,
        1647
      ],
      "op": "PUSH1",
      "path": "4",
      "statement": 35,
      "value": "0x2"
    },
    "5172": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1648,
        1663
      ],
      "op": "DUP4",
      "path": "4"
    },
    "5173": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1648,
        1663
      ],
      "op": "DUP4",
      "path": "4"
    },
    "5174": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1635,
        1664
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "5176": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1635,
        1664
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "5177": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1635,
        1664
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1443"
    },
    "5180": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1635,
        1664
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "5181": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1635,
        1664
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "5182": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1635,
        1664
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "5183": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1635,
        1664
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1D46"
    },
    "5186": {
      "fn": "Registry.getCompetitionVault",
      "jump": "i",
      "offset": [
        1635,
        1664
      ],
      "op": "JUMP",
      "path": "4"
    },
    "5187": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1635,
        1664
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "5188": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1635,
        1664
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "5189": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1635,
        1664
      ],
      "op": "DUP2",
      "path": "4"
    },
    "5190": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1635,
        1664
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "5191": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1635,
        1664
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "5193": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1635,
        1664
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "5194": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1635,
        1664
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "5195": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1635,
        1664
      ],
      "op": "DUP2",
      "path": "4"
    },
    "5196": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1635,
        1664
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "5197": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1635,
        1664
      ],
      "op": "SUB",
      "path": "4"
    },
    "5198": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1635,
        1664
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "5200": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1635,
        1664
      ],
      "op": "ADD",
      "path": "4"
    },
    "5201": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1635,
        1664
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "5202": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1635,
        1664
      ],
      "op": "KECCAK256",
      "path": "4"
    },
    "5203": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1635,
        1677
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x1"
    },
    "5205": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1635,
        1677
      ],
      "op": "ADD",
      "path": "4"
    },
    "5206": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1635,
        1677
      ],
      "op": "SLOAD",
      "path": "4"
    },
    "5207": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5209": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5211": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5213": {
      "op": "SHL"
    },
    "5214": {
      "op": "SUB"
    },
    "5215": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1635,
        1677
      ],
      "op": "AND",
      "path": "4"
    },
    "5216": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1635,
        1677
      ],
      "op": "SWAP4",
      "path": "4"
    },
    "5217": {
      "fn": "Registry.getCompetitionVault",
      "offset": [
        1482,
        1684
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "5218": {
      "op": "POP"
    },
    "5219": {
      "op": "POP"
    },
    "5220": {
      "op": "POP"
    },
    "5221": {
      "fn": "Registry.getCompetitionVault",
      "jump": "o",
      "offset": [
        1482,
        1684
      ],
      "op": "JUMP",
      "path": "4"
    },
    "5222": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        6966,
        7659
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "5223": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7099,
        7138
      ],
      "op": "PUSH2",
      "path": "4",
      "statement": 36,
      "value": "0x1471"
    },
    "5226": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5228": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7127,
        7137
      ],
      "op": "CALLER",
      "path": "4"
    },
    "5229": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7099,
        7106
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xFDE"
    },
    "5232": {
      "fn": "Registry.changeExtensionInfoLocation",
      "jump": "i",
      "offset": [
        7099,
        7138
      ],
      "op": "JUMP",
      "path": "4"
    },
    "5233": {
      "branch": 60,
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7099,
        7138
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "5234": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7091,
        7206
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x14E3"
    },
    "5237": {
      "branch": 60,
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7091,
        7206
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "5238": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7091,
        7206
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "5240": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7091,
        7206
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "5241": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "5245": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "5247": {
      "op": "SHL"
    },
    "5248": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7091,
        7206
      ],
      "op": "DUP2",
      "path": "4"
    },
    "5249": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7091,
        7206
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "5250": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5252": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7091,
        7206
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "5254": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7091,
        7206
      ],
      "op": "DUP3",
      "path": "4"
    },
    "5255": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7091,
        7206
      ],
      "op": "ADD",
      "path": "4"
    },
    "5256": {
      "op": "MSTORE"
    },
    "5257": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "5259": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5261": {
      "op": "DUP3"
    },
    "5262": {
      "op": "ADD"
    },
    "5263": {
      "op": "MSTORE"
    },
    "5264": {
      "op": "PUSH32",
      "value": "0x5265676973747279202D206368616E6765457874656E73696F6E496E666F4C6F"
    },
    "5297": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "5299": {
      "op": "DUP3"
    },
    "5300": {
      "op": "ADD"
    },
    "5301": {
      "op": "MSTORE"
    },
    "5302": {
      "op": "PUSH32",
      "value": "0x636174696F6E3A2043616C6C657220697320756E617574686F72697A65642E00"
    },
    "5335": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "5337": {
      "op": "DUP3"
    },
    "5338": {
      "op": "ADD"
    },
    "5339": {
      "op": "MSTORE"
    },
    "5340": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "5342": {
      "op": "ADD"
    },
    "5343": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7091,
        7206
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x436"
    },
    "5346": {
      "op": "JUMP"
    },
    "5347": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7091,
        7206
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "5348": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7278,
        7279
      ],
      "op": "PUSH1",
      "path": "4",
      "statement": 37,
      "value": "0x0"
    },
    "5350": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5352": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5354": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5356": {
      "op": "SHL"
    },
    "5357": {
      "op": "SUB"
    },
    "5358": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7224,
        7280
      ],
      "op": "AND",
      "path": "4"
    },
    "5359": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7224,
        7234
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x3"
    },
    "5361": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7235,
        7248
      ],
      "op": "DUP5",
      "path": "4"
    },
    "5362": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7235,
        7248
      ],
      "op": "DUP5",
      "path": "4"
    },
    "5363": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7224,
        7249
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "5365": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7224,
        7249
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "5366": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7224,
        7249
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1500"
    },
    "5369": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7224,
        7249
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "5370": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7224,
        7249
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "5371": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7224,
        7249
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "5372": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7224,
        7249
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1D46"
    },
    "5375": {
      "fn": "Registry.changeExtensionInfoLocation",
      "jump": "i",
      "offset": [
        7224,
        7249
      ],
      "op": "JUMP",
      "path": "4"
    },
    "5376": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7224,
        7249
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "5377": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7224,
        7249
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "5378": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7224,
        7249
      ],
      "op": "DUP2",
      "path": "4"
    },
    "5379": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7224,
        7249
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "5380": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7224,
        7249
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "5382": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7224,
        7249
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "5383": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7224,
        7249
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "5384": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7224,
        7249
      ],
      "op": "DUP2",
      "path": "4"
    },
    "5385": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7224,
        7249
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "5386": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7224,
        7249
      ],
      "op": "SUB",
      "path": "4"
    },
    "5387": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7224,
        7249
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "5389": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7224,
        7249
      ],
      "op": "ADD",
      "path": "4"
    },
    "5390": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7224,
        7249
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "5391": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7224,
        7249
      ],
      "op": "KECCAK256",
      "path": "4"
    },
    "5392": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7224,
        7266
      ],
      "op": "SLOAD",
      "path": "4"
    },
    "5393": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5395": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5397": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5399": {
      "op": "SHL"
    },
    "5400": {
      "op": "SUB"
    },
    "5401": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7224,
        7266
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x100"
    },
    "5404": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7224,
        7266
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "5405": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7224,
        7266
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "5406": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7224,
        7266
      ],
      "op": "DIV",
      "path": "4"
    },
    "5407": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7224,
        7266
      ],
      "op": "AND",
      "path": "4"
    },
    "5408": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7224,
        7280
      ],
      "op": "EQ",
      "path": "4"
    },
    "5409": {
      "branch": 61,
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7224,
        7280
      ],
      "op": "ISZERO",
      "path": "4"
    },
    "5410": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7216,
        7399
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x15D4"
    },
    "5413": {
      "branch": 61,
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7216,
        7399
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "5414": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7216,
        7399
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "5416": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7216,
        7399
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "5417": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "5421": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "5423": {
      "op": "SHL"
    },
    "5424": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7216,
        7399
      ],
      "op": "DUP2",
      "path": "4"
    },
    "5425": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7216,
        7399
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "5426": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5428": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7216,
        7399
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "5430": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7216,
        7399
      ],
      "op": "DUP3",
      "path": "4"
    },
    "5431": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7216,
        7399
      ],
      "op": "ADD",
      "path": "4"
    },
    "5432": {
      "op": "MSTORE"
    },
    "5433": {
      "op": "PUSH1",
      "value": "0x72"
    },
    "5435": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5437": {
      "op": "DUP3"
    },
    "5438": {
      "op": "ADD"
    },
    "5439": {
      "op": "MSTORE"
    },
    "5440": {
      "op": "PUSH32",
      "value": "0x5265676973747279202D206368616E6765457874656E73696F6E496E666F4C6F"
    },
    "5473": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "5475": {
      "op": "DUP3"
    },
    "5476": {
      "op": "ADD"
    },
    "5477": {
      "op": "MSTORE"
    },
    "5478": {
      "op": "PUSH32",
      "value": "0x636174696F6E3A20436F6D7065746974696F6E20646F6573206E6F7420657869"
    },
    "5511": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "5513": {
      "op": "DUP3"
    },
    "5514": {
      "op": "ADD"
    },
    "5515": {
      "op": "MSTORE"
    },
    "5516": {
      "op": "PUSH32",
      "value": "0x73742E205573652066756E6374696F6E202772656769737465724E6577436F6D"
    },
    "5549": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "5551": {
      "op": "DUP3"
    },
    "5552": {
      "op": "ADD"
    },
    "5553": {
      "op": "MSTORE"
    },
    "5554": {
      "op": "PUSH18",
      "value": "0x3832BA34BA34B7B7139034B739BA32B0B217"
    },
    "5573": {
      "op": "PUSH1",
      "value": "0x71"
    },
    "5575": {
      "op": "SHL"
    },
    "5576": {
      "op": "PUSH1",
      "value": "0xA4"
    },
    "5578": {
      "op": "DUP3"
    },
    "5579": {
      "op": "ADD"
    },
    "5580": {
      "op": "MSTORE"
    },
    "5581": {
      "op": "PUSH1",
      "value": "0xC4"
    },
    "5583": {
      "op": "ADD"
    },
    "5584": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7216,
        7399
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x436"
    },
    "5587": {
      "op": "JUMP"
    },
    "5588": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7216,
        7399
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "5589": {
      "branch": 62,
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7417,
        7442
      ],
      "op": "DUP1",
      "path": "4",
      "statement": 38
    },
    "5590": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7409,
        7511
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1649"
    },
    "5593": {
      "branch": 62,
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7409,
        7511
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "5594": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7409,
        7511
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "5596": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7409,
        7511
      ],
      "op": "DUP1",
      "path": "4"
    },
    "5597": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7409,
        7511
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "5598": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "5602": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "5604": {
      "op": "SHL"
    },
    "5605": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7409,
        7511
      ],
      "op": "DUP2",
      "path": "4"
    },
    "5606": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7409,
        7511
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "5607": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5609": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7409,
        7511
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "5611": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7409,
        7511
      ],
      "op": "DUP3",
      "path": "4"
    },
    "5612": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7409,
        7511
      ],
      "op": "ADD",
      "path": "4"
    },
    "5613": {
      "op": "MSTORE"
    },
    "5614": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5616": {
      "op": "DUP2"
    },
    "5617": {
      "op": "ADD"
    },
    "5618": {
      "op": "SWAP2"
    },
    "5619": {
      "op": "SWAP1"
    },
    "5620": {
      "op": "SWAP2"
    },
    "5621": {
      "op": "MSTORE"
    },
    "5622": {
      "op": "PUSH32",
      "value": "0x5265676973747279202D206368616E6765457874656E73696F6E496E666F4C6F"
    },
    "5655": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "5657": {
      "op": "DUP3"
    },
    "5658": {
      "op": "ADD"
    },
    "5659": {
      "op": "MSTORE"
    },
    "5660": {
      "op": "PUSH32",
      "value": "0x636174696F6E3A2043616E6E6F742073657420746F203020616464726573732E"
    },
    "5693": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "5695": {
      "op": "DUP3"
    },
    "5696": {
      "op": "ADD"
    },
    "5697": {
      "op": "MSTORE"
    },
    "5698": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "5700": {
      "op": "ADD"
    },
    "5701": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7409,
        7511
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x436"
    },
    "5704": {
      "op": "JUMP"
    },
    "5705": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7409,
        7511
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "5706": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7569,
        7580
      ],
      "op": "DUP1",
      "path": "4",
      "statement": 39
    },
    "5707": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7521,
        7531
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x3"
    },
    "5709": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7532,
        7545
      ],
      "op": "DUP5",
      "path": "4"
    },
    "5710": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7532,
        7545
      ],
      "op": "DUP5",
      "path": "4"
    },
    "5711": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7521,
        7546
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "5713": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7521,
        7546
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "5714": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7521,
        7546
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x165C"
    },
    "5717": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7521,
        7546
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "5718": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7521,
        7546
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "5719": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7521,
        7546
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "5720": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7521,
        7546
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1D46"
    },
    "5723": {
      "fn": "Registry.changeExtensionInfoLocation",
      "jump": "i",
      "offset": [
        7521,
        7546
      ],
      "op": "JUMP",
      "path": "4"
    },
    "5724": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7521,
        7546
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "5725": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7521,
        7546
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "5726": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7521,
        7546
      ],
      "op": "DUP2",
      "path": "4"
    },
    "5727": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7521,
        7546
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "5728": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7521,
        7546
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "5730": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7521,
        7546
      ],
      "op": "ADD",
      "path": "4"
    },
    "5731": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7521,
        7546
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "5733": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7521,
        7546
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "5734": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7521,
        7546
      ],
      "op": "DUP1",
      "path": "4"
    },
    "5735": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7521,
        7546
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "5736": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7521,
        7546
      ],
      "op": "SUB",
      "path": "4"
    },
    "5737": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7521,
        7546
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "5738": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7521,
        7546
      ],
      "op": "KECCAK256",
      "path": "4"
    },
    "5739": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7521,
        7566
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x1"
    },
    "5741": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7521,
        7566
      ],
      "op": "ADD",
      "path": "4"
    },
    "5742": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7521,
        7580
      ],
      "op": "DUP2",
      "path": "4"
    },
    "5743": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7521,
        7580
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "5744": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7521,
        7580
      ],
      "op": "SSTORE",
      "path": "4"
    },
    "5745": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7521,
        7580
      ],
      "op": "POP",
      "path": "4"
    },
    "5746": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7640,
        7651
      ],
      "op": "DUP1",
      "path": "4",
      "statement": 40
    },
    "5747": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7625,
        7638
      ],
      "op": "DUP4",
      "path": "4"
    },
    "5748": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7625,
        7638
      ],
      "op": "DUP4",
      "path": "4"
    },
    "5749": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7596,
        7652
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "5751": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7596,
        7652
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "5752": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7596,
        7652
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1682"
    },
    "5755": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7596,
        7652
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "5756": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7596,
        7652
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "5757": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7596,
        7652
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "5758": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7596,
        7652
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1D46"
    },
    "5761": {
      "fn": "Registry.changeExtensionInfoLocation",
      "jump": "i",
      "offset": [
        7596,
        7652
      ],
      "op": "JUMP",
      "path": "4"
    },
    "5762": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7596,
        7652
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "5763": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7596,
        7652
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "5765": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7596,
        7652
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "5766": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7596,
        7652
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "5767": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7596,
        7652
      ],
      "op": "DUP2",
      "path": "4"
    },
    "5768": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7596,
        7652
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "5769": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7596,
        7652
      ],
      "op": "SUB",
      "path": "4"
    },
    "5770": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7596,
        7652
      ],
      "op": "DUP2",
      "path": "4"
    },
    "5771": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7596,
        7652
      ],
      "op": "KECCAK256",
      "path": "4"
    },
    "5772": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7596,
        7652
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "5773": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7596,
        7652
      ],
      "op": "PUSH32",
      "path": "4",
      "value": "0x88BFDF54CE240D8032AD74FDE55D2FC88647A35643BD1A8A4BB7BFC6EFC6058C"
    },
    "5806": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7596,
        7652
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "5807": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7596,
        7652
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "5809": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7596,
        7652
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "5810": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        7596,
        7652
      ],
      "op": "LOG3",
      "path": "4"
    },
    "5811": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        6966,
        7659
      ],
      "op": "POP",
      "path": "4"
    },
    "5812": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        6966,
        7659
      ],
      "op": "POP",
      "path": "4"
    },
    "5813": {
      "fn": "Registry.changeExtensionInfoLocation",
      "offset": [
        6966,
        7659
      ],
      "op": "POP",
      "path": "4"
    },
    "5814": {
      "fn": "Registry.changeExtensionInfoLocation",
      "jump": "o",
      "offset": [
        6966,
        7659
      ],
      "op": "JUMP",
      "path": "4"
    },
    "5815": {
      "fn": "Registry.getExtensionActive",
      "offset": [
        2254,
        2428
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "5816": {
      "fn": "Registry.getExtensionActive",
      "offset": [
        2353,
        2364
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "5818": {
      "fn": "Registry.getExtensionActive",
      "offset": [
        2389,
        2399
      ],
      "op": "PUSH1",
      "path": "4",
      "statement": 41,
      "value": "0x3"
    },
    "5820": {
      "fn": "Registry.getExtensionActive",
      "offset": [
        2400,
        2413
      ],
      "op": "DUP4",
      "path": "4"
    },
    "5821": {
      "fn": "Registry.getExtensionActive",
      "offset": [
        2400,
        2413
      ],
      "op": "DUP4",
      "path": "4"
    },
    "5822": {
      "fn": "Registry.getExtensionActive",
      "offset": [
        2389,
        2414
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "5824": {
      "fn": "Registry.getExtensionActive",
      "offset": [
        2389,
        2414
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "5825": {
      "fn": "Registry.getExtensionActive",
      "offset": [
        2389,
        2414
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xEF4"
    },
    "5828": {
      "fn": "Registry.getExtensionActive",
      "offset": [
        2389,
        2414
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "5829": {
      "fn": "Registry.getExtensionActive",
      "offset": [
        2389,
        2414
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "5830": {
      "fn": "Registry.getExtensionActive",
      "offset": [
        2389,
        2414
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "5831": {
      "fn": "Registry.getExtensionActive",
      "offset": [
        2389,
        2414
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1D46"
    },
    "5834": {
      "fn": "Registry.getExtensionActive",
      "jump": "i",
      "offset": [
        2389,
        2414
      ],
      "op": "JUMP",
      "path": "4"
    },
    "5835": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4666,
        5382
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "5836": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4804,
        4843
      ],
      "op": "PUSH2",
      "path": "4",
      "statement": 42,
      "value": "0x16D6"
    },
    "5839": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5841": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4832,
        4842
      ],
      "op": "CALLER",
      "path": "4"
    },
    "5842": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4804,
        4811
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xFDE"
    },
    "5845": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "jump": "i",
      "offset": [
        4804,
        4843
      ],
      "op": "JUMP",
      "path": "4"
    },
    "5846": {
      "branch": 63,
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4804,
        4843
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "5847": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4796,
        4914
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1753"
    },
    "5850": {
      "branch": 63,
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4796,
        4914
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "5851": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4796,
        4914
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "5853": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4796,
        4914
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "5854": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "5858": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "5860": {
      "op": "SHL"
    },
    "5861": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4796,
        4914
      ],
      "op": "DUP2",
      "path": "4"
    },
    "5862": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4796,
        4914
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "5863": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5865": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4796,
        4914
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "5867": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4796,
        4914
      ],
      "op": "DUP3",
      "path": "4"
    },
    "5868": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4796,
        4914
      ],
      "op": "ADD",
      "path": "4"
    },
    "5869": {
      "op": "MSTORE"
    },
    "5870": {
      "op": "PUSH1",
      "value": "0x42"
    },
    "5872": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5874": {
      "op": "DUP3"
    },
    "5875": {
      "op": "ADD"
    },
    "5876": {
      "op": "MSTORE"
    },
    "5877": {
      "op": "PUSH32",
      "value": "0x5265676973747279202D206368616E6765436F6D7065746974696F6E52756C65"
    },
    "5910": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "5912": {
      "op": "DUP3"
    },
    "5913": {
      "op": "ADD"
    },
    "5914": {
      "op": "MSTORE"
    },
    "5915": {
      "op": "PUSH32",
      "value": "0x734C6F636174696F6E3A2043616C6C657220697320756E617574686F72697A65"
    },
    "5948": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "5950": {
      "op": "DUP3"
    },
    "5951": {
      "op": "ADD"
    },
    "5952": {
      "op": "MSTORE"
    },
    "5953": {
      "op": "PUSH2",
      "value": "0x3217"
    },
    "5956": {
      "op": "PUSH1",
      "value": "0xF1"
    },
    "5958": {
      "op": "SHL"
    },
    "5959": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "5961": {
      "op": "DUP3"
    },
    "5962": {
      "op": "ADD"
    },
    "5963": {
      "op": "MSTORE"
    },
    "5964": {
      "op": "PUSH1",
      "value": "0xA4"
    },
    "5966": {
      "op": "ADD"
    },
    "5967": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4796,
        4914
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x436"
    },
    "5970": {
      "op": "JUMP"
    },
    "5971": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4796,
        4914
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "5972": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4992,
        4993
      ],
      "op": "PUSH1",
      "path": "4",
      "statement": 43,
      "value": "0x0"
    },
    "5974": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5976": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5978": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5980": {
      "op": "SHL"
    },
    "5981": {
      "op": "SUB"
    },
    "5982": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4932,
        4994
      ],
      "op": "AND",
      "path": "4"
    },
    "5983": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4932,
        4944
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x2"
    },
    "5985": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4945,
        4960
      ],
      "op": "DUP5",
      "path": "4"
    },
    "5986": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4945,
        4960
      ],
      "op": "DUP5",
      "path": "4"
    },
    "5987": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4932,
        4961
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "5989": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4932,
        4961
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "5990": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4932,
        4961
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1770"
    },
    "5993": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4932,
        4961
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "5994": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4932,
        4961
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "5995": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4932,
        4961
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "5996": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4932,
        4961
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1D46"
    },
    "5999": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "jump": "i",
      "offset": [
        4932,
        4961
      ],
      "op": "JUMP",
      "path": "4"
    },
    "6000": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4932,
        4961
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "6001": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4932,
        4961
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "6002": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4932,
        4961
      ],
      "op": "DUP2",
      "path": "4"
    },
    "6003": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4932,
        4961
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "6004": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4932,
        4961
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "6006": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4932,
        4961
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "6007": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4932,
        4961
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "6008": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4932,
        4961
      ],
      "op": "DUP2",
      "path": "4"
    },
    "6009": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4932,
        4961
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "6010": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4932,
        4961
      ],
      "op": "SUB",
      "path": "4"
    },
    "6011": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4932,
        4961
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "6013": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4932,
        4961
      ],
      "op": "ADD",
      "path": "4"
    },
    "6014": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4932,
        4961
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "6015": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4932,
        4961
      ],
      "op": "KECCAK256",
      "path": "4"
    },
    "6016": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4932,
        4980
      ],
      "op": "SLOAD",
      "path": "4"
    },
    "6017": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6019": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6021": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6023": {
      "op": "SHL"
    },
    "6024": {
      "op": "SUB"
    },
    "6025": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4932,
        4980
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x100"
    },
    "6028": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4932,
        4980
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "6029": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4932,
        4980
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "6030": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4932,
        4980
      ],
      "op": "DIV",
      "path": "4"
    },
    "6031": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4932,
        4980
      ],
      "op": "AND",
      "path": "4"
    },
    "6032": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4932,
        4994
      ],
      "op": "EQ",
      "path": "4"
    },
    "6033": {
      "branch": 64,
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4932,
        4994
      ],
      "op": "ISZERO",
      "path": "4"
    },
    "6034": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4924,
        5116
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1847"
    },
    "6037": {
      "branch": 64,
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4924,
        5116
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "6038": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4924,
        5116
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "6040": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4924,
        5116
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "6041": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "6045": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "6047": {
      "op": "SHL"
    },
    "6048": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4924,
        5116
      ],
      "op": "DUP2",
      "path": "4"
    },
    "6049": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4924,
        5116
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "6050": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6052": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4924,
        5116
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "6054": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4924,
        5116
      ],
      "op": "DUP3",
      "path": "4"
    },
    "6055": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4924,
        5116
      ],
      "op": "ADD",
      "path": "4"
    },
    "6056": {
      "op": "MSTORE"
    },
    "6057": {
      "op": "PUSH1",
      "value": "0x75"
    },
    "6059": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "6061": {
      "op": "DUP3"
    },
    "6062": {
      "op": "ADD"
    },
    "6063": {
      "op": "MSTORE"
    },
    "6064": {
      "op": "PUSH32",
      "value": "0x5265676973747279202D206368616E6765436F6D7065746974696F6E52756C65"
    },
    "6097": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "6099": {
      "op": "DUP3"
    },
    "6100": {
      "op": "ADD"
    },
    "6101": {
      "op": "MSTORE"
    },
    "6102": {
      "op": "PUSH32",
      "value": "0x734C6F636174696F6E3A20436F6D7065746974696F6E20646F6573206E6F7420"
    },
    "6135": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "6137": {
      "op": "DUP3"
    },
    "6138": {
      "op": "ADD"
    },
    "6139": {
      "op": "MSTORE"
    },
    "6140": {
      "op": "PUSH32",
      "value": "0x65786973742E205573652066756E6374696F6E202772656769737465724E6577"
    },
    "6173": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "6175": {
      "op": "DUP3"
    },
    "6176": {
      "op": "ADD"
    },
    "6177": {
      "op": "MSTORE"
    },
    "6178": {
      "op": "PUSH21",
      "value": "0x21B7B6B832BA34BA34B7B7139034B739BA32B0B217"
    },
    "6200": {
      "op": "PUSH1",
      "value": "0x59"
    },
    "6202": {
      "op": "SHL"
    },
    "6203": {
      "op": "PUSH1",
      "value": "0xA4"
    },
    "6205": {
      "op": "DUP3"
    },
    "6206": {
      "op": "ADD"
    },
    "6207": {
      "op": "MSTORE"
    },
    "6208": {
      "op": "PUSH1",
      "value": "0xC4"
    },
    "6210": {
      "op": "ADD"
    },
    "6211": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4924,
        5116
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x436"
    },
    "6214": {
      "op": "JUMP"
    },
    "6215": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4924,
        5116
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "6216": {
      "branch": 65,
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5134,
        5159
      ],
      "op": "DUP1",
      "path": "4",
      "statement": 44
    },
    "6217": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5126,
        5231
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x18C6"
    },
    "6220": {
      "branch": 65,
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5126,
        5231
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "6221": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5126,
        5231
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "6223": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5126,
        5231
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "6224": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "6228": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "6230": {
      "op": "SHL"
    },
    "6231": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5126,
        5231
      ],
      "op": "DUP2",
      "path": "4"
    },
    "6232": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5126,
        5231
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "6233": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6235": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5126,
        5231
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "6237": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5126,
        5231
      ],
      "op": "DUP3",
      "path": "4"
    },
    "6238": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5126,
        5231
      ],
      "op": "ADD",
      "path": "4"
    },
    "6239": {
      "op": "MSTORE"
    },
    "6240": {
      "op": "PUSH1",
      "value": "0x43"
    },
    "6242": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "6244": {
      "op": "DUP3"
    },
    "6245": {
      "op": "ADD"
    },
    "6246": {
      "op": "MSTORE"
    },
    "6247": {
      "op": "PUSH32",
      "value": "0x5265676973747279202D206368616E6765436F6D7065746974696F6E52756C65"
    },
    "6280": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "6282": {
      "op": "DUP3"
    },
    "6283": {
      "op": "ADD"
    },
    "6284": {
      "op": "MSTORE"
    },
    "6285": {
      "op": "PUSH32",
      "value": "0x734C6F636174696F6E3A2043616E6E6F742073657420746F2030206164647265"
    },
    "6318": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "6320": {
      "op": "DUP3"
    },
    "6321": {
      "op": "ADD"
    },
    "6322": {
      "op": "MSTORE"
    },
    "6323": {
      "op": "PUSH3",
      "value": "0x39B997"
    },
    "6327": {
      "op": "PUSH1",
      "value": "0xE9"
    },
    "6329": {
      "op": "SHL"
    },
    "6330": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "6332": {
      "op": "DUP3"
    },
    "6333": {
      "op": "ADD"
    },
    "6334": {
      "op": "MSTORE"
    },
    "6335": {
      "op": "PUSH1",
      "value": "0xA4"
    },
    "6337": {
      "op": "ADD"
    },
    "6338": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5126,
        5231
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x436"
    },
    "6341": {
      "op": "JUMP"
    },
    "6342": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5126,
        5231
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "6343": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5287,
        5298
      ],
      "op": "DUP1",
      "path": "4",
      "statement": 45
    },
    "6344": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5241,
        5253
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x2"
    },
    "6346": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5254,
        5269
      ],
      "op": "DUP5",
      "path": "4"
    },
    "6347": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5254,
        5269
      ],
      "op": "DUP5",
      "path": "4"
    },
    "6348": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5241,
        5270
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "6350": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5241,
        5270
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "6351": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5241,
        5270
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x18D9"
    },
    "6354": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5241,
        5270
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "6355": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5241,
        5270
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "6356": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5241,
        5270
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "6357": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5241,
        5270
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1D46"
    },
    "6360": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "jump": "i",
      "offset": [
        5241,
        5270
      ],
      "op": "JUMP",
      "path": "4"
    },
    "6361": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5241,
        5270
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "6362": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5241,
        5270
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "6363": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5241,
        5270
      ],
      "op": "DUP2",
      "path": "4"
    },
    "6364": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5241,
        5270
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "6365": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5241,
        5270
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "6367": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5241,
        5270
      ],
      "op": "ADD",
      "path": "4"
    },
    "6368": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5241,
        5270
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "6370": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5241,
        5270
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "6371": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5241,
        5270
      ],
      "op": "DUP1",
      "path": "4"
    },
    "6372": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5241,
        5270
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "6373": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5241,
        5270
      ],
      "op": "SUB",
      "path": "4"
    },
    "6374": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5241,
        5270
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "6375": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5241,
        5270
      ],
      "op": "KECCAK256",
      "path": "4"
    },
    "6376": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5241,
        5284
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x2"
    },
    "6378": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5241,
        5284
      ],
      "op": "ADD",
      "path": "4"
    },
    "6379": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5241,
        5298
      ],
      "op": "DUP2",
      "path": "4"
    },
    "6380": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5241,
        5298
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "6381": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5241,
        5298
      ],
      "op": "SSTORE",
      "path": "4"
    },
    "6382": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5241,
        5298
      ],
      "op": "POP",
      "path": "4"
    },
    "6383": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5363,
        5374
      ],
      "op": "DUP1",
      "path": "4",
      "statement": 46
    },
    "6384": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5346,
        5361
      ],
      "op": "DUP4",
      "path": "4"
    },
    "6385": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5346,
        5361
      ],
      "op": "DUP4",
      "path": "4"
    },
    "6386": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5314,
        5375
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "6388": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5314,
        5375
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "6389": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5314,
        5375
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x18FF"
    },
    "6392": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5314,
        5375
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "6393": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5314,
        5375
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "6394": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5314,
        5375
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "6395": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5314,
        5375
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1D46"
    },
    "6398": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "jump": "i",
      "offset": [
        5314,
        5375
      ],
      "op": "JUMP",
      "path": "4"
    },
    "6399": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5314,
        5375
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "6400": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5314,
        5375
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "6402": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5314,
        5375
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "6403": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5314,
        5375
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "6404": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5314,
        5375
      ],
      "op": "DUP2",
      "path": "4"
    },
    "6405": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5314,
        5375
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "6406": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5314,
        5375
      ],
      "op": "SUB",
      "path": "4"
    },
    "6407": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5314,
        5375
      ],
      "op": "DUP2",
      "path": "4"
    },
    "6408": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5314,
        5375
      ],
      "op": "KECCAK256",
      "path": "4"
    },
    "6409": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5314,
        5375
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "6410": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5314,
        5375
      ],
      "op": "PUSH32",
      "path": "4",
      "value": "0x90E4275B4012FEDFA9B631D72BFF03048DF6AFF9864BC8CDEE29AA02360D7FD"
    },
    "6443": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5314,
        5375
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "6444": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5314,
        5375
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "6446": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5314,
        5375
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "6447": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        5314,
        5375
      ],
      "op": "LOG3",
      "path": "4"
    },
    "6448": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4666,
        5382
      ],
      "op": "POP",
      "path": "4"
    },
    "6449": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4666,
        5382
      ],
      "op": "POP",
      "path": "4"
    },
    "6450": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "offset": [
        4666,
        5382
      ],
      "op": "POP",
      "path": "4"
    },
    "6451": {
      "fn": "Registry.changeCompetitionRulesLocation",
      "jump": "o",
      "offset": [
        4666,
        5382
      ],
      "op": "JUMP",
      "path": "4"
    },
    "6452": {
      "op": "JUMPDEST"
    },
    "6453": {
      "op": "PUSH2",
      "value": "0x193E"
    },
    "6456": {
      "op": "DUP3"
    },
    "6457": {
      "op": "DUP3"
    },
    "6458": {
      "op": "PUSH2",
      "value": "0xFDE"
    },
    "6461": {
      "jump": "i",
      "op": "JUMP"
    },
    "6462": {
      "op": "JUMPDEST"
    },
    "6463": {
      "op": "PUSH2",
      "value": "0x763"
    },
    "6466": {
      "op": "JUMPI"
    },
    "6467": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6469": {
      "op": "DUP3"
    },
    "6470": {
      "op": "DUP2"
    },
    "6471": {
      "op": "MSTORE"
    },
    "6472": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6474": {
      "op": "DUP2"
    },
    "6475": {
      "op": "DUP2"
    },
    "6476": {
      "op": "MSTORE"
    },
    "6477": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6479": {
      "op": "DUP1"
    },
    "6480": {
      "op": "DUP4"
    },
    "6481": {
      "op": "KECCAK256"
    },
    "6482": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6484": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6486": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6488": {
      "op": "SHL"
    },
    "6489": {
      "op": "SUB"
    },
    "6490": {
      "op": "DUP6"
    },
    "6491": {
      "op": "AND"
    },
    "6492": {
      "op": "DUP5"
    },
    "6493": {
      "op": "MSTORE"
    },
    "6494": {
      "op": "SWAP1"
    },
    "6495": {
      "op": "SWAP2"
    },
    "6496": {
      "op": "MSTORE"
    },
    "6497": {
      "op": "SWAP1"
    },
    "6498": {
      "op": "KECCAK256"
    },
    "6499": {
      "op": "DUP1"
    },
    "6500": {
      "op": "SLOAD"
    },
    "6501": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "6503": {
      "op": "NOT"
    },
    "6504": {
      "op": "AND"
    },
    "6505": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6507": {
      "op": "OR"
    },
    "6508": {
      "op": "SWAP1"
    },
    "6509": {
      "op": "SSTORE"
    },
    "6510": {
      "op": "PUSH2",
      "value": "0x1974"
    },
    "6513": {
      "op": "CALLER"
    },
    "6514": {
      "op": "SWAP1"
    },
    "6515": {
      "op": "JUMP"
    },
    "6516": {
      "op": "JUMPDEST"
    },
    "6517": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6519": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6521": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6523": {
      "op": "SHL"
    },
    "6524": {
      "op": "SUB"
    },
    "6525": {
      "op": "AND"
    },
    "6526": {
      "op": "DUP2"
    },
    "6527": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6529": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6531": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6533": {
      "op": "SHL"
    },
    "6534": {
      "op": "SUB"
    },
    "6535": {
      "op": "AND"
    },
    "6536": {
      "op": "DUP4"
    },
    "6537": {
      "op": "PUSH32",
      "value": "0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D"
    },
    "6570": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6572": {
      "op": "MLOAD"
    },
    "6573": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6575": {
      "op": "MLOAD"
    },
    "6576": {
      "op": "DUP1"
    },
    "6577": {
      "op": "SWAP2"
    },
    "6578": {
      "op": "SUB"
    },
    "6579": {
      "op": "SWAP1"
    },
    "6580": {
      "op": "LOG4"
    },
    "6581": {
      "op": "POP"
    },
    "6582": {
      "op": "POP"
    },
    "6583": {
      "jump": "o",
      "op": "JUMP"
    },
    "6584": {
      "op": "JUMPDEST"
    },
    "6585": {
      "op": "PUSH2",
      "value": "0x19C2"
    },
    "6588": {
      "op": "DUP3"
    },
    "6589": {
      "op": "DUP3"
    },
    "6590": {
      "op": "PUSH2",
      "value": "0xFDE"
    },
    "6593": {
      "jump": "i",
      "op": "JUMP"
    },
    "6594": {
      "op": "JUMPDEST"
    },
    "6595": {
      "op": "ISZERO"
    },
    "6596": {
      "op": "PUSH2",
      "value": "0x763"
    },
    "6599": {
      "op": "JUMPI"
    },
    "6600": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6602": {
      "op": "DUP3"
    },
    "6603": {
      "op": "DUP2"
    },
    "6604": {
      "op": "MSTORE"
    },
    "6605": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6607": {
      "op": "DUP2"
    },
    "6608": {
      "op": "DUP2"
    },
    "6609": {
      "op": "MSTORE"
    },
    "6610": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6612": {
      "op": "DUP1"
    },
    "6613": {
      "op": "DUP4"
    },
    "6614": {
      "op": "KECCAK256"
    },
    "6615": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6617": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6619": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6621": {
      "op": "SHL"
    },
    "6622": {
      "op": "SUB"
    },
    "6623": {
      "op": "DUP6"
    },
    "6624": {
      "op": "AND"
    },
    "6625": {
      "op": "DUP1"
    },
    "6626": {
      "op": "DUP6"
    },
    "6627": {
      "op": "MSTORE"
    },
    "6628": {
      "op": "SWAP3"
    },
    "6629": {
      "op": "MSTORE"
    },
    "6630": {
      "op": "DUP1"
    },
    "6631": {
      "op": "DUP4"
    },
    "6632": {
      "op": "KECCAK256"
    },
    "6633": {
      "op": "DUP1"
    },
    "6634": {
      "op": "SLOAD"
    },
    "6635": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "6637": {
      "op": "NOT"
    },
    "6638": {
      "op": "AND"
    },
    "6639": {
      "op": "SWAP1"
    },
    "6640": {
      "op": "SSTORE"
    },
    "6641": {
      "op": "MLOAD"
    },
    "6642": {
      "op": "CALLER"
    },
    "6643": {
      "op": "SWAP3"
    },
    "6644": {
      "op": "DUP6"
    },
    "6645": {
      "op": "SWAP2"
    },
    "6646": {
      "op": "PUSH32",
      "value": "0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B"
    },
    "6679": {
      "op": "SWAP2"
    },
    "6680": {
      "op": "SWAP1"
    },
    "6681": {
      "op": "LOG4"
    },
    "6682": {
      "op": "POP"
    },
    "6683": {
      "op": "POP"
    },
    "6684": {
      "jump": "o",
      "op": "JUMP"
    },
    "6685": {
      "op": "JUMPDEST"
    },
    "6686": {
      "op": "DUP3"
    },
    "6687": {
      "op": "DUP1"
    },
    "6688": {
      "op": "SLOAD"
    },
    "6689": {
      "op": "PUSH2",
      "value": "0x1A29"
    },
    "6692": {
      "op": "SWAP1"
    },
    "6693": {
      "op": "PUSH2",
      "value": "0x1DEE"
    },
    "6696": {
      "jump": "i",
      "op": "JUMP"
    },
    "6697": {
      "op": "JUMPDEST"
    },
    "6698": {
      "op": "SWAP1"
    },
    "6699": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6701": {
      "op": "MSTORE"
    },
    "6702": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6704": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6706": {
      "op": "KECCAK256"
    },
    "6707": {
      "op": "SWAP1"
    },
    "6708": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "6710": {
      "op": "ADD"
    },
    "6711": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6713": {
      "op": "SWAP1"
    },
    "6714": {
      "op": "DIV"
    },
    "6715": {
      "op": "DUP2"
    },
    "6716": {
      "op": "ADD"
    },
    "6717": {
      "op": "SWAP3"
    },
    "6718": {
      "op": "DUP3"
    },
    "6719": {
      "op": "PUSH2",
      "value": "0x1A4B"
    },
    "6722": {
      "op": "JUMPI"
    },
    "6723": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6725": {
      "op": "DUP6"
    },
    "6726": {
      "op": "SSTORE"
    },
    "6727": {
      "op": "PUSH2",
      "value": "0x1A91"
    },
    "6730": {
      "op": "JUMP"
    },
    "6731": {
      "op": "JUMPDEST"
    },
    "6732": {
      "op": "DUP3"
    },
    "6733": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "6735": {
      "op": "LT"
    },
    "6736": {
      "op": "PUSH2",
      "value": "0x1A64"
    },
    "6739": {
      "op": "JUMPI"
    },
    "6740": {
      "op": "DUP3"
    },
    "6741": {
      "op": "DUP1"
    },
    "6742": {
      "op": "ADD"
    },
    "6743": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "6745": {
      "op": "NOT"
    },
    "6746": {
      "op": "DUP3"
    },
    "6747": {
      "op": "CALLDATALOAD"
    },
    "6748": {
      "op": "AND"
    },
    "6749": {
      "op": "OR"
    },
    "6750": {
      "op": "DUP6"
    },
    "6751": {
      "op": "SSTORE"
    },
    "6752": {
      "op": "PUSH2",
      "value": "0x1A91"
    },
    "6755": {
      "op": "JUMP"
    },
    "6756": {
      "op": "JUMPDEST"
    },
    "6757": {
      "op": "DUP3"
    },
    "6758": {
      "op": "DUP1"
    },
    "6759": {
      "op": "ADD"
    },
    "6760": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6762": {
      "op": "ADD"
    },
    "6763": {
      "op": "DUP6"
    },
    "6764": {
      "op": "SSTORE"
    },
    "6765": {
      "op": "DUP3"
    },
    "6766": {
      "op": "ISZERO"
    },
    "6767": {
      "op": "PUSH2",
      "value": "0x1A91"
    },
    "6770": {
      "op": "JUMPI"
    },
    "6771": {
      "op": "SWAP2"
    },
    "6772": {
      "op": "DUP3"
    },
    "6773": {
      "op": "ADD"
    },
    "6774": {
      "op": "JUMPDEST"
    },
    "6775": {
      "op": "DUP3"
    },
    "6776": {
      "op": "DUP2"
    },
    "6777": {
      "op": "GT"
    },
    "6778": {
      "op": "ISZERO"
    },
    "6779": {
      "op": "PUSH2",
      "value": "0x1A91"
    },
    "6782": {
      "op": "JUMPI"
    },
    "6783": {
      "op": "DUP3"
    },
    "6784": {
      "op": "CALLDATALOAD"
    },
    "6785": {
      "op": "DUP3"
    },
    "6786": {
      "op": "SSTORE"
    },
    "6787": {
      "op": "SWAP2"
    },
    "6788": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6790": {
      "op": "ADD"
    },
    "6791": {
      "op": "SWAP2"
    },
    "6792": {
      "op": "SWAP1"
    },
    "6793": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6795": {
      "op": "ADD"
    },
    "6796": {
      "op": "SWAP1"
    },
    "6797": {
      "op": "PUSH2",
      "value": "0x1A76"
    },
    "6800": {
      "op": "JUMP"
    },
    "6801": {
      "op": "JUMPDEST"
    },
    "6802": {
      "op": "POP"
    },
    "6803": {
      "op": "PUSH2",
      "value": "0x1A9D"
    },
    "6806": {
      "op": "SWAP3"
    },
    "6807": {
      "op": "SWAP2"
    },
    "6808": {
      "op": "POP"
    },
    "6809": {
      "op": "PUSH2",
      "value": "0x1AA1"
    },
    "6812": {
      "jump": "i",
      "op": "JUMP"
    },
    "6813": {
      "op": "JUMPDEST"
    },
    "6814": {
      "op": "POP"
    },
    "6815": {
      "op": "SWAP1"
    },
    "6816": {
      "jump": "o",
      "op": "JUMP"
    },
    "6817": {
      "op": "JUMPDEST"
    },
    "6818": {
      "op": "JUMPDEST"
    },
    "6819": {
      "op": "DUP1"
    },
    "6820": {
      "op": "DUP3"
    },
    "6821": {
      "op": "GT"
    },
    "6822": {
      "op": "ISZERO"
    },
    "6823": {
      "op": "PUSH2",
      "value": "0x1A9D"
    },
    "6826": {
      "op": "JUMPI"
    },
    "6827": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6829": {
      "op": "DUP2"
    },
    "6830": {
      "op": "SSTORE"
    },
    "6831": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6833": {
      "op": "ADD"
    },
    "6834": {
      "op": "PUSH2",
      "value": "0x1AA2"
    },
    "6837": {
      "op": "JUMP"
    },
    "6838": {
      "op": "JUMPDEST"
    },
    "6839": {
      "op": "DUP1"
    },
    "6840": {
      "op": "CALLDATALOAD"
    },
    "6841": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6843": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6845": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6847": {
      "op": "SHL"
    },
    "6848": {
      "op": "SUB"
    },
    "6849": {
      "op": "DUP2"
    },
    "6850": {
      "op": "AND"
    },
    "6851": {
      "op": "DUP2"
    },
    "6852": {
      "op": "EQ"
    },
    "6853": {
      "op": "PUSH2",
      "value": "0x1ACD"
    },
    "6856": {
      "op": "JUMPI"
    },
    "6857": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6859": {
      "op": "DUP1"
    },
    "6860": {
      "op": "REVERT"
    },
    "6861": {
      "op": "JUMPDEST"
    },
    "6862": {
      "op": "SWAP2"
    },
    "6863": {
      "op": "SWAP1"
    },
    "6864": {
      "op": "POP"
    },
    "6865": {
      "jump": "o",
      "op": "JUMP"
    },
    "6866": {
      "op": "JUMPDEST"
    },
    "6867": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6869": {
      "op": "DUP1"
    },
    "6870": {
      "op": "DUP4"
    },
    "6871": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "6873": {
      "op": "DUP5"
    },
    "6874": {
      "op": "ADD"
    },
    "6875": {
      "op": "SLT"
    },
    "6876": {
      "op": "PUSH2",
      "value": "0x1AE3"
    },
    "6879": {
      "op": "JUMPI"
    },
    "6880": {
      "op": "DUP2"
    },
    "6881": {
      "op": "DUP3"
    },
    "6882": {
      "op": "REVERT"
    },
    "6883": {
      "op": "JUMPDEST"
    },
    "6884": {
      "op": "POP"
    },
    "6885": {
      "op": "DUP2"
    },
    "6886": {
      "op": "CALLDATALOAD"
    },
    "6887": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "6896": {
      "op": "DUP2"
    },
    "6897": {
      "op": "GT"
    },
    "6898": {
      "op": "ISZERO"
    },
    "6899": {
      "op": "PUSH2",
      "value": "0x1AFA"
    },
    "6902": {
      "op": "JUMPI"
    },
    "6903": {
      "op": "DUP2"
    },
    "6904": {
      "op": "DUP3"
    },
    "6905": {
      "op": "REVERT"
    },
    "6906": {
      "op": "JUMPDEST"
    },
    "6907": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6909": {
      "op": "DUP4"
    },
    "6910": {
      "op": "ADD"
    },
    "6911": {
      "op": "SWAP2"
    },
    "6912": {
      "op": "POP"
    },
    "6913": {
      "op": "DUP4"
    },
    "6914": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6916": {
      "op": "DUP3"
    },
    "6917": {
      "op": "DUP6"
    },
    "6918": {
      "op": "ADD"
    },
    "6919": {
      "op": "ADD"
    },
    "6920": {
      "op": "GT"
    },
    "6921": {
      "op": "ISZERO"
    },
    "6922": {
      "op": "PUSH2",
      "value": "0x1B12"
    },
    "6925": {
      "op": "JUMPI"
    },
    "6926": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6928": {
      "op": "DUP1"
    },
    "6929": {
      "op": "REVERT"
    },
    "6930": {
      "op": "JUMPDEST"
    },
    "6931": {
      "op": "SWAP3"
    },
    "6932": {
      "op": "POP"
    },
    "6933": {
      "op": "SWAP3"
    },
    "6934": {
      "op": "SWAP1"
    },
    "6935": {
      "op": "POP"
    },
    "6936": {
      "jump": "o",
      "op": "JUMP"
    },
    "6937": {
      "op": "JUMPDEST"
    },
    "6938": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6940": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6942": {
      "op": "DUP3"
    },
    "6943": {
      "op": "DUP5"
    },
    "6944": {
      "op": "SUB"
    },
    "6945": {
      "op": "SLT"
    },
    "6946": {
      "op": "ISZERO"
    },
    "6947": {
      "op": "PUSH2",
      "value": "0x1B2A"
    },
    "6950": {
      "op": "JUMPI"
    },
    "6951": {
      "op": "DUP1"
    },
    "6952": {
      "op": "DUP2"
    },
    "6953": {
      "op": "REVERT"
    },
    "6954": {
      "op": "JUMPDEST"
    },
    "6955": {
      "op": "PUSH2",
      "value": "0x1B33"
    },
    "6958": {
      "op": "DUP3"
    },
    "6959": {
      "op": "PUSH2",
      "value": "0x1AB6"
    },
    "6962": {
      "jump": "i",
      "op": "JUMP"
    },
    "6963": {
      "op": "JUMPDEST"
    },
    "6964": {
      "op": "SWAP4"
    },
    "6965": {
      "op": "SWAP3"
    },
    "6966": {
      "op": "POP"
    },
    "6967": {
      "op": "POP"
    },
    "6968": {
      "op": "POP"
    },
    "6969": {
      "jump": "o",
      "op": "JUMP"
    },
    "6970": {
      "op": "JUMPDEST"
    },
    "6971": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6973": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6975": {
      "op": "DUP3"
    },
    "6976": {
      "op": "DUP5"
    },
    "6977": {
      "op": "SUB"
    },
    "6978": {
      "op": "SLT"
    },
    "6979": {
      "op": "ISZERO"
    },
    "6980": {
      "op": "PUSH2",
      "value": "0x1B4B"
    },
    "6983": {
      "op": "JUMPI"
    },
    "6984": {
      "op": "DUP1"
    },
    "6985": {
      "op": "DUP2"
    },
    "6986": {
      "op": "REVERT"
    },
    "6987": {
      "op": "JUMPDEST"
    },
    "6988": {
      "op": "POP"
    },
    "6989": {
      "op": "CALLDATALOAD"
    },
    "6990": {
      "op": "SWAP2"
    },
    "6991": {
      "op": "SWAP1"
    },
    "6992": {
      "op": "POP"
    },
    "6993": {
      "jump": "o",
      "op": "JUMP"
    },
    "6994": {
      "op": "JUMPDEST"
    },
    "6995": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6997": {
      "op": "DUP1"
    },
    "6998": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "7000": {
      "op": "DUP4"
    },
    "7001": {
      "op": "DUP6"
    },
    "7002": {
      "op": "SUB"
    },
    "7003": {
      "op": "SLT"
    },
    "7004": {
      "op": "ISZERO"
    },
    "7005": {
      "op": "PUSH2",
      "value": "0x1B64"
    },
    "7008": {
      "op": "JUMPI"
    },
    "7009": {
      "op": "DUP1"
    },
    "7010": {
      "op": "DUP2"
    },
    "7011": {
      "op": "REVERT"
    },
    "7012": {
      "op": "JUMPDEST"
    },
    "7013": {
      "op": "DUP3"
    },
    "7014": {
      "op": "CALLDATALOAD"
    },
    "7015": {
      "op": "SWAP2"
    },
    "7016": {
      "op": "POP"
    },
    "7017": {
      "op": "PUSH2",
      "value": "0x1B74"
    },
    "7020": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7022": {
      "op": "DUP5"
    },
    "7023": {
      "op": "ADD"
    },
    "7024": {
      "op": "PUSH2",
      "value": "0x1AB6"
    },
    "7027": {
      "jump": "i",
      "op": "JUMP"
    },
    "7028": {
      "op": "JUMPDEST"
    },
    "7029": {
      "op": "SWAP1"
    },
    "7030": {
      "op": "POP"
    },
    "7031": {
      "op": "SWAP3"
    },
    "7032": {
      "op": "POP"
    },
    "7033": {
      "op": "SWAP3"
    },
    "7034": {
      "op": "SWAP1"
    },
    "7035": {
      "op": "POP"
    },
    "7036": {
      "jump": "o",
      "op": "JUMP"
    },
    "7037": {
      "op": "JUMPDEST"
    },
    "7038": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7040": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7042": {
      "op": "DUP3"
    },
    "7043": {
      "op": "DUP5"
    },
    "7044": {
      "op": "SUB"
    },
    "7045": {
      "op": "SLT"
    },
    "7046": {
      "op": "ISZERO"
    },
    "7047": {
      "op": "PUSH2",
      "value": "0x1B8E"
    },
    "7050": {
      "op": "JUMPI"
    },
    "7051": {
      "op": "DUP1"
    },
    "7052": {
      "op": "DUP2"
    },
    "7053": {
      "op": "REVERT"
    },
    "7054": {
      "op": "JUMPDEST"
    },
    "7055": {
      "op": "DUP2"
    },
    "7056": {
      "op": "CALLDATALOAD"
    },
    "7057": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7059": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7061": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "7063": {
      "op": "SHL"
    },
    "7064": {
      "op": "SUB"
    },
    "7065": {
      "op": "NOT"
    },
    "7066": {
      "op": "DUP2"
    },
    "7067": {
      "op": "AND"
    },
    "7068": {
      "op": "DUP2"
    },
    "7069": {
      "op": "EQ"
    },
    "7070": {
      "op": "PUSH2",
      "value": "0x1B33"
    },
    "7073": {
      "op": "JUMPI"
    },
    "7074": {
      "op": "DUP2"
    },
    "7075": {
      "op": "DUP3"
    },
    "7076": {
      "op": "REVERT"
    },
    "7077": {
      "op": "JUMPDEST"
    },
    "7078": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7080": {
      "op": "DUP1"
    },
    "7081": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7083": {
      "op": "DUP4"
    },
    "7084": {
      "op": "DUP6"
    },
    "7085": {
      "op": "SUB"
    },
    "7086": {
      "op": "SLT"
    },
    "7087": {
      "op": "ISZERO"
    },
    "7088": {
      "op": "PUSH2",
      "value": "0x1BB7"
    },
    "7091": {
      "op": "JUMPI"
    },
    "7092": {
      "op": "DUP2"
    },
    "7093": {
      "op": "DUP3"
    },
    "7094": {
      "op": "REVERT"
    },
    "7095": {
      "op": "JUMPDEST"
    },
    "7096": {
      "op": "DUP3"
    },
    "7097": {
      "op": "CALLDATALOAD"
    },
    "7098": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "7107": {
      "op": "DUP2"
    },
    "7108": {
      "op": "GT"
    },
    "7109": {
      "op": "ISZERO"
    },
    "7110": {
      "op": "PUSH2",
      "value": "0x1BCD"
    },
    "7113": {
      "op": "JUMPI"
    },
    "7114": {
      "op": "DUP3"
    },
    "7115": {
      "op": "DUP4"
    },
    "7116": {
      "op": "REVERT"
    },
    "7117": {
      "op": "JUMPDEST"
    },
    "7118": {
      "op": "PUSH2",
      "value": "0x1BD9"
    },
    "7121": {
      "op": "DUP6"
    },
    "7122": {
      "op": "DUP3"
    },
    "7123": {
      "op": "DUP7"
    },
    "7124": {
      "op": "ADD"
    },
    "7125": {
      "op": "PUSH2",
      "value": "0x1AD2"
    },
    "7128": {
      "jump": "i",
      "op": "JUMP"
    },
    "7129": {
      "op": "JUMPDEST"
    },
    "7130": {
      "op": "SWAP1"
    },
    "7131": {
      "op": "SWAP7"
    },
    "7132": {
      "op": "SWAP1"
    },
    "7133": {
      "op": "SWAP6"
    },
    "7134": {
      "op": "POP"
    },
    "7135": {
      "op": "SWAP4"
    },
    "7136": {
      "op": "POP"
    },
    "7137": {
      "op": "POP"
    },
    "7138": {
      "op": "POP"
    },
    "7139": {
      "op": "POP"
    },
    "7140": {
      "jump": "o",
      "op": "JUMP"
    },
    "7141": {
      "op": "JUMPDEST"
    },
    "7142": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7144": {
      "op": "DUP1"
    },
    "7145": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7147": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "7149": {
      "op": "DUP5"
    },
    "7150": {
      "op": "DUP7"
    },
    "7151": {
      "op": "SUB"
    },
    "7152": {
      "op": "SLT"
    },
    "7153": {
      "op": "ISZERO"
    },
    "7154": {
      "op": "PUSH2",
      "value": "0x1BF9"
    },
    "7157": {
      "op": "JUMPI"
    },
    "7158": {
      "op": "DUP1"
    },
    "7159": {
      "op": "DUP2"
    },
    "7160": {
      "op": "REVERT"
    },
    "7161": {
      "op": "JUMPDEST"
    },
    "7162": {
      "op": "DUP4"
    },
    "7163": {
      "op": "CALLDATALOAD"
    },
    "7164": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "7173": {
      "op": "DUP2"
    },
    "7174": {
      "op": "GT"
    },
    "7175": {
      "op": "ISZERO"
    },
    "7176": {
      "op": "PUSH2",
      "value": "0x1C0F"
    },
    "7179": {
      "op": "JUMPI"
    },
    "7180": {
      "op": "DUP2"
    },
    "7181": {
      "op": "DUP3"
    },
    "7182": {
      "op": "REVERT"
    },
    "7183": {
      "op": "JUMPDEST"
    },
    "7184": {
      "op": "PUSH2",
      "value": "0x1C1B"
    },
    "7187": {
      "op": "DUP7"
    },
    "7188": {
      "op": "DUP3"
    },
    "7189": {
      "op": "DUP8"
    },
    "7190": {
      "op": "ADD"
    },
    "7191": {
      "op": "PUSH2",
      "value": "0x1AD2"
    },
    "7194": {
      "jump": "i",
      "op": "JUMP"
    },
    "7195": {
      "op": "JUMPDEST"
    },
    "7196": {
      "op": "SWAP1"
    },
    "7197": {
      "op": "SWAP5"
    },
    "7198": {
      "op": "POP"
    },
    "7199": {
      "op": "SWAP3"
    },
    "7200": {
      "op": "POP"
    },
    "7201": {
      "op": "PUSH2",
      "value": "0x1C2E"
    },
    "7204": {
      "op": "SWAP1"
    },
    "7205": {
      "op": "POP"
    },
    "7206": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7208": {
      "op": "DUP6"
    },
    "7209": {
      "op": "ADD"
    },
    "7210": {
      "op": "PUSH2",
      "value": "0x1AB6"
    },
    "7213": {
      "jump": "i",
      "op": "JUMP"
    },
    "7214": {
      "op": "JUMPDEST"
    },
    "7215": {
      "op": "SWAP1"
    },
    "7216": {
      "op": "POP"
    },
    "7217": {
      "op": "SWAP3"
    },
    "7218": {
      "op": "POP"
    },
    "7219": {
      "op": "SWAP3"
    },
    "7220": {
      "op": "POP"
    },
    "7221": {
      "op": "SWAP3"
    },
    "7222": {
      "jump": "o",
      "op": "JUMP"
    },
    "7223": {
      "op": "JUMPDEST"
    },
    "7224": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7226": {
      "op": "DUP1"
    },
    "7227": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7229": {
      "op": "DUP1"
    },
    "7230": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7232": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "7234": {
      "op": "DUP7"
    },
    "7235": {
      "op": "DUP9"
    },
    "7236": {
      "op": "SUB"
    },
    "7237": {
      "op": "SLT"
    },
    "7238": {
      "op": "ISZERO"
    },
    "7239": {
      "op": "PUSH2",
      "value": "0x1C4E"
    },
    "7242": {
      "op": "JUMPI"
    },
    "7243": {
      "op": "DUP1"
    },
    "7244": {
      "op": "DUP2"
    },
    "7245": {
      "op": "REVERT"
    },
    "7246": {
      "op": "JUMPDEST"
    },
    "7247": {
      "op": "DUP6"
    },
    "7248": {
      "op": "CALLDATALOAD"
    },
    "7249": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "7258": {
      "op": "DUP2"
    },
    "7259": {
      "op": "GT"
    },
    "7260": {
      "op": "ISZERO"
    },
    "7261": {
      "op": "PUSH2",
      "value": "0x1C64"
    },
    "7264": {
      "op": "JUMPI"
    },
    "7265": {
      "op": "DUP2"
    },
    "7266": {
      "op": "DUP3"
    },
    "7267": {
      "op": "REVERT"
    },
    "7268": {
      "op": "JUMPDEST"
    },
    "7269": {
      "op": "PUSH2",
      "value": "0x1C70"
    },
    "7272": {
      "op": "DUP9"
    },
    "7273": {
      "op": "DUP3"
    },
    "7274": {
      "op": "DUP10"
    },
    "7275": {
      "op": "ADD"
    },
    "7276": {
      "op": "PUSH2",
      "value": "0x1AD2"
    },
    "7279": {
      "jump": "i",
      "op": "JUMP"
    },
    "7280": {
      "op": "JUMPDEST"
    },
    "7281": {
      "op": "SWAP1"
    },
    "7282": {
      "op": "SWAP7"
    },
    "7283": {
      "op": "POP"
    },
    "7284": {
      "op": "SWAP5"
    },
    "7285": {
      "op": "POP"
    },
    "7286": {
      "op": "PUSH2",
      "value": "0x1C83"
    },
    "7289": {
      "op": "SWAP1"
    },
    "7290": {
      "op": "POP"
    },
    "7291": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7293": {
      "op": "DUP8"
    },
    "7294": {
      "op": "ADD"
    },
    "7295": {
      "op": "PUSH2",
      "value": "0x1AB6"
    },
    "7298": {
      "jump": "i",
      "op": "JUMP"
    },
    "7299": {
      "op": "JUMPDEST"
    },
    "7300": {
      "op": "SWAP3"
    },
    "7301": {
      "op": "POP"
    },
    "7302": {
      "op": "PUSH2",
      "value": "0x1C91"
    },
    "7305": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "7307": {
      "op": "DUP8"
    },
    "7308": {
      "op": "ADD"
    },
    "7309": {
      "op": "PUSH2",
      "value": "0x1AB6"
    },
    "7312": {
      "jump": "i",
      "op": "JUMP"
    },
    "7313": {
      "op": "JUMPDEST"
    },
    "7314": {
      "op": "SWAP5"
    },
    "7315": {
      "op": "SWAP8"
    },
    "7316": {
      "op": "SWAP4"
    },
    "7317": {
      "op": "SWAP7"
    },
    "7318": {
      "op": "POP"
    },
    "7319": {
      "op": "SWAP2"
    },
    "7320": {
      "op": "SWAP5"
    },
    "7321": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "7323": {
      "op": "ADD"
    },
    "7324": {
      "op": "CALLDATALOAD"
    },
    "7325": {
      "op": "SWAP3"
    },
    "7326": {
      "op": "SWAP2"
    },
    "7327": {
      "op": "POP"
    },
    "7328": {
      "op": "POP"
    },
    "7329": {
      "jump": "o",
      "op": "JUMP"
    },
    "7330": {
      "op": "JUMPDEST"
    },
    "7331": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7333": {
      "op": "DUP1"
    },
    "7334": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7336": {
      "op": "DUP1"
    },
    "7337": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "7339": {
      "op": "DUP6"
    },
    "7340": {
      "op": "DUP8"
    },
    "7341": {
      "op": "SUB"
    },
    "7342": {
      "op": "SLT"
    },
    "7343": {
      "op": "ISZERO"
    },
    "7344": {
      "op": "PUSH2",
      "value": "0x1CB7"
    },
    "7347": {
      "op": "JUMPI"
    },
    "7348": {
      "op": "DUP4"
    },
    "7349": {
      "op": "DUP5"
    },
    "7350": {
      "op": "REVERT"
    },
    "7351": {
      "op": "JUMPDEST"
    },
    "7352": {
      "op": "DUP5"
    },
    "7353": {
      "op": "CALLDATALOAD"
    },
    "7354": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "7363": {
      "op": "DUP2"
    },
    "7364": {
      "op": "GT"
    },
    "7365": {
      "op": "ISZERO"
    },
    "7366": {
      "op": "PUSH2",
      "value": "0x1CCD"
    },
    "7369": {
      "op": "JUMPI"
    },
    "7370": {
      "op": "DUP5"
    },
    "7371": {
      "op": "DUP6"
    },
    "7372": {
      "op": "REVERT"
    },
    "7373": {
      "op": "JUMPDEST"
    },
    "7374": {
      "op": "PUSH2",
      "value": "0x1CD9"
    },
    "7377": {
      "op": "DUP8"
    },
    "7378": {
      "op": "DUP3"
    },
    "7379": {
      "op": "DUP9"
    },
    "7380": {
      "op": "ADD"
    },
    "7381": {
      "op": "PUSH2",
      "value": "0x1AD2"
    },
    "7384": {
      "jump": "i",
      "op": "JUMP"
    },
    "7385": {
      "op": "JUMPDEST"
    },
    "7386": {
      "op": "SWAP1"
    },
    "7387": {
      "op": "SWAP6"
    },
    "7388": {
      "op": "POP"
    },
    "7389": {
      "op": "SWAP4"
    },
    "7390": {
      "op": "POP"
    },
    "7391": {
      "op": "PUSH2",
      "value": "0x1CEC"
    },
    "7394": {
      "op": "SWAP1"
    },
    "7395": {
      "op": "POP"
    },
    "7396": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7398": {
      "op": "DUP7"
    },
    "7399": {
      "op": "ADD"
    },
    "7400": {
      "op": "PUSH2",
      "value": "0x1AB6"
    },
    "7403": {
      "jump": "i",
      "op": "JUMP"
    },
    "7404": {
      "op": "JUMPDEST"
    },
    "7405": {
      "op": "SWAP4"
    },
    "7406": {
      "op": "SWAP7"
    },
    "7407": {
      "op": "SWAP3"
    },
    "7408": {
      "op": "SWAP6"
    },
    "7409": {
      "op": "POP"
    },
    "7410": {
      "op": "SWAP3"
    },
    "7411": {
      "op": "SWAP4"
    },
    "7412": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "7414": {
      "op": "ADD"
    },
    "7415": {
      "op": "CALLDATALOAD"
    },
    "7416": {
      "op": "SWAP3"
    },
    "7417": {
      "op": "POP"
    },
    "7418": {
      "op": "POP"
    },
    "7419": {
      "jump": "o",
      "op": "JUMP"
    },
    "7420": {
      "op": "JUMPDEST"
    },
    "7421": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7423": {
      "op": "DUP1"
    },
    "7424": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7426": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "7428": {
      "op": "DUP5"
    },
    "7429": {
      "op": "DUP7"
    },
    "7430": {
      "op": "SUB"
    },
    "7431": {
      "op": "SLT"
    },
    "7432": {
      "op": "ISZERO"
    },
    "7433": {
      "op": "PUSH2",
      "value": "0x1D10"
    },
    "7436": {
      "op": "JUMPI"
    },
    "7437": {
      "op": "DUP3"
    },
    "7438": {
      "op": "DUP4"
    },
    "7439": {
      "op": "REVERT"
    },
    "7440": {
      "op": "JUMPDEST"
    },
    "7441": {
      "op": "DUP4"
    },
    "7442": {
      "op": "CALLDATALOAD"
    },
    "7443": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "7452": {
      "op": "DUP2"
    },
    "7453": {
      "op": "GT"
    },
    "7454": {
      "op": "ISZERO"
    },
    "7455": {
      "op": "PUSH2",
      "value": "0x1D26"
    },
    "7458": {
      "op": "JUMPI"
    },
    "7459": {
      "op": "DUP4"
    },
    "7460": {
      "op": "DUP5"
    },
    "7461": {
      "op": "REVERT"
    },
    "7462": {
      "op": "JUMPDEST"
    },
    "7463": {
      "op": "PUSH2",
      "value": "0x1D32"
    },
    "7466": {
      "op": "DUP7"
    },
    "7467": {
      "op": "DUP3"
    },
    "7468": {
      "op": "DUP8"
    },
    "7469": {
      "op": "ADD"
    },
    "7470": {
      "op": "PUSH2",
      "value": "0x1AD2"
    },
    "7473": {
      "jump": "i",
      "op": "JUMP"
    },
    "7474": {
      "op": "JUMPDEST"
    },
    "7475": {
      "op": "SWAP1"
    },
    "7476": {
      "op": "SWAP8"
    },
    "7477": {
      "op": "SWAP1"
    },
    "7478": {
      "op": "SWAP7"
    },
    "7479": {
      "op": "POP"
    },
    "7480": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7482": {
      "op": "SWAP6"
    },
    "7483": {
      "op": "SWAP1"
    },
    "7484": {
      "op": "SWAP6"
    },
    "7485": {
      "op": "ADD"
    },
    "7486": {
      "op": "CALLDATALOAD"
    },
    "7487": {
      "op": "SWAP5"
    },
    "7488": {
      "op": "SWAP4"
    },
    "7489": {
      "op": "POP"
    },
    "7490": {
      "op": "POP"
    },
    "7491": {
      "op": "POP"
    },
    "7492": {
      "op": "POP"
    },
    "7493": {
      "jump": "o",
      "op": "JUMP"
    },
    "7494": {
      "op": "JUMPDEST"
    },
    "7495": {
      "op": "DUP2"
    },
    "7496": {
      "op": "DUP4"
    },
    "7497": {
      "op": "DUP3"
    },
    "7498": {
      "op": "CALLDATACOPY"
    },
    "7499": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7501": {
      "op": "SWAP2"
    },
    "7502": {
      "op": "ADD"
    },
    "7503": {
      "op": "SWAP1"
    },
    "7504": {
      "op": "DUP2"
    },
    "7505": {
      "op": "MSTORE"
    },
    "7506": {
      "op": "SWAP2"
    },
    "7507": {
      "op": "SWAP1"
    },
    "7508": {
      "op": "POP"
    },
    "7509": {
      "jump": "o",
      "op": "JUMP"
    },
    "7510": {
      "op": "JUMPDEST"
    },
    "7511": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7513": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7515": {
      "op": "DUP1"
    },
    "7516": {
      "op": "DUP4"
    },
    "7517": {
      "op": "ADD"
    },
    "7518": {
      "op": "DUP2"
    },
    "7519": {
      "op": "DUP5"
    },
    "7520": {
      "op": "MSTORE"
    },
    "7521": {
      "op": "DUP1"
    },
    "7522": {
      "op": "DUP6"
    },
    "7523": {
      "op": "MLOAD"
    },
    "7524": {
      "op": "DUP1"
    },
    "7525": {
      "op": "DUP4"
    },
    "7526": {
      "op": "MSTORE"
    },
    "7527": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "7529": {
      "op": "DUP7"
    },
    "7530": {
      "op": "ADD"
    },
    "7531": {
      "op": "SWAP2"
    },
    "7532": {
      "op": "POP"
    },
    "7533": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "7535": {
      "op": "DUP2"
    },
    "7536": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "7538": {
      "op": "SHL"
    },
    "7539": {
      "op": "DUP8"
    },
    "7540": {
      "op": "ADD"
    },
    "7541": {
      "op": "ADD"
    },
    "7542": {
      "op": "SWAP3"
    },
    "7543": {
      "op": "POP"
    },
    "7544": {
      "op": "DUP4"
    },
    "7545": {
      "op": "DUP8"
    },
    "7546": {
      "op": "ADD"
    },
    "7547": {
      "op": "DUP6"
    },
    "7548": {
      "op": "JUMPDEST"
    },
    "7549": {
      "op": "DUP3"
    },
    "7550": {
      "op": "DUP2"
    },
    "7551": {
      "op": "LT"
    },
    "7552": {
      "op": "ISZERO"
    },
    "7553": {
      "op": "PUSH2",
      "value": "0x1DE1"
    },
    "7556": {
      "op": "JUMPI"
    },
    "7557": {
      "op": "DUP8"
    },
    "7558": {
      "op": "DUP6"
    },
    "7559": {
      "op": "SUB"
    },
    "7560": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "7562": {
      "op": "NOT"
    },
    "7563": {
      "op": "ADD"
    },
    "7564": {
      "op": "DUP5"
    },
    "7565": {
      "op": "MSTORE"
    },
    "7566": {
      "op": "DUP2"
    },
    "7567": {
      "op": "MLOAD"
    },
    "7568": {
      "op": "DUP1"
    },
    "7569": {
      "op": "MLOAD"
    },
    "7570": {
      "op": "DUP1"
    },
    "7571": {
      "op": "DUP8"
    },
    "7572": {
      "op": "MSTORE"
    },
    "7573": {
      "op": "DUP9"
    },
    "7574": {
      "op": "JUMPDEST"
    },
    "7575": {
      "op": "DUP2"
    },
    "7576": {
      "op": "DUP2"
    },
    "7577": {
      "op": "LT"
    },
    "7578": {
      "op": "ISZERO"
    },
    "7579": {
      "op": "PUSH2",
      "value": "0x1DB1"
    },
    "7582": {
      "op": "JUMPI"
    },
    "7583": {
      "op": "DUP3"
    },
    "7584": {
      "op": "DUP2"
    },
    "7585": {
      "op": "ADD"
    },
    "7586": {
      "op": "DUP10"
    },
    "7587": {
      "op": "ADD"
    },
    "7588": {
      "op": "MLOAD"
    },
    "7589": {
      "op": "DUP9"
    },
    "7590": {
      "op": "DUP3"
    },
    "7591": {
      "op": "ADD"
    },
    "7592": {
      "op": "DUP11"
    },
    "7593": {
      "op": "ADD"
    },
    "7594": {
      "op": "MSTORE"
    },
    "7595": {
      "op": "DUP9"
    },
    "7596": {
      "op": "ADD"
    },
    "7597": {
      "op": "PUSH2",
      "value": "0x1D96"
    },
    "7600": {
      "op": "JUMP"
    },
    "7601": {
      "op": "JUMPDEST"
    },
    "7602": {
      "op": "DUP2"
    },
    "7603": {
      "op": "DUP2"
    },
    "7604": {
      "op": "GT"
    },
    "7605": {
      "op": "ISZERO"
    },
    "7606": {
      "op": "PUSH2",
      "value": "0x1DC1"
    },
    "7609": {
      "op": "JUMPI"
    },
    "7610": {
      "op": "DUP10"
    },
    "7611": {
      "op": "DUP10"
    },
    "7612": {
      "op": "DUP4"
    },
    "7613": {
      "op": "DUP11"
    },
    "7614": {
      "op": "ADD"
    },
    "7615": {
      "op": "ADD"
    },
    "7616": {
      "op": "MSTORE"
    },
    "7617": {
      "op": "JUMPDEST"
    },
    "7618": {
      "op": "POP"
    },
    "7619": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "7621": {
      "op": "ADD"
    },
    "7622": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "7624": {
      "op": "NOT"
    },
    "7625": {
      "op": "AND"
    },
    "7626": {
      "op": "SWAP6"
    },
    "7627": {
      "op": "SWAP1"
    },
    "7628": {
      "op": "SWAP6"
    },
    "7629": {
      "op": "ADD"
    },
    "7630": {
      "op": "DUP7"
    },
    "7631": {
      "op": "ADD"
    },
    "7632": {
      "op": "SWAP5"
    },
    "7633": {
      "op": "POP"
    },
    "7634": {
      "op": "SWAP3"
    },
    "7635": {
      "op": "DUP6"
    },
    "7636": {
      "op": "ADD"
    },
    "7637": {
      "op": "SWAP3"
    },
    "7638": {
      "op": "SWAP1"
    },
    "7639": {
      "op": "DUP6"
    },
    "7640": {
      "op": "ADD"
    },
    "7641": {
      "op": "SWAP1"
    },
    "7642": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7644": {
      "op": "ADD"
    },
    "7645": {
      "op": "PUSH2",
      "value": "0x1D7C"
    },
    "7648": {
      "op": "JUMP"
    },
    "7649": {
      "op": "JUMPDEST"
    },
    "7650": {
      "op": "POP"
    },
    "7651": {
      "op": "SWAP3"
    },
    "7652": {
      "op": "SWAP8"
    },
    "7653": {
      "op": "SWAP7"
    },
    "7654": {
      "op": "POP"
    },
    "7655": {
      "op": "POP"
    },
    "7656": {
      "op": "POP"
    },
    "7657": {
      "op": "POP"
    },
    "7658": {
      "op": "POP"
    },
    "7659": {
      "op": "POP"
    },
    "7660": {
      "op": "POP"
    },
    "7661": {
      "jump": "o",
      "op": "JUMP"
    },
    "7662": {
      "op": "JUMPDEST"
    },
    "7663": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7665": {
      "op": "DUP2"
    },
    "7666": {
      "op": "DUP2"
    },
    "7667": {
      "op": "SHR"
    },
    "7668": {
      "op": "SWAP1"
    },
    "7669": {
      "op": "DUP3"
    },
    "7670": {
      "op": "AND"
    },
    "7671": {
      "op": "DUP1"
    },
    "7672": {
      "op": "PUSH2",
      "value": "0x1E02"
    },
    "7675": {
      "op": "JUMPI"
    },
    "7676": {
      "op": "PUSH1",
      "value": "0x7F"
    },
    "7678": {
      "op": "DUP3"
    },
    "7679": {
      "op": "AND"
    },
    "7680": {
      "op": "SWAP2"
    },
    "7681": {
      "op": "POP"
    },
    "7682": {
      "op": "JUMPDEST"
    },
    "7683": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7685": {
      "op": "DUP3"
    },
    "7686": {
      "op": "LT"
    },
    "7687": {
      "op": "DUP2"
    },
    "7688": {
      "op": "EQ"
    },
    "7689": {
      "op": "ISZERO"
    },
    "7690": {
      "op": "PUSH2",
      "value": "0x1E23"
    },
    "7693": {
      "op": "JUMPI"
    },
    "7694": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "7699": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "7701": {
      "op": "SHL"
    },
    "7702": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7704": {
      "op": "MSTORE"
    },
    "7705": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "7707": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "7709": {
      "op": "MSTORE"
    },
    "7710": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "7712": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7714": {
      "op": "REVERT"
    },
    "7715": {
      "op": "JUMPDEST"
    },
    "7716": {
      "op": "POP"
    },
    "7717": {
      "op": "SWAP2"
    },
    "7718": {
      "op": "SWAP1"
    },
    "7719": {
      "op": "POP"
    },
    "7720": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "b23b9361bcc82cd3b06c97de6477a7bb26235a80",
  "source": "pragma solidity 0.8.4;\n\n// SPDX-License-Identifier: MIT\n\nimport './standard/access/AccessControl.sol';\nimport './../interfaces/IRegistry.sol';\n\n\ncontract Registry is AccessControl, IRegistry{\n    struct Comp{\n        bool active;\n        address competitionAddress;\n        address vaultAddress;\n        bytes32 rulesLocation;\n    }\n\n    struct Ext{\n        bool active;\n        address extensionAddress;\n        bytes32 informationLocation;\n    }\n    address private _token;\n    mapping(string => Comp) private _competition;\n    mapping(string => Ext) private _extension;\n    string[] private _competitionNames;\n    string[] private _extensionNames;\n\n\n    constructor()\n    {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    function getCompetitionList()\n    view external override\n    returns (string[] memory competitionNames)\n    {\n        competitionNames = _competitionNames;\n    }\n\n    function getExtensionList()\n    view external override\n    returns (string[] memory extensionNames)\n    {\n        extensionNames = _extensionNames;\n    }\n\n    function getCompetitionActive(string calldata competitionName)\n    view external override\n    returns (bool active)\n    {\n        active = _competition[competitionName].active;\n    }\n\n    function getCompetitionAddress(string calldata competitionName)\n    view external override\n    returns (address competitionAddress)\n    {\n        competitionAddress = _competition[competitionName].competitionAddress;\n    }\n\n    function getCompetitionVault(string calldata competitionName)\n    view external override\n    returns (address vaultAddress)\n    {\n        vaultAddress = _competition[competitionName].vaultAddress;\n    }\n\n    function getCompetitionRulesLocation(string calldata competitionName)\n    view external override\n    returns (bytes32 rulesLocation)\n    {\n        rulesLocation = _competition[competitionName].rulesLocation;\n    }\n\n    function getTokenAddress()\n    view external override\n    returns (address token)\n    {\n        token = _token;\n    }\n    \n    function getExtensionAddress(string calldata extensionName)\n    view external override\n    returns (address extensionAddress)\n    {\n        extensionAddress = _extension[extensionName].extensionAddress;\n    }\n    \n    function getExtensionActive(string calldata extensionName)\n    view external override\n    returns (bool active)\n    {\n        active = _extension[extensionName].active;\n    }\n    \n    function getExtensionRulesLocation(string calldata extensionName)\n    view external override\n    returns (bytes32 informationLocation)\n    {\n        informationLocation = _extension[extensionName].informationLocation;\n    }\n\n    function registerNewCompetition(string calldata competitionName, address competitionAddress, address vaultAddress, bytes32 rulesLocation)\n    external override\n    {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"Registry - registerNewCompetition: Caller is unauthorized.\");\n        require(!_competition[competitionName].active, \"Registry - registerNewCompetition: Competition already exists.\");\n        _competition[competitionName] = Comp({active:true, competitionAddress:competitionAddress, vaultAddress: vaultAddress, rulesLocation:rulesLocation});\n        _competitionNames.push(competitionName);\n\n        emit NewCompetitionRegistered(competitionName, competitionAddress, vaultAddress, rulesLocation);\n    }\n\n    function toggleCompetitionActive(string calldata competitionName)\n    external override\n    {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"Registry - toggleCompetitionActive: Caller is unauthorized.\");\n        require(_competition[competitionName].competitionAddress != address(0), \"Registry - toggleCompetitionActive: Competition does not exist. Use function 'registerNewCompetition' instead.\");\n        _competition[competitionName].active = !_competition[competitionName].active;\n\n        emit CompetitionActiveToggled(competitionName);\n    }\n\n    function changeCompetitionVault(string calldata competitionName, address newVaultAddress)\n    external override\n    {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"Registry - changeCompetitionVault: Caller is unauthorized.\");\n        require(_competition[competitionName].competitionAddress != address(0), \"Registry - changeCompetitionVault: Competition does not exist. Use function 'registerNewCompetition' instead.\");\n        require(newVaultAddress != address(0), \"Registry - changeCompetitionVault: Cannot set to 0 address.\");\n        _competition[competitionName].vaultAddress = newVaultAddress;\n\n        emit CompetitionVaultAddressChanged(competitionName, newVaultAddress);\n    }\n\n    function changeCompetitionRulesLocation(string calldata competitionName, bytes32 newLocation)\n    external override\n    {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"Registry - changeCompetitionRulesLocation: Caller is unauthorized.\");\n        require(_competition[competitionName].competitionAddress != address(0), \"Registry - changeCompetitionRulesLocation: Competition does not exist. Use function 'registerNewCompetition' instead.\");\n        require(newLocation != bytes32(0), \"Registry - changeCompetitionRulesLocation: Cannot set to 0 address.\");\n        _competition[competitionName].rulesLocation = newLocation;\n\n        emit CompetitionRulesLocationChanged(competitionName, newLocation);\n    }\n\n    function changeTokenAddress(address newAddress)\n    external override\n    {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"Registry - changeTokenAddress: Caller is unauthorized.\");\n        require(newAddress != address(0), \"Registry - changeTokenAddress: Cannot set to 0 address.\");\n        _token = newAddress;\n\n        emit TokenAddressChanged(newAddress);\n    }\n\n    function registerNewExtension(string calldata extensionName,address extensionAddress, bytes32 informationLocation)\n    external override\n    {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"Registry - registerNewExtension: Caller is unauthorized.\");\n        require(!_extension[extensionName].active, \"Registry - registerNewExtension: Extension already exists.\");\n        _extension[extensionName] = Ext({active:true, extensionAddress:extensionAddress, informationLocation:informationLocation});\n        _extensionNames.push(extensionName);\n\n        emit NewExtensionRegistered(extensionName, extensionAddress, informationLocation);\n    }\n    \n    function toggleExtensionActive(string calldata extensionName)\n    external override\n    {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"Registry - toggleExtensionActive: Caller is unauthorized.\");\n        require(_extension[extensionName].extensionAddress != address(0), \"Registry - toggleExtensionActive: Extension does not exist. Use function 'registerNewExtension' instead.\");\n        _extension[extensionName].active = !_extension[extensionName].active;\n\n        emit ExtensionActiveToggled(extensionName);\n    }\n    \n    function changeExtensionInfoLocation(string calldata extensionName, bytes32 newLocation)\n    external override\n    {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"Registry - changeExtensionInfoLocation: Caller is unauthorized.\");\n        require(_extension[extensionName].extensionAddress != address(0), \"Registry - changeExtensionInfoLocation: Competition does not exist. Use function 'registerNewCompetition' instead.\");\n        require(newLocation != bytes32(0), \"Registry - changeExtensionInfoLocation: Cannot set to 0 address.\");\n        _extension[extensionName].informationLocation = newLocation;\n\n        emit ExtensionInfoLocationChanged(extensionName, newLocation);\n    }\n    \n    \n}\n\n\n\n\n\n",
  "sourceMap": "145:7526:4:-:0;;;657:77;;;;;;;;;-1:-1:-1;685:42:4;2408:4:7;716:10:4;685;:42::i;:::-;145:7526;;6519:110:7;6597:25;6608:4;6614:7;6597:10;:25::i;:::-;6519:110;;:::o;6952:224::-;3945:4;3968:12;;;;;;;;;;;-1:-1:-1;;;;;3968:29:7;;;;;;;;;;;;7021:149;;7064:6;:12;;;;;;;;;;;-1:-1:-1;;;;;7064:29:7;;;;;;;;;:36;;-1:-1:-1;;7064:36:7;7096:4;7064:36;;;7146:12;665:10:65;;586:96;7146:12:7;-1:-1:-1;;;;;7119:40:7;7137:7;-1:-1:-1;;;;;7119:40:7;7131:4;7119:40;;;;;;;;;;6952:224;;:::o;145:7526:4:-;;;;;;;",
  "sourcePath": "contracts/Registry.sol",
  "type": "contract"
}